[{"/home/tthinksys/tremendo_frontend/pages/_app.js":"1","/home/tthinksys/tremendo_frontend/pages/_document.js":"2","/home/tthinksys/tremendo_frontend/pages/about-us/index.js":"3","/home/tthinksys/tremendo_frontend/pages/blogs/index.js":"4","/home/tthinksys/tremendo_frontend/pages/contact-us/index.js":"5","/home/tthinksys/tremendo_frontend/pages/dashboard/admin.js":"6","/home/tthinksys/tremendo_frontend/pages/dashboard/mentor.js":"7","/home/tthinksys/tremendo_frontend/pages/dashboard/student.js":"8","/home/tthinksys/tremendo_frontend/pages/faqs/index.js":"9","/home/tthinksys/tremendo_frontend/pages/index.js":"10","/home/tthinksys/tremendo_frontend/pages/language/[languageId].js":"11","/home/tthinksys/tremendo_frontend/pages/login/admin.js":"12","/home/tthinksys/tremendo_frontend/pages/login/index.js":"13","/home/tthinksys/tremendo_frontend/pages/order/index.js":"14","/home/tthinksys/tremendo_frontend/pages/reviews/index.js":"15","/home/tthinksys/tremendo_frontend/pages/signup/index.js":"16","/home/tthinksys/tremendo_frontend/components/AdminPages/AdminPages.js":"17","/home/tthinksys/tremendo_frontend/components/BlogBox/BlogBox.js":"18","/home/tthinksys/tremendo_frontend/components/Button/Button.js":"19","/home/tthinksys/tremendo_frontend/components/CalenderTab/CalenderTab.js":"20","/home/tthinksys/tremendo_frontend/components/Carousal/Carousel.js":"21","/home/tthinksys/tremendo_frontend/components/Carousal/CarouselSkelton.js":"22","/home/tthinksys/tremendo_frontend/components/Carousal/HomeCarousal.js":"23","/home/tthinksys/tremendo_frontend/components/CourseBox/CourseBox.js":"24","/home/tthinksys/tremendo_frontend/components/CourseDetailTab/AdminBatchManagment.js":"25","/home/tthinksys/tremendo_frontend/components/CourseDetailTab/BatchManagement.js":"26","/home/tthinksys/tremendo_frontend/components/CourseDetailTab/CourseDetailTab.js":"27","/home/tthinksys/tremendo_frontend/components/CourseDetailTab/MentorBatchDetails.js":"28","/home/tthinksys/tremendo_frontend/components/Dashboard/AdminDashboard.js":"29","/home/tthinksys/tremendo_frontend/components/Dashboard/Dashboard.js":"30","/home/tthinksys/tremendo_frontend/components/Dashboard/MentorDashboard.js":"31","/home/tthinksys/tremendo_frontend/components/Dashboard/StudentDashboardSkelton.js":"32","/home/tthinksys/tremendo_frontend/components/DeviceCheck/DesktopOnly.js":"33","/home/tthinksys/tremendo_frontend/components/DeviceCheck/MobileOnly.js":"34","/home/tthinksys/tremendo_frontend/components/FacebookLogin/FacebookLogin.js":"35","/home/tthinksys/tremendo_frontend/components/FaqTab/FaqTab.js":"36","/home/tthinksys/tremendo_frontend/components/FaqTab/MentorFaq.js":"37","/home/tthinksys/tremendo_frontend/components/FaqsStrip/FaqsStrip.js":"38","/home/tthinksys/tremendo_frontend/components/FlagWrapper/FlagWrapper.js":"39","/home/tthinksys/tremendo_frontend/components/FlagWrapper/FlagWrapperSkelton.js":"40","/home/tthinksys/tremendo_frontend/components/Footer/Footer.js":"41","/home/tthinksys/tremendo_frontend/components/Icons/Icons.js":"42","/home/tthinksys/tremendo_frontend/components/Image/Image.js":"43","/home/tthinksys/tremendo_frontend/components/Input/Input.js":"44","/home/tthinksys/tremendo_frontend/components/LanguageEdit/LanguageEdit.js":"45","/home/tthinksys/tremendo_frontend/components/Loader/PageLoader.js":"46","/home/tthinksys/tremendo_frontend/components/MyResourceTab/MentorMyResource.js":"47","/home/tthinksys/tremendo_frontend/components/MyResourceTab/MyResourceTab.js":"48","/home/tthinksys/tremendo_frontend/components/Navbar/Layout.js":"49","/home/tthinksys/tremendo_frontend/components/Navbar/Navbar.js":"50","/home/tthinksys/tremendo_frontend/components/ProfileTab/MentorProfile.js":"51","/home/tthinksys/tremendo_frontend/components/ProfileTab/ProfileTab.js":"52","/home/tthinksys/tremendo_frontend/components/ProgressTab/MentorProgresstab.js":"53","/home/tthinksys/tremendo_frontend/components/ProgressTab/ProgressTab.js":"54","/home/tthinksys/tremendo_frontend/components/PromotionBox/PromotionBox.js":"55","/home/tthinksys/tremendo_frontend/components/ReadMore/ReadMore.js":"56","/home/tthinksys/tremendo_frontend/components/ReviewBox/ReviewBox.js":"57","/home/tthinksys/tremendo_frontend/components/Skelton/LanguageDetailSkelton.js":"58","/home/tthinksys/tremendo_frontend/components/Skelton/Skeleton.js":"59","/home/tthinksys/tremendo_frontend/components/StatusBar/StatusBar.js":"60","/home/tthinksys/tremendo_frontend/components/Tab/AdminTab.js":"61","/home/tthinksys/tremendo_frontend/components/Tab/Tab.js":"62","/home/tthinksys/tremendo_frontend/components/Trustfactor/Trustfactor.js":"63","/home/tthinksys/tremendo_frontend/components/VisibilityChild/VisibilityChild.js":"64","/home/tthinksys/tremendo_frontend/components/WhyTremendo/WhyTremendo.js":"65","/home/tthinksys/tremendo_frontend/components/WriteFormBox/WriteFormBox.js":"66"},{"size":1656,"mtime":1650375570106,"results":"67","hashOfConfig":"68"},{"size":851,"mtime":1648824072535,"results":"69","hashOfConfig":"68"},{"size":11296,"mtime":1651343414810,"results":"70","hashOfConfig":"68"},{"size":2945,"mtime":1651343414810,"results":"71","hashOfConfig":"68"},{"size":10756,"mtime":1651395113547,"results":"72","hashOfConfig":"68"},{"size":2574,"mtime":1650878545992,"results":"73","hashOfConfig":"68"},{"size":3309,"mtime":1651340989449,"results":"74","hashOfConfig":"68"},{"size":3114,"mtime":1651341112535,"results":"75","hashOfConfig":"68"},{"size":7855,"mtime":1651343414754,"results":"76","hashOfConfig":"68"},{"size":11677,"mtime":1651395113547,"results":"77","hashOfConfig":"68"},{"size":17773,"mtime":1651395113547,"results":"78","hashOfConfig":"68"},{"size":5077,"mtime":1650722376893,"results":"79","hashOfConfig":"68"},{"size":11817,"mtime":1651395113547,"results":"80","hashOfConfig":"68"},{"size":6385,"mtime":1651395113547,"results":"81","hashOfConfig":"68"},{"size":7627,"mtime":1651344022145,"results":"82","hashOfConfig":"68"},{"size":12619,"mtime":1651395113547,"results":"83","hashOfConfig":"68"},{"size":20474,"mtime":1651068967340,"results":"84","hashOfConfig":"68"},{"size":887,"mtime":1648824072503,"results":"85","hashOfConfig":"68"},{"size":3505,"mtime":1648824072503,"results":"86","hashOfConfig":"68"},{"size":5424,"mtime":1650727416166,"results":"87","hashOfConfig":"68"},{"size":466,"mtime":1637056520293,"results":"88","hashOfConfig":"68"},{"size":187,"mtime":1648824072503,"results":"89","hashOfConfig":"68"},{"size":829,"mtime":1648824072503,"results":"90","hashOfConfig":"68"},{"size":1905,"mtime":1651395113543,"results":"91","hashOfConfig":"68"},{"size":16286,"mtime":1651243020395,"results":"92","hashOfConfig":"68"},{"size":6733,"mtime":1651343921038,"results":"93","hashOfConfig":"68"},{"size":5921,"mtime":1651395113543,"results":"94","hashOfConfig":"68"},{"size":9750,"mtime":1651320813617,"results":"95","hashOfConfig":"68"},{"size":10021,"mtime":1651340188074,"results":"96","hashOfConfig":"68"},{"size":8278,"mtime":1651343921046,"results":"97","hashOfConfig":"68"},{"size":14087,"mtime":1651343921050,"results":"98","hashOfConfig":"68"},{"size":944,"mtime":1648824072511,"results":"99","hashOfConfig":"68"},{"size":236,"mtime":1637147519880,"results":"100","hashOfConfig":"68"},{"size":234,"mtime":1637147580296,"results":"101","hashOfConfig":"68"},{"size":893,"mtime":1651395113543,"results":"102","hashOfConfig":"68"},{"size":5425,"mtime":1651343921050,"results":"103","hashOfConfig":"68"},{"size":5087,"mtime":1651343921050,"results":"104","hashOfConfig":"68"},{"size":1027,"mtime":1648824072511,"results":"105","hashOfConfig":"68"},{"size":965,"mtime":1650510721897,"results":"106","hashOfConfig":"68"},{"size":585,"mtime":1648824072515,"results":"107","hashOfConfig":"68"},{"size":7084,"mtime":1651395113543,"results":"108","hashOfConfig":"68"},{"size":916,"mtime":1636904223701,"results":"109","hashOfConfig":"68"},{"size":2660,"mtime":1648824072515,"results":"110","hashOfConfig":"68"},{"size":629,"mtime":1651342670000,"results":"111","hashOfConfig":"68"},{"size":20031,"mtime":1650883429162,"results":"112","hashOfConfig":"68"},{"size":499,"mtime":1648824072519,"results":"113","hashOfConfig":"68"},{"size":27553,"mtime":1651395113543,"results":"114","hashOfConfig":"68"},{"size":12569,"mtime":1651395113543,"results":"115","hashOfConfig":"68"},{"size":331,"mtime":1648824072519,"results":"116","hashOfConfig":"68"},{"size":12581,"mtime":1651395113543,"results":"117","hashOfConfig":"68"},{"size":19267,"mtime":1651395113547,"results":"118","hashOfConfig":"68"},{"size":18025,"mtime":1651395113547,"results":"119","hashOfConfig":"68"},{"size":13063,"mtime":1651343921054,"results":"120","hashOfConfig":"68"},{"size":9840,"mtime":1651343921050,"results":"121","hashOfConfig":"68"},{"size":629,"mtime":1648824072527,"results":"122","hashOfConfig":"68"},{"size":619,"mtime":1636972692151,"results":"123","hashOfConfig":"68"},{"size":4715,"mtime":1651340246613,"results":"124","hashOfConfig":"68"},{"size":762,"mtime":1648824072527,"results":"125","hashOfConfig":"68"},{"size":224,"mtime":1648824072527,"results":"126","hashOfConfig":"68"},{"size":431,"mtime":1648824072527,"results":"127","hashOfConfig":"68"},{"size":2401,"mtime":1650553796855,"results":"128","hashOfConfig":"68"},{"size":20943,"mtime":1651395113547,"results":"129","hashOfConfig":"68"},{"size":521,"mtime":1636909423276,"results":"130","hashOfConfig":"68"},{"size":750,"mtime":1636904071429,"results":"131","hashOfConfig":"68"},{"size":452,"mtime":1636911044169,"results":"132","hashOfConfig":"68"},{"size":2115,"mtime":1651340246585,"results":"133","hashOfConfig":"68"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1pgzo7r",{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150"},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153"},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156"},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159"},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162"},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169"},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172"},{"filePath":"173","messages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183"},{"filePath":"184","messages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194"},{"filePath":"195","messages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197"},{"filePath":"198","messages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200"},{"filePath":"201","messages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203"},{"filePath":"204","messages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"206","messages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208"},{"filePath":"209","messages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211"},{"filePath":"212","messages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"214","messages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"218","messages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"220","messages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"222","messages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"224","messages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"226","messages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"228","messages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"230","messages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"232","messages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"234","messages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236"},{"filePath":"237","messages":"238","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"239","messages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241"},{"filePath":"242","messages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"244","messages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246"},{"filePath":"247","messages":"248","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249"},{"filePath":"250","messages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"252","messages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254"},{"filePath":"255","messages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257"},{"filePath":"258","messages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260"},{"filePath":"261","messages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263"},{"filePath":"264","messages":"265","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266"},{"filePath":"267","messages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"269","messages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"271","messages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"273","messages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"275","messages":"276","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"277","messages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"279","messages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"281","messages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283"},{"filePath":"284","messages":"285","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"286","messages":"287","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"288","messages":"289","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"290","messages":"291","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/tthinksys/tremendo_frontend/pages/_app.js",[],"/home/tthinksys/tremendo_frontend/pages/_document.js",[],"/home/tthinksys/tremendo_frontend/pages/about-us/index.js",["292"],"import { useEffect } from \"react\";\nimport Head from \"next/head\";\nimport Image from \"next/image\";\nimport ImageComponent from \"../../components/Image/Image\";\nimport styles from \"../../styles/AboutUs.module.css\";\nimport MobileOnly from \"../../components/DeviceCheck/MobileOnly\";\nimport DesktopOnly from \"../../components/DeviceCheck/DesktopOnly\";\nimport { useRouter } from \"next/router\";\n\nexport default function AboutUs() {\n  const router = useRouter();\n  useEffect(() => {\n    const scrollID = router.asPath.split(\"#\")[1];\n    if (scrollID)\n      document.getElementById(scrollID).scrollIntoView({\n        behavior: \"smooth\"\n      });\n  }, []);\n  const section1 = () => {\n    return (\n      <div className={styles.section1Base}>\n        <div className={styles.image1}>\n          <Image\n            src={\n              \"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Fabout-us1.png?alt=media&token=aa9acba2-ae1f-4956-8e8b-96f9031f6c0a\"\n            }\n            width={\"362px\"}\n            height={\"230px\"}\n            alt=\"aboutus\"\n          />\n        </div>\n        <div className={styles.textWrapper}>\n          <div className={styles.header1Wrapper}>\n            <div className={styles.heading1} id=\"whoweare\">\n              Who we are?\n            </div>\n            <div className={styles.borderStyling}></div>\n          </div>\n          <div className={styles.sectionText}>\n            We are a team of highly skilled people fluent in different languages\n            and with great teaching experience. We help people take over the\n            professional world with an extra language skill that results in\n            extremely beneficial career opportunities. With Tremendo you can\n            learn new languages from anywhere in the world, under the guidance\n            of the best mentors.\n            <br />\n            <br /> With an increase in Multinational companies in India,\n            companies look forward to hiring people who know more than one\n            language. So, with us you develop a skill which creates the best\n            jobs for you and keep your resume on demand in the market.{\" \"}\n          </div>\n        </div>\n      </div>\n    );\n  };\n  const section2 = () => {\n    return (\n      <div className={styles.section1Base}>\n        <MobileOnly>\n          <div className={styles.image1}>\n            <Image\n              src={\n                \"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Fabout-us2.png?alt=media&token=4236000c-220a-4798-b940-139ea2a4c999\"\n              }\n              width={\"362px\"}\n              height={\"230px\"}\n              alt=\"aboutus\"\n            />\n          </div>\n        </MobileOnly>\n        <div className={styles.textWrapper}>\n          <div className={styles.header1Wrapper}>\n            <div className={styles.heading1} id=\"whatwedo\">\n              What we do?\n            </div>\n            <div className={styles.borderStyling}></div>\n          </div>\n          <div className={styles.sectionText}>\n            We offer different language courses starting from the Beginner level\n            so that one could learn from scratch for better understanding. We\n            provide Digital Learning, Quick Growth, Experienced Mentors,\n            Real-Time Feedback, making it easier for our students to get\n            comfortable and improve their understanding.\n            <br />\n            <br />\n            We provide virtual classes that are easier to attend from anywhere,\n            following the batch time provided. The live classes ensure\n            seriousness and help students to ask their queries and get instant\n            solutions from the experts. We also provide digital study material\n            making it convenient for you to study in your free time and grow\n            enthusiastically in the competitive world. <br />\n            <br />\n            When you enroll in a class with us, you are also contributing\n            towards saving the environment. As our program is completely\n            digital, no paper is utilized, and you save on natural energy on the\n            commute.\n          </div>\n        </div>\n        <DesktopOnly>\n          <div className={styles.image1}>\n            <Image\n              src={\n                \"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Fabout-us2.png?alt=media&token=4236000c-220a-4798-b940-139ea2a4c999\"\n              }\n              width={\"362px\"}\n              height={\"230px\"}\n              alt=\"aboutus\"\n            />\n          </div>\n        </DesktopOnly>\n      </div>\n    );\n  };\n  const section3 = () => {\n    return (\n      <div className={styles.section1Base}>\n        <div className={styles.image1}>\n          <Image\n            src={\n              \"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Fabout-us3.png?alt=media&token=901ff546-c6df-47e5-930b-19d2ca3a36ca\"\n            }\n            width={\"320px\"}\n            height={\"280px\"}\n            alt=\"aboutus\"\n          />\n        </div>\n        <div className={styles.textWrapper}>\n          <div className={styles.header1Wrapper}>\n            <div className={styles.heading1} id=\"ourmission\">\n              Our mission\n            </div>\n            <div className={styles.borderStyling}></div>\n          </div>\n          <div className={styles.sectionText}>\n            Everyone has got their reasons to learn languages. Some acquire\n            knowledge because of their interest, and others want to master them\n            to get better in the professional world. <br />\n            <br />\n            We at Tremendo come up with various ways to make learning new\n            languages easy and fun so that you can follow your ambition and\n            develop a new skill. <br />\n            <br />\n            Learning a language could also be beneficial for you to explore new\n            cultures and traditions across the world. It also helps you\n            re-imagine something which you were not able to understand in the\n            first place. <br />\n            <br />\n            Knowing a second language not only enhances your profile\n            professionally, but also introduces you to a variety of beliefs and\n            traditions.\n          </div>\n        </div>\n      </div>\n    );\n  };\n  const section4 = () => {\n    return (\n      <div className={styles.section1Base}>\n        <MobileOnly>\n          <div className={styles.image1}>\n            <Image\n              src={\n                \"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Fabout-us4.png?alt=media&token=132bc022-611a-4736-8b09-645474719063\"\n              }\n              width={\"320px\"}\n              height={\"340px\"}\n              alt=\"aboutus\"\n            />\n          </div>\n        </MobileOnly>\n        <div className={styles.textWrapper}>\n          <div className={styles.header1Wrapper}>\n            <div className={styles.heading1} id=\"ourvision\">\n              Our vision\n            </div>\n            <div className={styles.borderStyling}></div>\n          </div>\n          <div className={styles.sectionText}>\n            When it comes to visualizing ourselves over the years, we see\n            ourselves as a bridge connecting the world through languages.\n            <br />\n            <br />\n            We want to motivate people to learn new languages and make it easier\n            for everyone to communicate. The continents did not separate us- it\n            only allowed us to widen our horizons and learn more. <br />\n            <br />\n            We aim at helping people become better in their lives personally and\n            achieve their professional goals.\n          </div>\n        </div>\n        <DesktopOnly>\n          <div className={styles.image1}>\n            <Image\n              src={\n                \"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Fabout-us4.png?alt=media&token=132bc022-611a-4736-8b09-645474719063\"\n              }\n              width={\"320px\"}\n              height={\"340px\"}\n              alt=\"aboutus\"\n            />\n          </div>\n        </DesktopOnly>\n      </div>\n    );\n  };\n  return (\n    <div className={styles.base}>\n      <Head>\n        <title>Tremendo-About-us</title>\n        <meta name=\"description\" content=\"Tremendo About us page\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n\n      <div className={styles.banner}>\n        <DesktopOnly>\n          <ImageComponent\n            src={\n              \"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Faboutus_banner.png?alt=media&token=f48ff76f-30a1-40d0-b45c-8e9f62b9fd2f\"\n            }\n            paddingBottom={\"35%\"}\n            alt={\"banner logo\"}\n          />\n        </DesktopOnly>\n        <MobileOnly>\n          <ImageComponent\n            src={\n              \"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Fabout_banner_mobile.png?alt=media&token=be8f7644-800d-41fd-bb84-44e199f49785\"\n            }\n            paddingBottom={\"65%\"}\n            alt={\"banner logo\"}\n          />\n        </MobileOnly>\n      </div>\n      <div className={styles.sections}>\n        <div className={styles.contentWrapper}>\n          <div className={styles.header}>\n            <div className={styles.borderStyling}></div>\n            <div className={styles.heading}>ABOUT US</div>\n            <div className={styles.borderStyling}></div>\n          </div>\n          <div className={styles.text}>\n            We started Tremendo to build a bridge of communication across the\n            world. We aim to give every keen learner a platform where they can\n            master any language at the comfort of their home.\n            <br />\n            Learning new languages can be fun and exciting and help you achieve\n            your career goals and enroll in colleges abroad. It also opens a\n            vast number of job opportunities for you worldwide. That is why we\n            offer education through a hybrid learning platform where you get\n            live classes and real-time feedback on your progress.\n            <br />\n            <br />\n            <br />\n            Our faculty is a team of expert linguists and native speakers from\n            all corners of the globe who have come together to teach different\n            languages. We make sure to use the latest technologies with\n            enjoyable and effective learning features so that you feel confident\n            when its time to showcase your talent.\n            <br />\n            So welcome onboard amigos, and start your voyage to your favorite\n            continent!\n          </div>\n          {section1()}\n          {section2()}\n          {section3()}\n          {section4()}\n        </div>\n        <div>\n          <ImageComponent\n            src={\n              \"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Flearn_grow_lead.png?alt=media&token=28f934e6-52ec-4783-a68b-aca27f4d2d3e\"\n            }\n            paddingBottom={\"15%\"}\n            alt={\"banner logo\"}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","/home/tthinksys/tremendo_frontend/pages/blogs/index.js",["293"],"import Head from \"next/head\";\nimport { useContext, useEffect } from \"react\";\nimport BlogBox from \"../../components/BlogBox/BlogBox\";\nimport DesktopOnly from \"../../components/DeviceCheck/DesktopOnly\";\nimport MobileOnly from \"../../components/DeviceCheck/MobileOnly\";\nimport ImageComponent from \"../../components/Image/Image\";\nimport LanguageDetailSkelton from \"../../components/Skelton/LanguageDetailSkelton\";\nimport { getBlogs } from \"../../Context/Actions/Home/HomeAction\";\nimport { GlobalContext } from \"../../Context/Provider\";\nimport styles from \"../../styles/Blogs.module.css\";\n\nexport default function Blogs() {\n  const { homeState, homeDispatch: dispatch } = useContext(GlobalContext);\n  useEffect(() => {\n    getBlogs()(dispatch);\n  }, []);\n\n  const header = headerName => {\n    return (\n      <div className={styles.headerWrapper}>\n        <div className={styles.borderLineStyling}></div>\n        <div className={styles.headerHeading}>{headerName}</div>\n        <div className={styles.borderLineStyling}></div>\n      </div>\n    );\n  };\n  return (\n    <div className={styles.base}>\n      <Head>\n        <title>Tremendo-Blogs</title>\n        <meta name=\"description\" content=\"Tremendo Blogs page\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n\n      <div className={styles.banner}>\n        <DesktopOnly>\n          <ImageComponent\n            src={\n              \"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2FBlogsBanner.png?alt=media&token=b7c1e412-c53d-4eb7-86ce-e65a4a03586a\"\n            }\n            paddingBottom={\"21%\"}\n            alt={\"banner logo\"}\n          />\n        </DesktopOnly>\n        <MobileOnly>\n          <ImageComponent\n            src={\n              \"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Fabout_banner_mobile.png?alt=media&token=be8f7644-800d-41fd-bb84-44e199f49785\"\n            }\n            paddingBottom={\"65%\"}\n            alt={\"banner logo\"}\n          />\n        </MobileOnly>\n      </div>\n\n      <div className={styles.sections}>\n        {homeState.getBlogsLoading ? (\n          <LanguageDetailSkelton />\n        ) : (\n          <div className={styles.contentWrapper}>\n            <div className={styles.header}>{header(\"OUR BLOG\")}</div>\n            <div className={styles.blogWrapper}>\n              {homeState.getBlogs.map((i, index) => (\n                <div key={index} className={styles.blogs}>\n                  <BlogBox data={i} />\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n        <div>\n          <ImageComponent\n            src={\n              \"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Flearn_grow_lead.png?alt=media&token=28f934e6-52ec-4783-a68b-aca27f4d2d3e\"\n            }\n            paddingBottom={\"15%\"}\n            alt={\"banner logo\"}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","/home/tthinksys/tremendo_frontend/pages/contact-us/index.js",[],"/home/tthinksys/tremendo_frontend/pages/dashboard/admin.js",[],"/home/tthinksys/tremendo_frontend/pages/dashboard/mentor.js",["294"],"import Head from \"next/head\";\nimport { useContext, useState, useEffect } from \"react\";\nimport Tab from \"../../components/Tab/Tab\";\nimport styles from \"../../styles/student.module.css\";\nimport withAuth from \"../../utils/withAuth\";\nimport MentorDashboard from \"../../components/Dashboard/MentorDashboard\";\nimport BatchManagement from \"../../components/CourseDetailTab/BatchManagement\";\nimport MentorMyResource from \"../../components/MyResourceTab/MentorMyResource\";\nimport MentorProgresstab from \"../../components/ProgressTab/MentorProgresstab\";\nimport MentorFaq from \"../../components/FaqTab/MentorFaq\";\nimport MentorProfile from \"../../components/ProfileTab/MentorProfile\";\nimport { LOGIN_MENTOR_TAB, USER_DETAILS } from \"../../utils/constants\";\nimport { useRouter } from \"next/router\";\nimport { HOME_PAGE, MENTOR_DASHBOARD_PATH } from \"../../utils/routes\";\nimport { GlobalContext } from \"../../Context/Provider\";\nimport {\n  getMentorBatches,\n  getMentorStudentList,\n  mentorUpcomingTasks\n} from \"../../Context/Actions/Dashboard/DashboardAction\";\n\nconst INITIAL_TAB_INDEX = 6;\n\nfunction Mentor() {\n  const tabs = [\n    {\n      id: 1,\n      tab: \"Dashboard\",\n      icon: \"dashboardIcon\",\n      component: <MentorDashboard />\n    },\n    {\n      id: 2,\n      tab: \"Batch Details\",\n      icon: \"courseDetail\",\n      component: <BatchManagement />\n    },\n    {\n      id: 3,\n      tab: \"My Resources\",\n      icon: \"myResource\",\n      component: <MentorMyResource />\n    },\n    {\n      id: 4,\n      tab: \"Progress\",\n      icon: \"progress\",\n      component: <MentorProgresstab />\n    },\n    { id: 5, tab: \"FAQ\", icon: \"faq\", component: <MentorFaq /> },\n    { id: 6, tab: \"Profile\", icon: \"setting\", component: <MentorProfile /> }\n  ];\n  const [selectedTabIndex, setSelectedTabIndex] = useState(INITIAL_TAB_INDEX);\n  const {\n    studentDashboardState,\n    studentDashboardDispatch: dispatch\n  } = useContext(GlobalContext);\n  const router = useRouter();\n\n  const clickOnTab = data => {\n    setSelectedTabIndex(data.id);\n    router.push(`${MENTOR_DASHBOARD_PATH}?id=${data.id}`);\n  };\n\n  useEffect(() => {\n    setTabIndex();\n    getInitalData();\n  }, []);\n  const setTabIndex = () => {\n    const tabID = router.query.id ? router.query.id : INITIAL_TAB_INDEX;\n    setSelectedTabIndex(tabID);\n  };\n  const getInitalData = async () => {\n    const batches = await getMentorBatches()(dispatch);\n    const firstBatchId = batches.data.length > 0 && batches.data[0].batch_id;\n    await getMentorStudentList(firstBatchId)(dispatch);\n    await mentorUpcomingTasks()(dispatch);\n  };\n  const userDetails =\n    typeof window !== \"undefined\" &&\n    localStorage.getItem(USER_DETAILS) &&\n    JSON.parse(localStorage.getItem(USER_DETAILS));\n\n  if (userDetails && userDetails.access_type != LOGIN_MENTOR_TAB) {\n    return false;\n  }\n\n  return (\n    <div className={styles.base}>\n      <Head>\n        <title>Tremendo-Dashboard</title>\n        <meta name=\"description\" content=\"Tremendo Dashboard page\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <Tab\n        tabsData={tabs}\n        selectTab={data => clickOnTab(data)}\n        selectedTab={selectedTabIndex}\n        studentDashboard={false}\n        sendDataCallback={id => setSelectedTabIndex(id)}\n      />\n    </div>\n  );\n}\n\nexport default withAuth(Mentor);\n","/home/tthinksys/tremendo_frontend/pages/dashboard/student.js",["295"],"import Head from \"next/head\";\nimport { useContext, useState, useEffect } from \"react\";\nimport Tab from \"../../components/Tab/Tab\";\nimport styles from \"../../styles/student.module.css\";\nimport withAuth from \"../../utils/withAuth\";\nimport Dashboard from \"../../components/Dashboard/Dashboard\";\nimport CourseDetailTab from \"../../components/CourseDetailTab/CourseDetailTab\";\nimport ProgressTab from \"../../components/ProgressTab/ProgressTab\";\nimport MyResourceTab from \"../../components/MyResourceTab/MyResourceTab\";\nimport FaqTab from \"../../components/FaqTab/FaqTab\";\nimport ProfileTab from \"../../components/ProfileTab/ProfileTab\";\nimport { LOGIN_STUDENT_TAB, USER_DETAILS } from \"../../utils/constants\";\nimport { GlobalContext } from \"../../Context/Provider\";\nimport {\n  studentBatchMates,\n  studentUpcomingTasks\n} from \"../../Context/Actions/Dashboard/DashboardAction\";\nimport { STUDENT_DASHBOARD_PATH } from \"../../utils/routes\";\nimport { useRouter } from \"next/router\";\n\nconst INITIAL_TAB_INDEX = 6;\n\nfunction Student() {\n  const tabs = [\n    {\n      id: 1,\n      tab: \"Dashboard\",\n      icon: \"dashboardIcon\",\n      component: <Dashboard />\n    },\n    {\n      id: 2,\n      tab: \"Course Details\",\n      icon: \"courseDetail\",\n      component: <CourseDetailTab />\n    },\n    {\n      id: 3,\n      tab: \"My Resources\",\n      icon: \"myResource\",\n      component: <MyResourceTab />\n    },\n    { id: 4, tab: \"Progress\", icon: \"progress\", component: <ProgressTab /> },\n    { id: 5, tab: \"FAQ\", icon: \"faq\", component: <FaqTab /> },\n    { id: 6, tab: \"Profile\", icon: \"setting\", component: <ProfileTab /> }\n  ];\n  const [selectedTabIndex, setSelectedTabIndex] = useState(INITIAL_TAB_INDEX);\n  const { languageState, studentDashboardDispatch: dispatch } = useContext(\n    GlobalContext\n  );\n  const router = useRouter();\n  const clickOnTab = data => {\n    setSelectedTabIndex(data.id);\n    router.push(`${STUDENT_DASHBOARD_PATH}?id=${data.id}`);\n  };\n  useEffect(() => {\n    setTabIndex();\n    const batch_id = languageState.setStudentSelectedLanguage?.batch_id;\n    if (batch_id) {\n      studentUpcomingTasks(batch_id)(dispatch);\n      studentBatchMates(batch_id)(dispatch);\n    }\n  }, [languageState.setStudentSelectedLanguage]);\n  const setTabIndex = () => {\n    const tabID = router.query.id ? router.query.id : INITIAL_TAB_INDEX;\n    setSelectedTabIndex(tabID);\n  };\n  const userDetails =\n    typeof window !== \"undefined\" &&\n    localStorage.getItem(USER_DETAILS) &&\n    JSON.parse(localStorage.getItem(USER_DETAILS));\n\n  if (userDetails && userDetails.access_type != LOGIN_STUDENT_TAB) {\n    return false;\n  }\n\n  return (\n    <div className={styles.base}>\n      <Head>\n        <title>Tremendo-Dashboard</title>\n        <meta name=\"description\" content=\"Tremendo Dashboard page\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <Tab\n        tabsData={tabs}\n        selectTab={data => clickOnTab(data)}\n        selectedTab={selectedTabIndex}\n        studentDashboard={true}\n        sendDataCallback={id => setSelectedTabIndex(id)}\n      />\n    </div>\n  );\n}\n\nexport default withAuth(Student);\n","/home/tthinksys/tremendo_frontend/pages/faqs/index.js",["296"],"import Head from \"next/head\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport Button from \"../../components/Button/Button\";\nimport DesktopOnly from \"../../components/DeviceCheck/DesktopOnly\";\nimport MobileOnly from \"../../components/DeviceCheck/MobileOnly\";\nimport FaqsStrip from \"../../components/FaqsStrip/FaqsStrip\";\nimport ImageComponent from \"../../components/Image/Image\";\nimport styles from \"../../styles/Faqs.module.css\";\nimport { Image } from \"semantic-ui-react\";\nimport {\n  COOKIE_TOKEN,\n  USER_DETAILS,\n  ASK_A_QUESTION\n} from \"../../utils/constants\";\nimport Input from \"../../components/Input/Input\";\nimport { GlobalContext } from \"../../Context/Provider\";\nimport {\n  addUserFaqs,\n  getFaqs,\n  getUserFaqs\n} from \"../../Context/Actions/Home/HomeAction\";\nimport LanguageDetailSkelton from \"../../components/Skelton/LanguageDetailSkelton\";\nimport Cookies from \"js-cookie\";\nimport PageLoader from \"../../components/Loader/PageLoader\";\nimport { LOGIN_PATH } from \"../../utils/routes\";\nimport { useRouter } from \"next/router\";\n\nexport default function Faqs() {\n  const [isOpen, setIsOpen] = useState(null);\n  const [openModal, setOpenModal] = useState(false);\n  const [question, setQuestion] = useState(\"\");\n  const router = useRouter();\n  const { homeState, homeDispatch: dispatch } = useContext(GlobalContext);\n\n  useEffect(() => {\n    getFaqs()(dispatch);\n  }, []);\n\n  const toggleBar = id => {\n    if (isOpen == id) {\n      setIsOpen(null);\n    } else {\n      setIsOpen(id);\n    }\n  };\n  const header = headerName => {\n    return (\n      <div className={styles.headerWrapper}>\n        <div className={styles.borderLineStyling}></div>\n        <div className={styles.headerHeading}>{headerName}</div>\n        <div className={styles.borderLineStyling}></div>\n      </div>\n    );\n  };\n  const onHandleChange = question => {\n    setQuestion(question);\n  };\n  const imageUrl =\n    typeof window !== \"undefined\" && localStorage.getItem(USER_DETAILS)\n      ? JSON.parse(localStorage.getItem(USER_DETAILS)).profileUrl\n      : \"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Fblank_profile.png?alt=media&token=53afec48-03b2-4843-9b9c-8dc9c252ea41\";\n\n  const askAQuestion = async () => {\n    if (Cookies.get(COOKIE_TOKEN)) {\n      setOpenModal(true);\n      await getUserFaqs()(dispatch);\n    } else {\n      localStorage.setItem(ASK_A_QUESTION, true);\n      router.replace(LOGIN_PATH);\n    }\n  };\n  const askUserQuestion = async () => {\n    if (question != \"\") {\n      const payload = {\n        faq: question,\n        access_token: Cookies.get(COOKIE_TOKEN)\n      };\n\n      await addUserFaqs(payload)(dispatch);\n      await getUserFaqs()(dispatch);\n    }\n  };\n  return (\n    <div className={styles.base}>\n      <Head>\n        <title>Tremendo-Faqs</title>\n        <meta name=\"description\" content=\"Tremendo Faqs page\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      {(homeState.addUserFaqLoading || homeState.getUserFaqLoading) && (\n        <PageLoader />\n      )}\n      <div className={styles.banner}>\n        <DesktopOnly>\n          <ImageComponent\n            src={\n              \"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2FfaqsBanner.png?alt=media&token=0ffff088-5418-42d9-a4d9-ff56e8da0460\"\n            }\n            paddingBottom={\"21%\"}\n            alt={\"banner logo\"}\n          />\n        </DesktopOnly>\n        <MobileOnly>\n          <ImageComponent\n            src={\n              \"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Fabout_banner_mobile.png?alt=media&token=be8f7644-800d-41fd-bb84-44e199f49785\"\n            }\n            paddingBottom={\"65%\"}\n            alt={\"banner logo\"}\n          />\n        </MobileOnly>\n      </div>\n\n      <div className={styles.sections}>\n        {homeState.getFaqsLoading ? (\n          <LanguageDetailSkelton />\n        ) : (\n          <div className={styles.contentWrapper}>\n            <div className={styles.header}>\n              {header(\"FREQUENTLY ASKED QUESTIONS\")}\n            </div>\n            <div className={styles.faqStripWrapper}>\n              <div className={styles.strips}>\n                {homeState.getFaqs.map((i, index) => (\n                  <div key={index} className={styles.faqStrip}>\n                    <FaqsStrip\n                      clickOnBar={() => toggleBar(index)}\n                      isOpen={isOpen}\n                      id={index}\n                      data={i}\n                    />\n                  </div>\n                ))}\n              </div>\n              <div className={styles.askButtonWrapper}>\n                <div className={styles.askBtn}>\n                  <Button\n                    label={\"Ask a question\"}\n                    height={55}\n                    borderRadius={10}\n                    backgroundColor={\"#f78f1f\"}\n                    textStyle={{\n                      color: \"#fff\",\n                      fontWeight: \"bold\",\n                      fontFamily: \" Open Sans\",\n                      fontSize: \"24px\"\n                    }}\n                    border=\"none\"\n                    onClick={() => askAQuestion()}\n                  />\n                </div>\n                {openModal && (\n                  <div>\n                    <div className={styles.imageInputWrapper}>\n                      <div className={styles.imageSection}>\n                        <Image\n                          src={imageUrl}\n                          circular\n                          alt=\"user-image\"\n                          height={\"40px\"}\n                          width={\"40px\"}\n                        />\n                      </div>\n                      <div className={styles.inputSection}>\n                        <Input\n                          placeholder=\"Write your question here.\"\n                          inputStyling={{\n                            backgroundColor: \"#e9e8e6\",\n                            padding: \"14px\"\n                          }}\n                          handleChange={text => onHandleChange(text)}\n                        />\n                      </div>\n                    </div>\n                    <div className={styles.cancelAskWrapper}>\n                      <div\n                        className={styles.cancelBtn}\n                        onClick={() => setOpenModal(false)}\n                      >\n                        Cancel\n                      </div>\n                      <div\n                        className={styles.smallAskBtn}\n                        onClick={() => askUserQuestion()}\n                      >\n                        Ask\n                      </div>\n                    </div>\n                    {homeState.getUserFaq.length > 0 && (\n                      <div className={styles.answerBox}>\n                        {homeState.getUserFaq.map((i, index) => (\n                          <div key={index} className={styles.faqStrip}>\n                            <FaqsStrip\n                              clickOnBar={() => toggleBar(i.updated_at)}\n                              isOpen={isOpen}\n                              id={i.updated_at}\n                              data={i}\n                            />\n                          </div>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        )}\n        <div>\n          <ImageComponent\n            src={\n              \"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Flearn_grow_lead.png?alt=media&token=28f934e6-52ec-4783-a68b-aca27f4d2d3e\"\n            }\n            paddingBottom={\"15%\"}\n            alt={\"banner logo\"}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","/home/tthinksys/tremendo_frontend/pages/index.js",["297"],"import Head from \"next/head\";\nimport FlagWrapper from \"../components/FlagWrapper/FlagWrapper\";\nimport ImageComponent from \"../components/Image/Image\";\nimport Trustfactor from \"../components/Trustfactor/Trustfactor\";\nimport WhyTremendo from \"../components/WhyTremendo/WhyTremendo\";\nimport styles from \"../styles/Home.module.css\";\nimport {\n  DASHBOARD_PAGE_TYPE,\n  language,\n  popularCourses,\n  promotionsContent,\n  trustFactor,\n  whyTremendo1,\n  whyTremendo2\n} from \"../utils/constants\";\nimport Image from \"next/image\";\nimport CourseBox from \"../components/CourseBox/CourseBox\";\nimport PromotionBox from \"../components/PromotionBox/PromotionBox\";\nimport HomeCarousal from \"../components/Carousal/HomeCarousal\";\nimport DesktopOnly from \"../components/DeviceCheck/DesktopOnly\";\nimport MobileOnly from \"../components/DeviceCheck/MobileOnly\";\nimport { useContext, useEffect } from \"react\";\nimport { DeviceContext } from \"./_app\";\nimport Input from \"../components/Input/Input\";\nimport FlagWrapperSkelton from \"../components/FlagWrapper/FlagWrapperSkelton\";\nimport { GlobalContext } from \"../Context/Provider\";\nimport { getLanguages, getPageData } from \"../Context/Actions/Home/HomeAction\";\nimport Button from \"../components/Button/Button\";\nimport PageLoader from \"../components/Loader/PageLoader\";\nimport { subscribe, SUBSCRIBE_ERROR } from \"../Context/Actions/Auth/AuthAction\";\nimport { useState } from \"react\";\nimport { toast } from \"react-toastify\";\n\nexport default function Home({}) {\n  const { isMobileView } = useContext(DeviceContext);\n  const [username, setUsername] = useState(\"\");\n  const {\n    homeState,\n    homeDispatch: dispatch,\n    authState,\n    authDispatch: authDispatcher\n  } = useContext(GlobalContext);\n\n  useEffect(() => {\n    if (homeState.pageData.length == 0)\n      getPageData(DASHBOARD_PAGE_TYPE)(dispatch);\n    if (homeState.getLanguage.length == 0) getLanguages()(dispatch);\n  }, []);\n\n  const subscribeBtn = async () => {\n    if (username) {\n      const response = await subscribe(username)(authDispatcher);\n\n      if (response.type == SUBSCRIBE_ERROR) {\n        toast.error(response.error.msg, {\n          theme: \"colored\"\n        });\n      } else {\n        toast.success(response.data.msg, {\n          theme: \"colored\"\n        });\n      }\n    }\n  };\n\n  const goToWhatsapp = () => {};\n\n  return (\n    <div>\n      <Head>\n        <title>Tremendo</title>\n        <meta name=\"description\" content=\"Tremendo Education website\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      {authState.logoutLoading && <PageLoader />}\n      <div className={styles.bannerWaveWrapper}>\n        <HomeCarousal data={homeState} />\n        <div className={styles.waveShape}>\n          <ImageComponent\n            src={\n              \"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Fwave_shape.png?alt=media&token=a736e768-12e6-4f7f-bd5e-b3643d5de3c7\"\n            }\n            paddingBottom={\"5%\"}\n            alt={\"banner logo\"}\n          />\n        </div>\n      </div>\n      {/* ---------------------------------------------------------------------------------------------- */}\n      {homeState.getLangaugeLoading ? (\n        <FlagWrapperSkelton />\n      ) : (\n        <div className={styles.flagWrapper}>\n          <div className={styles.languageHeadingWrapper}>\n            <div className={styles.borderLineStyling}></div>\n            <div className={styles.languageHeading}>Languages</div>\n            <div className={styles.borderLineStyling}></div>\n          </div>\n          <div className={styles.allFlags}>\n            {homeState.getLanguage.map((i, index) => (\n              <div key={index} className={styles.flag}>\n                <FlagWrapper\n                  language={i.title}\n                  languageDescription={i.welcome_text}\n                  flagSrc={i.flag_url}\n                  languge_id={i.languge_id}\n                />\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {/* ---------------------------------------------------------------------------------------------- */}\n      <div className={styles.whyLearnLang}>\n        <div className={styles.whyLearnHeadingWrapper}>\n          <div className={styles.borderLineStyling}></div>\n          <div className={styles.whyLearnHeading}>Why Learn A New Language</div>\n          <div className={styles.borderLineStyling}></div>\n        </div>\n        <div className={styles.trustfactorWrapper}>\n          {trustFactor.map((i, index) => (\n            <div key={index} className={styles.trustfactor}>\n              <Trustfactor {...i} />\n            </div>\n          ))}\n        </div>\n      </div>\n      {/* ---------------------------------------------------------------------------------------------- */}\n      <div className={styles.whyTremendo}>\n        <div className={styles.whyTremendoHeadingWrapper}>\n          <div className={styles.borderLineStyling}></div>\n          <div className={styles.whyTremendoHeading}>Why tremendo</div>\n          <div className={styles.borderLineStyling}></div>\n        </div>\n        <DesktopOnly>\n          <div className={styles.imageWhyWrapper}>\n            <div className={styles.sections}>\n              {whyTremendo1.map((i, index) => (\n                <div key={index} className={styles.whyTremendoSection}>\n                  <WhyTremendo {...i} />\n                </div>\n              ))}\n            </div>\n            <div className={styles.imgSections}>\n              <Image\n                src={\n                  \"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Fwhy_tremendo.png?alt=media&token=a3bcc4bf-2277-4b9a-a7f5-9e031df322c1\"\n                }\n                alt={\"\"}\n                width={\"450px\"}\n                height={\"200px\"}\n              />\n            </div>\n            <div className={styles.sections}>\n              {whyTremendo2.map((i, index) => (\n                <div key={index} className={styles.whyTremendoSection}>\n                  <WhyTremendo {...i} />\n                </div>\n              ))}\n            </div>\n          </div>\n        </DesktopOnly>\n        <MobileOnly>\n          {whyTremendo1.map((i, index) => (\n            <div key={index} className={styles.whyTremendoSection}>\n              <WhyTremendo {...i} />\n            </div>\n          ))}\n          {whyTremendo2.map((i, index) => (\n            <div key={index} className={styles.whyTremendoSection}>\n              <WhyTremendo {...i} />\n            </div>\n          ))}\n        </MobileOnly>\n      </div>\n      {/* ---------------------------------------------------------------------------------------------- */}\n      <div className={styles.popularCourses}>\n        <div className={styles.popularCoursesHeadingWrapper}>\n          <div className={styles.borderLineStyling}></div>\n          <div className={styles.popularCoursesHeading}>Popular courses</div>\n          <div className={styles.borderLineStyling}></div>\n        </div>\n        <div className={styles.courseBox}>\n          {homeState.pageData.popular_courses?.map((i, index) => (\n            <div key={index}>\n              <CourseBox {...i} />\n            </div>\n          ))}\n        </div>\n      </div>\n      {/* ---------------------------------------------------------------------------------------------- */}\n      <div className={styles.subscribe}>\n        <ImageComponent\n          src={\n            \"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Fsubscribe.png?alt=media&token=a4a26ccc-4b45-4041-8d78-cdf333909df9\"\n          }\n          paddingBottom={isMobileView ? \"30%\" : \"10%\"}\n          alt={\"banner logo\"}\n        />\n        <div className={styles.textBtnWrapper}>\n          <div>\n            Stay tuned with all the latest language updates around the world.\n          </div>\n          <div className={styles.subscribeInputBtnWrapper}>\n            <div className={styles.subscribeInputWrapper}>\n              <Input\n                type=\"text\"\n                placeholder=\"Enter your email\"\n                inputStyling={{\n                  height: isMobileView ? \"30px\" : \"49px\",\n                  borderRadius: \"43px\",\n                  padding: \"0 50px 0 24px\",\n                  fontSize: isMobileView ? \"10px\" : \"12px\"\n                }}\n                handleChange={text => setUsername(text)}\n              />\n            </div>\n            <div>\n              <Button\n                label={\"SUBSCRIBE\"}\n                height={isMobileView ? 30 : 49}\n                borderRadius={25}\n                backgroundColor={\"#212121\"}\n                textStyle={{\n                  color: \"#fff\",\n                  fontWeight: \"bold\",\n                  fontFamily: \"Open Sans\",\n                  fontSize: isMobileView ? \"10px\" : \"12px\"\n                }}\n                border=\"none\"\n                loading={authState.subscribeLoading}\n                onClick={() => subscribeBtn()}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n      {/* ---------------------------------------------------------------------------------------------- */}\n      <div className={styles.learnAnyWhere}>\n        <div className={styles.learnAnyWhereHeadingWrapper}>\n          <div className={styles.borderLineStyling}></div>\n          <div className={styles.learnAnyWhereHeading}>Learn from anywhere</div>\n          <div className={styles.borderLineStyling}></div>\n        </div>\n        <div className={styles.learnAnyWhereSubheading}>\n          Learn new languages with virtual learning and be an expert\n        </div>\n        <div className={styles.devicesImages}>\n          <Image\n            src={\n              \"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Fdevices.jpg?alt=media&token=1c6409ad-5ffc-4606-814b-2017407f13bb\"\n            }\n            alt={\"devices\"}\n            width={\"700px\"}\n            height={\"300px\"}\n          />\n        </div>\n      </div>\n      {/* ---------------------------------------------------------------------------------------------- */}\n      <div className={styles.promotions}>\n        <div className={styles.boxesWrap}>\n          {promotionsContent.map((i, index) => (\n            <div key={index} className={styles.promoBox}>\n              <PromotionBox {...i} />\n            </div>\n          ))}\n        </div>\n        <div>\n          <ImageComponent\n            src={\n              \"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Flearn_grow_lead.png?alt=media&token=28f934e6-52ec-4783-a68b-aca27f4d2d3e\"\n            }\n            paddingBottom={\"15%\"}\n            alt={\"banner logo\"}\n          />\n        </div>\n      </div>\n      {/* ---------------------------------------------------------------------------------------------- */}\n      <a\n        href={\n          isMobileView\n            ? \"https://api.whatsapp.com/send?phone=+917856892827\"\n            : \"https://web.whatsapp.com/send?phone=+917856892827\"\n        }\n        target={\"_blank\"}\n        rel=\"noreferrer\"\n        className={styles.chat}\n      >\n        <Image\n          src={\n            \"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Fchat.png?alt=media&token=0baf7742-8b87-4fe1-b8b9-178434568116\"\n          }\n          alt={\"chat icons\"}\n          width={isMobileView ? \"40px\" : \"75px\"}\n          height={isMobileView ? \"40px\" : \"70px\"}\n        />\n      </a>\n    </div>\n  );\n}\n\n// export const getStaticProps = async context => {\n//   const response = await axiosInstance.get(\"/getLanguages\");\n//   return {\n//     props: { response }\n//   };\n// };\n","/home/tthinksys/tremendo_frontend/pages/language/[languageId].js",["298"],"import React, { useContext, useEffect, useState } from \"react\";\nimport styles from \"../../styles/LanguageDetail.module.css\";\nimport StatusBar from \"../../components/StatusBar/StatusBar\";\nimport ImageComponent from \"../../components/Image/Image\";\nimport {\n  COOKIE_TOKEN,\n  ORDER_DETAIL,\n  USER_DETAILS\n} from \"../../utils/constants\";\nimport Image from \"next/image\";\nimport Button from \"../../components/Button/Button\";\nimport { useRouter } from \"next/router\";\nimport { GlobalContext } from \"../../Context/Provider\";\nimport { getLangaugeDetails } from \"../../Context/Actions/Language/LanguageAction\";\nimport LanguageDetailSkelton from \"../../components/Skelton/LanguageDetailSkelton\";\nimport { LOGIN_PATH, PAYMENT_PATH } from \"../../utils/routes\";\nimport Cookies from \"js-cookie\";\nimport { DeviceContext } from \"../_app\";\nimport DesktopOnly from \"../../components/DeviceCheck/DesktopOnly\";\nimport MobileOnly from \"../../components/DeviceCheck/MobileOnly\";\n\nexport default function DetailLanguagePage({}) {\n  const [openTab, setOpenTab] = useState(null);\n  const { isMobileView } = useContext(DeviceContext);\n  const router = useRouter();\n  const { languageState, languageDispatch: dispatch } = useContext(\n    GlobalContext\n  );\n\n  const currentLanguagePage = router.query.languageId;\n  useEffect(() => {\n    getLangaugeDetails(currentLanguagePage)(dispatch);\n  }, [currentLanguagePage]);\n\n  const name =\n    typeof window !== \"undefined\" && localStorage.getItem(USER_DETAILS)\n      ? JSON.parse(localStorage.getItem(USER_DETAILS)).name\n      : \"\";\n  const openDetailSection = code => {\n    if (openTab == code) {\n      setOpenTab(null);\n    } else {\n      setOpenTab(code);\n    }\n  };\n\n  const header = headerName => {\n    return (\n      <div className={styles.headerWrapper}>\n        <div className={styles.borderLineStyling}></div>\n        <div className={styles.headerHeading}>{headerName}</div>\n        <div className={styles.borderLineStyling}></div>\n      </div>\n    );\n  };\n  const enrollNow = batchID => {\n    if (Cookies.get(COOKIE_TOKEN)) {\n      router.replace(`${PAYMENT_PATH}?id=${batchID}`);\n    } else {\n      localStorage.setItem(ORDER_DETAIL, batchID);\n      router.replace(`${LOGIN_PATH}`);\n    }\n  };\n  const details = languageState.getLanguageDetails;\n\n  return (\n    <div className={styles.base}>\n      <div className={styles.topBannerWrapper}>\n        <ImageComponent\n          src={isMobileView ? details.banner_small : details.banner_large}\n          paddingBottom={isMobileView ? \"58%\" : \"21%\"}\n        />\n        {details.welcome_text && (\n          <div className={styles.profileName}>{details.welcome_text} </div>\n        )}\n      </div>\n      <div\n        className={styles.subBaseWrapper}\n        style={{ backgroundColor: details.bg_color }}\n      >\n        {languageState.getLangaugeDetailsLoading ? (\n          <LanguageDetailSkelton />\n        ) : (\n          <div className={styles.contentWrapper}>\n            <div className={styles.header}>\n              {header(details.culture?.title)}\n            </div>\n            <div className={styles.cultureDescription}>\n              {details.culture?.description}\n            </div>\n            <div className={styles.boxWrapper}>\n              {details.culture?.banners.map((i, index) => (\n                <div\n                  className={styles.boxBase}\n                  style={{ backgroundColor: i.bg_color }}\n                  key={index}\n                >\n                  <div className={styles.boxImage}>\n                    <Image\n                      alt=\"\"\n                      src={i.image_url}\n                      width={index == 0 ? \"330px\" : \"400px\"}\n                      height={index == 0 ? \"245px\" : \"204px\"}\n                    />\n                  </div>\n                  <div\n                    className={styles.boxHeading}\n                    style={{ color: i.text_color }}\n                  >\n                    {i.title}\n                  </div>\n                  <div\n                    className={styles.boxDescription}\n                    style={{ color: i.text_color }}\n                  >\n                    {i.description}\n                  </div>\n                </div>\n              ))}\n            </div>\n            {/* {details.upcoming_batches?.banners.length !== 0 && (\n              <div>\n                <div className={styles.header}>\n                  {header(details.upcoming_batches?.title)}\n                </div>\n                <div className={styles.upcomingBatchWrapper}>\n                  {details.upcoming_batches?.banners.map((i, index) => (\n                    <div className={styles.upcomingBatch} key={index}>\n                      <div className={styles.batchCode}>{i.title}</div>\n                      <div className={styles.batchTime}>{i.description}</div>\n                      <div>\n                        <Button\n                          label={i.cta_title}\n                          height={55}\n                          borderRadius={10}\n                          backgroundColor={i.cta_color}\n                          textStyle={{\n                            color: i.cta_text_color,\n                            fontFamily: \"Open Sans\",\n                            fontSize: \"16px\"\n                          }}\n                          border=\"none\"\n                          onClick={() => registerNow()}\n                        />\n                      </div>\n                      <div className={styles.offPercentage}>\n                        <div>SAVE</div>\n                        <div>{i.discount_percentage}%</div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )} */}\n            <div>\n              <div className={styles.header}>\n                {header(details.batch_details?.title)}\n              </div>\n              {details.batch_details?.bathches.map((i, index) => (\n                <div key={index}>\n                  <StatusBar>\n                    <div className={styles.batchDetailsWrapper}>\n                      <div\n                        className={styles.batchDetails}\n                        onClick={() => openDetailSection(i.batch_id)}\n                      >\n                        <div className={styles.batchNo}>Batch {index + 1}</div>\n                        <div className={styles.batchTiming}>\n                          {i.batch_week_type}\n                        </div>\n                        <div className={styles.batchDays}>\n                          {i.days?.map(i => i).join(\"  \")}\n                        </div>\n                        <div className={styles.batchCodes}>{i.batch_id}</div>\n                        <div className={styles.batchSeats}>\n                          <div\n                            style={{ fontWeight: \"bold\", marginRight: \"5px\" }}\n                          >\n                            {i.batch_capcity}{\" \"}\n                          </div>{\" \"}\n                          SEATS LEFT{\" \"}\n                          <div\n                            style={{\n                              transform:\n                                openTab != i.batch_id && \"rotate(-90deg)\",\n                              marginLeft: \"10px\"\n                            }}\n                          >\n                            <Image\n                              src={\n                                \"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Fdown_arrow.png?alt=media&token=27bec4b4-58cf-498c-8d2c-df6381e223fc\"\n                              }\n                              alt=\"\"\n                              height={\"20px\"}\n                              width={\"20px\"}\n                            />\n                          </div>\n                        </div>\n                      </div>\n                      {openTab == i.batch_id && (\n                        <>\n                          <DesktopOnly>\n                            <div className={styles.detailsWrapper}>\n                              <div className={styles.dateClassWrapper}>\n                                <div className={styles.startDateWrapper}>\n                                  <div className={styles.startDateHeading}>\n                                    Start Date :\n                                  </div>\n                                  <div className={styles.startDate}>\n                                    {i.batch_starting_date}\n                                  </div>\n                                </div>\n                                <div className={styles.startDateWrapper}>\n                                  <div className={styles.startDateHeading}>\n                                    End Date :\n                                  </div>\n                                  <div className={styles.startDate}>\n                                    {i.batch_end_date}\n                                  </div>\n                                </div>\n                                <div className={styles.startDateWrapper}>\n                                  <div className={styles.startDateHeading}>\n                                    Total Classes :\n                                  </div>\n                                  <div className={styles.startDate}>\n                                    {i.batch_total_classes}\n                                  </div>\n                                </div>\n                                <div className={styles.startDateWrapper}>\n                                  <div className={styles.startDateHeading}>\n                                    Exam Date :\n                                  </div>\n                                  <div className={styles.startDate}>\n                                    {i.batch_end_date}\n                                  </div>\n                                </div>\n                              </div>\n                              <div className={styles.durationWrapper}>\n                                <div>\n                                  <Image\n                                    src={\n                                      \"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Fduration_rotate.png?alt=media&token=7fb632e3-b896-403c-bceb-e686cb698bf5\"\n                                    }\n                                    alt=\"\"\n                                    height={\"30px\"}\n                                    width={\"30px\"}\n                                  />\n                                </div>\n                                <div className={styles.duration}>\n                                  <span style={{ fontWeight: \"bold\" }}>\n                                    TOTAL DURATION:{\" \"}\n                                  </span>{\" \"}\n                                  <span>{i.batch_total_time}</span>\n                                </div>\n                              </div>\n                              <div className={styles.timeWrapper}>\n                                <div className={styles.startTimeWrapper}>\n                                  <div className={styles.startTimeHeading}>\n                                    Start Time :\n                                  </div>\n                                  <div className={styles.startTime}>\n                                    {i.batch_start_time}\n                                  </div>\n                                </div>\n                                <div className={styles.startTimeWrapper}>\n                                  <div className={styles.startTimeHeading}>\n                                    End Time :\n                                  </div>\n                                  <div className={styles.startTime}>\n                                    {i.batch_end_time}\n                                  </div>\n                                </div>\n                                <div className={styles.priceWrapper}>\n                                  <div className={styles.priceHeading}>\n                                    Price :\n                                  </div>\n                                  <div className={styles.price}>\n                                    &#x20b9;\n                                    {i.batch_purchase_price}\n                                  </div>\n                                </div>\n\n                                <div className={styles.enrollNowBtn}>\n                                  <Button\n                                    label={\"Enroll Now\"}\n                                    height={35}\n                                    borderRadius={5}\n                                    backgroundColor={\"#f78f1e\"}\n                                    textStyle={{\n                                      color: \"#fff\",\n                                      fontFamily: \"Open Sans\",\n                                      fontSize: isMobileView ? \"10px\" : \"16px\",\n                                      fontWeight: \"bold\"\n                                    }}\n                                    border=\"none\"\n                                    onClick={() => enrollNow(i.batch_id)}\n                                  />\n                                </div>\n                              </div>\n                            </div>\n                          </DesktopOnly>\n                          <MobileOnly>\n                            <div\n                              style={{\n                                display: \"flex\",\n                                justifyContent: \"space-between\"\n                              }}\n                            >\n                              <div\n                                className={styles.startDateHeading}\n                                style={{ width: \"85%\" }}\n                              >\n                                Start Date : {i.batch_starting_date}\n                              </div>\n                              <div className={styles.startDateHeading}>\n                                End Date : {i.batch_end_date}\n                              </div>\n                            </div>\n                            <div\n                              style={{\n                                display: \"flex\",\n                                justifyContent: \"space-between\"\n                              }}\n                            >\n                              <div\n                                className={styles.startDateHeading}\n                                style={{ width: \"85%\" }}\n                              >\n                                Total Classes : {i.batch_total_classes}\n                              </div>\n                              <div className={styles.startDateHeading}>\n                                Exam Date : {i.batch_end_date}\n                              </div>\n                            </div>\n\n                            <div style={{ textAlign: \"center\" }}>\n                              TOTAL DURATION: {i.batch_total_time}\n                            </div>\n\n                            <div\n                              style={{\n                                display: \"flex\",\n                                justifyContent: \"space-between\"\n                              }}\n                            >\n                              <div\n                                className={styles.startDateHeading}\n                                style={{ width: \"85%\" }}\n                              >\n                                Start Time : {i.batch_start_time}\n                              </div>\n                              <div className={styles.startDateHeading}>\n                                End Time : {i.batch_end_time}\n                              </div>\n                            </div>\n                            <div\n                              style={{\n                                display: \"flex\",\n                                justifyContent: \"space-between\"\n                              }}\n                            >\n                              <div className={styles.startDateHeading}>\n                                Price : &#x20b9;{i.batch_purchase_price}\n                              </div>\n\n                              <div className={styles.enrollNowBtn}>\n                                <Button\n                                  label={\"Enroll Now\"}\n                                  height={35}\n                                  borderRadius={5}\n                                  backgroundColor={\"#f78f1e\"}\n                                  textStyle={{\n                                    color: \"#fff\",\n                                    fontFamily: \"Open Sans\",\n                                    fontSize: isMobileView ? \"10px\" : \"16px\",\n                                    fontWeight: \"bold\"\n                                  }}\n                                  border=\"none\"\n                                  onClick={() => enrollNow(i.batch_id)}\n                                />\n                              </div>\n                            </div>\n                          </MobileOnly>\n                        </>\n                      )}\n                    </div>\n                  </StatusBar>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n        <div>\n          <ImageComponent\n            src={\n              \"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Flearn_grow_lead.png?alt=media&token=28f934e6-52ec-4783-a68b-aca27f4d2d3e\"\n            }\n            paddingBottom={\"15%\"}\n            alt={\"banner logo\"}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","/home/tthinksys/tremendo_frontend/pages/login/admin.js",[],"/home/tthinksys/tremendo_frontend/pages/login/index.js",[],"/home/tthinksys/tremendo_frontend/pages/order/index.js",["299"],"import { useEffect, useState } from \"react\";\nimport { Header, Image, Modal, Dimmer, Loader } from \"semantic-ui-react\";\nimport Button from \"../../components/Button/Button\";\nimport styles from \"../../styles/Order.module.css\";\nimport { useRouter } from \"next/router\";\nimport { COOKIE_TOKEN, USER_DETAILS } from \"../../utils/constants\";\nimport { toast } from \"react-toastify\";\nimport { STUDENT_DASHBOARD_PATH } from \"../../utils/routes\";\nimport axiosInstance from \"../../utils/axiosInstance\";\nimport jsCookie from \"js-cookie\";\n\nfunction loadScript(src) {\n  return new Promise(resolve => {\n    const script = document.createElement(\"script\");\n    script.src = src;\n    script.onload = () => {\n      resolve(true);\n    };\n    script.onerror = () => {\n      resolve(false);\n    };\n    document.body.appendChild(script);\n  });\n}\n\nexport default function Order({}) {\n  const router = useRouter();\n  const [openModal, setOpenModal] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [orderDetails, setOrderDetails] = useState({});\n\n  useEffect(() => {\n    getPaymentDetails();\n  }, []);\n\n  const getPaymentDetails = async () => {\n    setLoading(true);\n    const batchId = router.query.id;\n    try {\n      const response = await axiosInstance.get(\n        `/getCoursePurchaseDetail?batch_id=${batchId}`\n      );\n      setOrderDetails(response.data.data);\n      setLoading(false);\n    } catch (err) {\n      setLoading(false);\n    }\n  };\n  const setFinalPayment = async transacation_id => {\n    setLoading(true);\n    const payload = {\n      access_token: jsCookie.get(COOKIE_TOKEN),\n      attampt_id: \"\",\n      transacation_id: transacation_id,\n      amount: orderDetails.batch_purchase_price,\n      pay_amount: orderDetails.batch_purchase_price,\n      lang: orderDetails.language_code,\n      batch_id: orderDetails.batch_id\n    };\n    try {\n      const response = await axiosInstance.post(`/makeCoursePayment`, payload);\n      setLoading(false);\n      setOpenModal(true);\n    } catch (err) {\n      setLoading(false);\n    }\n  };\n  async function displayRazorpay() {\n    const res = await loadScript(\n      \"https://checkout.razorpay.com/v1/checkout.js\"\n    );\n\n    if (!res) {\n      toast.error(\"Razorpay SDK failed to load. Are you online?\", {\n        theme: \"colored\"\n      });\n      return;\n    }\n    const response = await axiosInstance.post(`/initRazorpay`, {\n      access_token: jsCookie.get(COOKIE_TOKEN),\n      amount: orderDetails.batch_purchase_price\n    });\n\n    const userDetails =\n      typeof window !== \"undefined\" &&\n      localStorage.getItem(USER_DETAILS) &&\n      JSON.parse(localStorage.getItem(USER_DETAILS));\n\n    const options = {\n      key: process.env.NEXT_PUBLIC_RAZORPAY_KEY,\n      currency: response.data.currency,\n      amount: response.data.amount.toString(),\n      order_id: response.data.id,\n      name: \"Tremendo\",\n      description: `Purchase ${orderDetails.batch_language} language`,\n      image: `https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Ftremendo_logo.png?alt=media&token=2180fdbc-cab2-4f3e-9721-cd61da3348ba`,\n      handler: function(response) {\n        // alert(response.razorpay_payment_id);\n        // alert(response.razorpay_order_id);\n        // alert(response.razorpay_signature);\n        setFinalPayment(response.razorpay_payment_id);\n      },\n      prefill: {\n        name: userDetails.name,\n        email: userDetails.email\n      }\n    };\n    try {\n      const paymentObject = new window.Razorpay(options);\n      paymentObject.open();\n    } catch (err) {\n      toast.error(\"Razorpay SDK failed to load. Are you online?\", {\n        theme: \"colored\"\n      });\n    }\n  }\n\n  const onCloseModal = () => {\n    setOpenModal(false);\n    router.replace(STUDENT_DASHBOARD_PATH);\n  };\n\n  return (\n    <>\n      {loading && (\n        <Dimmer active>\n          <Loader />\n        </Dimmer>\n      )}\n      <div className={styles.base}>\n        <div className={styles.heading}>Summary</div>\n        <div className={styles.imageDetailWrapper}>\n          <div className={styles.flagImage}>\n            <Image src={orderDetails.flag_url} alt={\"flag\"} />\n          </div>\n          <div className={styles.details}>\n            <div\n              className={styles.courseName}\n            >{`${orderDetails.batch_language} Course - Batch-${orderDetails.batch_id}`}</div>\n            <div className={styles.description}>\n              {`You are purchasing for ${orderDetails.batch_language} language which is starting from ${orderDetails.batch_starting_date}. Are you want to purchase?`}\n            </div>\n          </div>\n        </div>\n        <div className={styles.priceWrapper}>\n          <div className={styles.orignalPriceHeading}>Orignal Price:</div>\n          <div className={styles.price}>\n            {\" \"}\n            &#x20b9; {orderDetails.batch_purchase_price}\n          </div>\n        </div>\n        <div className={styles.totalPriceWrapper}>\n          <div className={styles.orignalPriceHeading}>Total:</div>\n          <div className={styles.price}>\n            {\" \"}\n            &#x20b9; {orderDetails.batch_purchase_price}\n          </div>\n        </div>\n        <div className={styles.continueBtn}>\n          <Button\n            label={\"Continue Payment\"}\n            height={50}\n            backgroundColor={\"#25908d\"}\n            textStyle={{\n              color: \"#fff\",\n              fontFamily: \"Poppins\",\n              fontSize: \"20px\",\n              fontWeight: \"700\"\n            }}\n            border=\"none\"\n            onClick={() => displayRazorpay()}\n          />\n        </div>\n      </div>\n      <div className={styles.termAndCondition}>\n        By completing your purchase you agree to these{\" \"}\n        <span\n          onClick={() => console.log(\"go to tc\")}\n          style={{ color: \"#0656cf\", cursor: \"pointer\" }}\n        >\n          Terms of Service.\n        </span>\n      </div>\n      <Modal\n        onClose={() => onCloseModal()}\n        open={openModal}\n        closeIcon\n        className={styles.modalStyles}\n      >\n        <Modal.Content image>\n          <Image\n            src=\"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Fsuccess_image.png?alt=media&token=a22dbbd8-88a7-46b1-b725-60f117beafc0\"\n            wrapped\n            alt=\"success image\"\n          />\n        </Modal.Content>\n      </Modal>\n    </>\n  );\n}\n","/home/tthinksys/tremendo_frontend/pages/reviews/index.js",["300"],"import Head from \"next/head\";\nimport Button from \"../../components/Button/Button\";\nimport DesktopOnly from \"../../components/DeviceCheck/DesktopOnly\";\nimport MobileOnly from \"../../components/DeviceCheck/MobileOnly\";\nimport ImageComponent from \"../../components/Image/Image\";\nimport ReviewBox from \"../../components/ReviewBox/ReviewBox\";\nimport styles from \"../../styles/Review.module.css\";\nimport { useState, useEffect, useContext } from \"react\";\nimport WriteFormBox from \"../../components/WriteFormBox/WriteFormBox\";\nimport {\n  COOKIE_TOKEN,\n  PREVIOUS_PATH,\n  USER_DETAILS\n} from \"../../utils/constants\";\nimport { useRouter } from \"next/router\";\nimport { LOGIN_PATH } from \"../../utils/routes\";\nimport {\n  addReviewComments,\n  getReviewData,\n  getReviewDetails,\n  setReviewData,\n  setReviewLikeStatus\n} from \"../../Context/Actions/Home/HomeAction\";\nimport { GlobalContext } from \"../../Context/Provider\";\nimport LanguageDetailSkelton from \"../../components/Skelton/LanguageDetailSkelton\";\nimport Cookies from \"js-cookie\";\nimport PageLoader from \"../../components/Loader/PageLoader\";\nimport { toast } from \"react-toastify\";\n\nexport default function Reviews() {\n  const [writeReview, setWriteReview] = useState(false);\n  const [isOpen, setIsOpen] = useState(null);\n  const [fields, setFields] = useState({});\n  const router = useRouter();\n  const { homeState, homeDispatch: dispatch } = useContext(GlobalContext);\n  const toggleBar = id => {\n    if (localStorage.getItem(USER_DETAILS)) {\n      if (isOpen == id) {\n        setIsOpen(null);\n      } else {\n        setIsOpen(id);\n      }\n    } else {\n      localStorage.setItem(PREVIOUS_PATH, router.pathname);\n      router.push(LOGIN_PATH);\n    }\n  };\n  useEffect(() => {\n    getReviewData()(dispatch);\n  }, []);\n\n  const header = headerName => {\n    return (\n      <div className={styles.headerWrapper}>\n        <div className={styles.borderLineStyling}></div>\n        <div className={styles.headerHeading}>{headerName}</div>\n        <div className={styles.borderLineStyling}></div>\n      </div>\n    );\n  };\n  const openWriteReviewBox = () => {\n    if (localStorage.getItem(USER_DETAILS)) {\n      setWriteReview(true);\n    } else {\n      localStorage.setItem(PREVIOUS_PATH, router.pathname);\n      router.push(LOGIN_PATH);\n    }\n  };\n  const onHandleChange = (type, text) => {\n    setFields({ ...fields, [type]: text });\n  };\n  const clickOnThumb = async id => {\n    if (localStorage.getItem(USER_DETAILS)) {\n      const payload = {\n        course_review_id: id,\n        like_status: true,\n        access_token: Cookies.get(COOKIE_TOKEN)\n      };\n      await setReviewLikeStatus(payload)(dispatch);\n      getReviewData()(dispatch);\n    } else {\n      localStorage.setItem(PREVIOUS_PATH, router.pathname);\n      router.push(LOGIN_PATH);\n    }\n  };\n  const onSubmitReview = async () => {\n    if (!fields.rating || !fields.review_desc) {\n      toast.error(\"Please fill all details\", {\n        theme: \"colored\"\n      });\n    } else {\n      const payload = {\n        rating: fields.rating ? fields.rating : 3,\n        review_desc: fields.review_desc,\n        access_token: Cookies.get(COOKIE_TOKEN)\n      };\n      const response = await setReviewData(payload)(dispatch);\n      toast.success(response.data.msg, {\n        theme: \"colored\"\n      });\n      setIsOpen(null);\n      getReviewData()(dispatch);\n    }\n  };\n  const onSubmitComment = async reviewId => {\n    if (!fields.comment) {\n      toast.error(\"Please fill all details\", {\n        theme: \"colored\"\n      });\n    } else {\n      const payload = {\n        course_review_id: reviewId,\n        comment: fields.comment,\n        access_token: Cookies.get(COOKIE_TOKEN)\n      };\n      const response = await addReviewComments(payload)(dispatch);\n      toast.success(response.data.msg, {\n        theme: \"colored\"\n      });\n      setWriteReview(false);\n    }\n  };\n  const readMoreReplies = async id => {\n    await getReviewDetails(id)(dispatch);\n  };\n  return (\n    <div className={styles.base}>\n      <Head>\n        <title>Tremendo-Faqs</title>\n        <meta name=\"description\" content=\"Tremendo Reviews page\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      {(homeState.setReviewLoading ||\n        homeState.reviewCommentLoading ||\n        homeState.reviewDetailsLoading ||\n        homeState.setReviewLikeLoading) && <PageLoader />}\n      <div className={styles.banner}>\n        <DesktopOnly>\n          <ImageComponent\n            src={\n              \"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2FReviewBanner.png?alt=media&token=271e5425-fe8f-42a3-99b3-70f783ab3b12\"\n            }\n            paddingBottom={\"21%\"}\n            alt={\"banner logo\"}\n          />\n        </DesktopOnly>\n        <MobileOnly>\n          <ImageComponent\n            src={\n              \"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Fabout_banner_mobile.png?alt=media&token=be8f7644-800d-41fd-bb84-44e199f49785\"\n            }\n            paddingBottom={\"65%\"}\n            alt={\"banner logo\"}\n          />\n        </MobileOnly>\n      </div>\n      <div className={styles.sections}>\n        {homeState.reviewDataLoading ? (\n          <LanguageDetailSkelton />\n        ) : (\n          <div className={styles.contentWrapper}>\n            <div className={styles.header}>{header(\"REVIEW AND RATING\")}</div>\n            <div className={styles.faqStripWrapper}>\n              {homeState.reviewData.map((i, index) => (\n                <div key={index} className={styles.faqStrip}>\n                  <ReviewBox\n                    clickOnReply={() => toggleBar(i.course_review_id)}\n                    isOpen={isOpen}\n                    id={i.course_review_id}\n                    clickOnLike={() => clickOnThumb(i.course_review_id)}\n                    addComments={text => onHandleChange(\"comment\", text)}\n                    postComment={() => onSubmitComment(i.course_review_id)}\n                    clickOnReadMore={() => readMoreReplies(i.course_review_id)}\n                    thumbLike={i.like_status}\n                    data={i}\n                    comments={homeState.reviewDetails.comment}\n                  />\n                </div>\n              ))}\n              <div className={styles.askBtn}>\n                <Button\n                  label={\"Write your review\"}\n                  height={55}\n                  borderRadius={10}\n                  backgroundColor={\"#f78f1f\"}\n                  textStyle={{\n                    color: \"#fff\",\n                    fontWeight: \"bold\",\n                    fontFamily: \" Open Sans\",\n                    fontSize: \"16px\"\n                  }}\n                  border=\"none\"\n                  onClick={() => openWriteReviewBox()}\n                />\n              </div>\n              {writeReview && (\n                <WriteFormBox\n                  openBox={() => setWriteReview(false)}\n                  onChangeValue={value => onHandleChange(\"review_desc\", value)}\n                  submitReview={() => onSubmitReview()}\n                  onRating={rate =>\n                    setFields({ ...fields, rating: rate.rating })\n                  }\n                />\n              )}\n            </div>\n          </div>\n        )}\n        <div>\n          <ImageComponent\n            src={\n              \"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Flearn_grow_lead.png?alt=media&token=28f934e6-52ec-4783-a68b-aca27f4d2d3e\"\n            }\n            paddingBottom={\"15%\"}\n            alt={\"banner logo\"}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","/home/tthinksys/tremendo_frontend/pages/signup/index.js",[],"/home/tthinksys/tremendo_frontend/components/AdminPages/AdminPages.js",[],"/home/tthinksys/tremendo_frontend/components/BlogBox/BlogBox.js",[],"/home/tthinksys/tremendo_frontend/components/Button/Button.js",[],"/home/tthinksys/tremendo_frontend/components/CalenderTab/CalenderTab.js",["301"],"import React, { useState, useEffect } from \"react\";\nimport styles from \"./CalenderTab.module.css\";\nimport moment from \"moment\";\nimport {\n  Icon,\n  Dropdown,\n  Dimmer,\n  Loader,\n  Modal,\n  Button,\n  Input\n} from \"semantic-ui-react\";\nimport FullCalendar from \"@fullcalendar/react\"; // must go before plugins\nimport dayGridPlugin from \"@fullcalendar/daygrid\"; // a plugin!\nimport interactionPlugin from \"@fullcalendar/interaction\"; // needed for dayClick\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport axiosInstance from \"../../utils/axiosInstance\";\nimport jsCookie from \"js-cookie\";\nimport { COOKIE_TOKEN } from \"../../utils/constants\";\n\nexport default function CalenderTab({}) {\n  const [info, setInfo] = useState(\"\");\n  const [batchList, setBatchList] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedBatch, setSelectedBatch] = useState(\"\");\n  const [classes, setClasses] = useState([]);\n  const [openModal, setOpenModal] = useState(false);\n\n  useEffect(() => {\n    getBatchList();\n  }, []);\n\n  const getBatchList = async () => {\n    try {\n      const response = await axiosInstance.get(\n        `/getBatchList?access_token=${jsCookie.get(COOKIE_TOKEN)}&lang=all`\n      );\n      setBatchList(response.data.data);\n      setSelectedBatch(response.data.data[0].batch_id);\n      getCalenderData(response.data.data[0].batch_id);\n    } catch (err) {}\n  };\n  const getCalenderData = async id => {\n    setLoading(true);\n    const date = new Date();\n    const firstDay = moment(\n      new Date(date.getFullYear(), date.getMonth(), 1)\n    ).format(\"x\");\n    const lastDay = moment(\n      new Date(date.getFullYear(), date.getMonth() + 1, 0)\n    ).format(\"x\");\n\n    try {\n      const response = await axiosInstance.get(\n        `/getAdminCalendar?access_token=${jsCookie.get(\n          COOKIE_TOKEN\n        )}&batch_id=${id}&startsAt=${firstDay}&endsAt=${lastDay}`\n      );\n      setClasses(response.data.data);\n      setLoading(false);\n    } catch (err) {\n      setLoading(false);\n    }\n  };\n  const batched = batchList.map(i => {\n    return {\n      text: `${i.batch_language}-${i.batch_id}`,\n      value: i.batch_id\n    };\n  });\n  const handleDateClick = arg => {\n    console.log(arg.dateStr);\n  };\n\n  const onClickEvent = info => {\n    const selectedClasses = classes.find(i => i.class_id == info.event.id);\n    setInfo(selectedClasses);\n    setOpenModal(true);\n  };\n  const onChangeBatch = async data => {\n    setSelectedBatch(data.value);\n    await getCalenderData(data.value);\n  };\n  const goToLink = link => {\n    const url = link.includes(\"https\") ? link : `https://${link}`;\n    window.open(url, \"_blank\");\n  };\n  const classes_name = [];\n  const classes_timing = [];\n\n  classes.forEach((i, index) => {\n    return classes_name.push({\n      id: i.class_id,\n      title: `${i.class_start_time}:${i.class_end_time}:${i.batch_mentor}`,\n      start: moment(i.class_date).format(\"YYYY-MM-DD\"),\n      end: moment(i.class_date).format(\"YYYY-MM-DD\"),\n      backgroundColor: \"#EEF4FF\",\n      textColor: \"#3D8BFF\",\n      className: styles.dateClass\n    });\n  });\n\n  return (\n    <div className={styles.base}>\n      {loading && (\n        <Dimmer active>\n          <Loader />\n        </Dimmer>\n      )}\n      <div className={styles.batchSelect}>\n        <Dropdown\n          className={styles.batchedDropdown}\n          fluid\n          selection\n          value={selectedBatch}\n          options={batched}\n          onChange={(e, data) => onChangeBatch(data)}\n        />\n      </div>\n      <div className={styles.calenderWrapper}>\n        <FullCalendar\n          plugins={[dayGridPlugin, interactionPlugin, timeGridPlugin]}\n          initialView=\"dayGridMonth\"\n          dateClick={handleDateClick}\n          height={600}\n          events={classes_name.concat(classes_timing)}\n          displayEventTime={true}\n          displayEventEnd={true}\n          eventTimeFormat={{\n            hour: \"numeric\",\n            minute: \"2-digit\",\n            meridiem: false\n          }}\n          eventClick={onClickEvent}\n        />\n      </div>\n      <div>\n        <Modal\n          onClose={() => setOpenModal(false)}\n          open={openModal}\n          closeIcon\n          size={\"tiny\"}\n        >\n          <Modal.Header>Link</Modal.Header>\n          <Modal.Content>\n            <Modal.Description>\n              <div style={{ marginBottom: \"20px\" }}>\n                <Input\n                  value={info.batch_language}\n                  disabled\n                  style={{ width: \"100%\" }}\n                />\n              </div>\n              <div style={{ marginBottom: \"20px\" }}>\n                <Input\n                  value={info.batch_mentor}\n                  disabled\n                  style={{ width: \"100%\" }}\n                />\n              </div>\n              <div style={{ marginBottom: \"20px\" }}>\n                <Input value={info.class_link} style={{ width: \"100%\" }} />\n              </div>\n            </Modal.Description>\n          </Modal.Content>\n          <Modal.Actions>\n            <Button color=\"black\" onClick={() => setOpenModal(false)}>\n              Close\n            </Button>\n            <Button\n              content=\"Go to Link\"\n              labelPosition=\"right\"\n              icon=\"checkmark\"\n              onClick={() => goToLink(info.class_link)}\n              positive\n            />\n          </Modal.Actions>\n        </Modal>\n      </div>\n    </div>\n  );\n}\n","/home/tthinksys/tremendo_frontend/components/Carousal/Carousel.js",[],"/home/tthinksys/tremendo_frontend/components/Carousal/CarouselSkelton.js",[],"/home/tthinksys/tremendo_frontend/components/Carousal/HomeCarousal.js",[],"/home/tthinksys/tremendo_frontend/components/CourseBox/CourseBox.js",[],"/home/tthinksys/tremendo_frontend/components/CourseDetailTab/AdminBatchManagment.js",["302"],"import Cookies from \"js-cookie\";\nimport moment from \"moment\";\nimport React, { useState, useEffect, useContext } from \"react\";\nimport {\n  Dropdown,\n  Icon,\n  Pagination,\n  Modal,\n  Input,\n  Button,\n  Message,\n  Dimmer,\n  Loader\n} from \"semantic-ui-react\";\nimport { GlobalContext } from \"../../Context/Provider\";\nimport axiosInstance from \"../../utils/axiosInstance\";\nimport { COOKIE_TOKEN } from \"../../utils/constants\";\nimport ButtonComponent from \"../Button/Button\";\nimport styles from \"./AdminBatchManagment.module.css\";\nimport DatePicker from \"react-datepicker\";\n\nexport default function AdminBatchManagment({}) {\n  const { homeState } = useContext(GlobalContext);\n  const [openModal, setOpenModal] = useState(false);\n  const [batchReplacementModal, setBatchReplacementModal] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [createBatchData, setCreateBatchData] = useState({});\n  const [mentorList, setMentorList] = useState([]);\n  const [batchList, setBatchList] = useState([]);\n  const [studentList, setStudentList] = useState([]);\n  const [newBatchCode, setNewBatchCode] = useState(\"\");\n  const [selectedBatch, setSelectedBatch] = useState(\"\");\n\n  useEffect(() => {\n    getBatchList();\n  }, []);\n\n  const getMentorList = async lang_code => {\n    try {\n      const response = await axiosInstance.get(\n        `/getMentorList?access_token=${Cookies.get(\n          COOKIE_TOKEN\n        )}&lang=${lang_code}`\n      );\n      setMentorList(response.data.data);\n    } catch (err) {}\n  };\n\n  const getStudentsAccordingToBatch = async id => {\n    setLoading(true);\n    try {\n      const response = await axiosInstance.get(\n        `/getBatchStudentList?access_token=${Cookies.get(\n          COOKIE_TOKEN\n        )}&batch_id=${id}`\n      );\n      setStudentList(response.data.data);\n      setLoading(false);\n    } catch (err) {\n      setLoading(false);\n    }\n  };\n  const getBatchList = async () => {\n    try {\n      const response = await axiosInstance.get(\n        `/getBatchList?access_token=${Cookies.get(COOKIE_TOKEN)}&lang=all`\n      );\n      setBatchList(response.data.data);\n      getStudentsAccordingToBatch(response.data.data[0].batch_id);\n    } catch (err) {}\n  };\n  const onChangeBatchFilter = async id => {\n    const selectedId = id.split(\"-\")[1];\n    getStudentsAccordingToBatch(selectedId);\n    setSelectedBatch(selectedId);\n  };\n  const batches = batchList.map(i => {\n    return {\n      text: `${i.batch_language}-${i.batch_id}`,\n      value: `${i.batch_language}-${i.batch_id}`\n    };\n  });\n  const onHandleChangeBatch = (data, type) => {\n    if (type == \"batch_language\") {\n      console.log(data);\n      const lang_code = homeState.getLanguage.find(i => i.title == data.value);\n      getMentorList(lang_code.code);\n    }\n\n    setCreateBatchData({ ...createBatchData, [type]: data.value });\n  };\n\n  const onCreateBatch = async () => {\n    setLoading(true);\n    const languageCode = homeState.getLanguage.find(\n      i => i.title == createBatchData.batch_language\n    );\n    const mentorId = mentorList.find(\n      i => i.name == createBatchData.batch_mentor\n    );\n    const payload = {\n      ...createBatchData,\n      access_token: Cookies.get(COOKIE_TOKEN),\n      language_code: languageCode.id,\n      batch_mentor_id: mentorId.user_code,\n      batch_class_days: createBatchData.batch_class_days?.join(\",\"),\n      batch_starting_date: moment(createBatchData.batch_starting_date).format(\n        \"DD/MM/YYYY\"\n      ),\n      batch_end_date: moment(createBatchData.batch_end_date).format(\n        \"DD/MM/YYYY\"\n      )\n    };\n    try {\n      const response = await axiosInstance.post(`/createNewBatch`, payload);\n      getBatchList();\n      setLoading(false);\n      setOpenModal(false);\n    } catch (err) {\n      setLoading(false);\n      setOpenModal(false);\n    }\n  };\n  const languageArray = homeState.getLanguage.map(i => {\n    return {\n      text: i.title,\n      value: i.title\n    };\n  });\n  const mentorDropdownOption = mentorList.map(i => {\n    return {\n      text: i.name,\n      value: i.name\n    };\n  });\n  const options = [\n    { key: \"Monday\", text: \"Monday\", value: \"Monday\" },\n    { key: \"Tuesday\", text: \"Tuesday\", value: \"Tuesday\" },\n    { key: \"Wednesday\", text: \"Wednesday\", value: \"Wednesday\" },\n    { key: \"Thursday\", text: \"Thursday\", value: \"Thursday\" },\n    { key: \"Friday\", text: \"Friday\", value: \"Friday\" },\n    { key: \"Saturday\", text: \"Saturday\", value: \"Saturday\" },\n    { key: \"Sunday\", text: \"Sunday\", value: \"Sunday\" }\n  ];\n  const DateInput = ({ value, onClick, placeholder }) => {\n    return (\n      <button\n        className={styles.dateInput}\n        style={{\n          width: \"186px\",\n          color: \"#66666d\",\n          border: \"1px solid #cecedc\",\n          height: \"38px\",\n          paddingLeft: \"8px\",\n          fontFamily: \"Poppins\",\n          backgroundColor: \"#fff\",\n          textAlign: \"left\"\n        }}\n        onClick={onClick}\n      >\n        {value ? value : placeholder}\n      </button>\n    );\n  };\n  console.log(createBatchData);\n  const addNewBatchModal = () => {\n    return (\n      <Modal\n        onClose={() => setOpenModal(false)}\n        open={openModal}\n        closeIcon\n        size={\"tiny\"}\n      >\n        <Modal.Header>Create New Batch</Modal.Header>\n        <Modal.Content>\n          <Modal.Description>\n            <div style={{ marginBottom: \"20px\" }}>\n              <Dropdown\n                fluid\n                selection\n                options={languageArray}\n                onChange={(event, data) =>\n                  onHandleChangeBatch(data, \"batch_language\")\n                }\n                placeholder=\"Select Languages\"\n              />\n            </div>\n            <div style={{ marginBottom: \"20px\" }}>\n              <Dropdown\n                fluid\n                selection\n                options={mentorDropdownOption}\n                onChange={(event, data) =>\n                  onHandleChangeBatch(data, \"batch_mentor\")\n                }\n                placeholder=\"Select Mentor\"\n              />\n            </div>\n            <div className={styles.inputCreateWrapper}>\n              <div>\n                <Input\n                  placeholder=\"Start Time eg. 2:00pm\"\n                  onChange={(e, data) =>\n                    onHandleChangeBatch(data, \"batch_start_time\")\n                  }\n                  style={{ width: \"100%\" }}\n                />\n              </div>\n              <div>\n                <Input\n                  placeholder=\"End Time eg. 4:00pm\"\n                  onChange={(e, data) =>\n                    onHandleChangeBatch(data, \"batch_end_time\")\n                  }\n                  style={{ width: \"100%\" }}\n                />\n              </div>\n            </div>\n            <div className={styles.inputCreateWrapper}>\n              <div>\n                <DatePicker\n                  selected={createBatchData.batch_starting_date}\n                  onChange={date =>\n                    onHandleChangeBatch({ value: date }, \"batch_starting_date\")\n                  }\n                  placeholderText=\"Start Date\"\n                  customInput={<DateInput />}\n                  dateFormat=\"MMMM d, yyyy\"\n                  minDate={Date.now()}\n                  dropdownMode=\"select\"\n                />\n              </div>\n              <div>\n                <DatePicker\n                  selected={createBatchData.batch_end_date}\n                  onChange={date =>\n                    onHandleChangeBatch({ value: date }, \"batch_end_date\")\n                  }\n                  placeholderText=\"End Date\"\n                  customInput={<DateInput />}\n                  dateFormat=\"MMMM d, yyyy\"\n                  minDate={\n                    createBatchData.batch_starting_date\n                      ? createBatchData.batch_starting_date\n                      : Date.now()\n                  }\n                  dropdownMode=\"select\"\n                />\n              </div>\n            </div>\n            <div className={styles.inputCreateWrapper}>\n              <div>\n                <Input\n                  placeholder=\"Batch Capacity\"\n                  onChange={(e, data) =>\n                    onHandleChangeBatch(data, \"batch_capcity\")\n                  }\n                  style={{ width: \"100%\" }}\n                />\n              </div>\n              <div>\n                <Input\n                  placeholder=\"Total Classes\"\n                  onChange={(e, data) =>\n                    onHandleChangeBatch(data, \"batch_total_classes\")\n                  }\n                  style={{ width: \"100%\" }}\n                />\n              </div>\n            </div>\n            <div className={styles.inputCreateWrapper}>\n              <div>\n                <Input\n                  placeholder=\"Total Time (Hrs)\"\n                  onChange={(e, data) =>\n                    onHandleChangeBatch(data, \"batch_total_time\")\n                  }\n                  style={{ width: \"100%\" }}\n                />\n              </div>\n              <div>\n                <Input\n                  placeholder=\"Week type\"\n                  onChange={(e, data) =>\n                    onHandleChangeBatch(data, \"batch_week_type\")\n                  }\n                  style={{ width: \"100%\" }}\n                />\n              </div>\n            </div>\n            <div className={styles.inputCreateWrapper}>\n              <div>\n                <Input\n                  placeholder=\"Batch Purchase Price\"\n                  onChange={(e, data) =>\n                    onHandleChangeBatch(data, \"batch_purchase_price\")\n                  }\n                  style={{ width: \"100%\" }}\n                />\n              </div>\n              <div>\n                <Input\n                  placeholder=\"Batch Orignal Price\"\n                  onChange={(e, data) =>\n                    onHandleChangeBatch(data, \"batch_original_price\")\n                  }\n                  style={{ width: \"100%\" }}\n                />\n              </div>\n            </div>\n\n            <div style={{ marginBottom: \"20px\" }}>\n              <Input\n                placeholder=\"Meeting Link\"\n                onChange={(e, data) => onHandleChangeBatch(data, \"class_link\")}\n                style={{ width: \"100%\" }}\n              />\n            </div>\n\n            <div>\n              <Dropdown\n                placeholder=\"Batch Class Days\"\n                fluid\n                multiple\n                selection\n                onChange={(e, data) =>\n                  onHandleChangeBatch(data, \"batch_class_days\")\n                }\n                options={options}\n                style={{ width: \"100%\" }}\n              />\n            </div>\n          </Modal.Description>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button color=\"black\" onClick={() => setOpenModal(false)}>\n            Close\n          </Button>\n          <Button\n            content=\"Create Batch\"\n            labelPosition=\"right\"\n            icon=\"checkmark\"\n            onClick={() => onCreateBatch()}\n            positive\n            loading={loading}\n          />\n        </Modal.Actions>\n      </Modal>\n    );\n  };\n  const onUpdateBatch = async () => {\n    setLoading(true);\n    const payload = {\n      access_token: Cookies.get(COOKIE_TOKEN),\n      new_batch_id: newBatchCode.split(\"-\")[1],\n      student_batch_id: batchReplacementModal.student_batch_id\n    };\n    try {\n      const response = await axiosInstance.post(`/updateStudentBatch`, payload);\n      setLoading(false);\n      setBatchReplacementModal(null);\n      getStudentsAccordingToBatch(selectedBatch);\n    } catch (err) {\n      setLoading(false);\n      setBatchReplacementModal(null);\n    }\n  };\n  const batchReplacementModalSection = () => {\n    return (\n      <Modal\n        onClose={() => setBatchReplacementModal(null)}\n        open={batchReplacementModal != null ? true : false}\n        closeIcon\n        size={\"tiny\"}\n      >\n        <Modal.Header>Swap Batches</Modal.Header>\n        <Modal.Content>\n          <Modal.Description>\n            <div style={{ marginBottom: \"20px\" }}>\n              <Input\n                value={batchReplacementModal?.batch_id}\n                disabled\n                style={{ width: \"100%\" }}\n              />\n            </div>\n            <div style={{ marginBottom: \"20px\" }}>\n              <Dropdown\n                fluid\n                selection\n                placeholder=\"New batch\"\n                options={batches}\n                onChange={(event, data) => setNewBatchCode(data.value)}\n              />\n            </div>\n          </Modal.Description>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button color=\"black\" onClick={() => setBatchReplacementModal(null)}>\n            Close\n          </Button>\n          <Button\n            content=\"Update Batch\"\n            labelPosition=\"right\"\n            icon=\"checkmark\"\n            onClick={() => onUpdateBatch()}\n            positive\n            loading={loading}\n          />\n        </Modal.Actions>\n      </Modal>\n    );\n  };\n  const noDataSection = () => {\n    return (\n      <Message>\n        <Message.Header>Oops</Message.Header>\n        <p>Please add some student into batches</p>\n      </Message>\n    );\n  };\n  return (\n    <div className={styles.base}>\n      {loading && (\n        <Dimmer active>\n          <Loader />\n        </Dimmer>\n      )}\n      <div className={styles.headingDropdownWrapper}>\n        <div className={styles.heading}>Student Batch Details </div>\n        <div className={styles.batchSelect}>\n          <Dropdown\n            className={styles.batchedDropdown}\n            fluid\n            selection\n            placeholder=\"Select batches\"\n            defaultValue={batches[0] && batches[0].value}\n            options={batches}\n            onChange={(event, data) => onChangeBatchFilter(data.value)}\n          />\n        </div>\n      </div>\n      <div className={styles.tableSection}>\n        <div className={styles.tableHeader}>\n          <div className={styles.headerName}>Student Name</div>\n          <div className={styles.headerName}>Joining Date</div>\n          <div className={styles.headerName}>Student Id</div>\n          <div className={styles.headerName}>\n            Replacement <br></br>(Batch no.)\n          </div>\n          <div className={styles.headerName}>Mentor</div>\n          <div className={styles.headerName}></div>\n        </div>\n        {studentList.length > 0\n          ? studentList?.map((i, index) => (\n              <div className={styles.tableBody} key={index}>\n                <div className={styles.headerName}>{i.user_name}</div>\n                <div className={styles.headerName}>\n                  {moment(i.created_at).format(\"DD MMM,YYYY\")}\n                </div>\n                <div className={styles.headerName}>{i.student_batch_id}</div>\n                <div\n                  className={styles.headerName}\n                  style={{ textDecoration: \"underline\" }}\n                  onClick={() => setBatchReplacementModal(i)}\n                >\n                  {i.batch_id}\n                </div>\n                <div className={styles.headerName}>{i.mentor_name}</div>\n                {/* <div className={styles.headerName}>\n              <Icon name=\"trash alternate\" size=\"large\" color=\"red\" />\n            </div> */}\n              </div>\n            ))\n          : noDataSection()}\n      </div>\n      <div className={styles.btnPaginationWrapper}>\n        <div className={styles.createBtn}>\n          <ButtonComponent\n            label={\"Create new ID\"}\n            height={45}\n            backgroundColor={\"#f98e46\"}\n            textStyle={{\n              color: \"#fff\",\n              fontWeight: \"bold\",\n              fontFamily: \"Open Sans\",\n              fontSize: \"18px\"\n            }}\n            border=\"none\"\n            onClick={() => setOpenModal(true)}\n          />\n        </div>\n        {/* <div className={styles.pagination}>\n          <Pagination\n            boundaryRange={0}\n            defaultActivePage={2}\n            ellipsisItem={null}\n            firstItem={null}\n            lastItem={null}\n            siblingRange={1}\n            totalPages={10}\n          />\n        </div> */}\n      </div>\n      {addNewBatchModal()}\n      {batchReplacementModalSection()}\n    </div>\n  );\n}\n","/home/tthinksys/tremendo_frontend/components/CourseDetailTab/BatchManagement.js",["303"],"import { useEffect, useState } from \"react\";\nimport moment from \"moment\";\nimport ButtonComponent from \"../Button/Button\";\nimport styles from \"./BatchManagement.module.css\";\nimport { useContext } from \"react\";\nimport { DeviceContext } from \"../../pages/_app\";\nimport { Image, Dropdown, Message } from \"semantic-ui-react\";\nimport { GlobalContext } from \"../../Context/Provider\";\nimport axiosInstance from \"../../utils/axiosInstance\";\nimport jsCookie from \"js-cookie\";\nimport { COOKIE_TOKEN } from \"../../utils/constants\";\nimport { toast } from \"react-toastify\";\n\nexport default function BatchManagement() {\n  const { isMobileView } = useContext(DeviceContext);\n  const [loading, setLoading] = useState(false);\n  const [studentList, setStudentList] = useState([]);\n  const [attedenceData, setAttendenceData] = useState([]);\n  const {\n    studentDashboardState,\n    languageState,\n    studentDashboardDispatch: dispatch\n  } = useContext(GlobalContext);\n  const onChangeAttendence = (data, student) => {\n    let attendence = attedenceData;\n    attendence.push({ [\"user_id\"]: student.user_id, status: data.value });\n    setAttendenceData(attendence);\n  };\n\n  const getStudentsAccordingToBatch = async id => {\n    setLoading(true);\n    try {\n      const response = await axiosInstance.get(\n        `/getBatchStudentList?access_token=${jsCookie.get(\n          COOKIE_TOKEN\n        )}&batch_id=${id}`\n      );\n      setStudentList(response.data.data);\n      setLoading(false);\n    } catch (err) {\n      setLoading(false);\n    }\n  };\n  const updateStudentAttendence = async () => {\n    if (attedenceData.length == 0) {\n      toast.error(\"Select Attendence\", {\n        theme: \"colored\"\n      });\n      return false;\n    }\n    setLoading(true);\n    const payload = {\n      access_token: jsCookie.get(COOKIE_TOKEN),\n      batch_id: languageState.storedMentorBatch.batch_id,\n      attandance: attedenceData,\n      class_id: studentList.class_data.class_id,\n      attandance_date: studentList.class_data.class_date_format\n    };\n    try {\n      const response = await axiosInstance.post(\n        `/updateStudentAttandance`,\n        payload\n      );\n      toast.success(\"Attendence Submitted\", {\n        theme: \"colored\"\n      });\n      setLoading(false);\n    } catch (err) {\n      toast.error(\"Something went wrong!!\", {\n        theme: \"colored\"\n      });\n      setLoading(false);\n    }\n  };\n  const getBatchStudents = async id => {\n    await getStudentsAccordingToBatch(id);\n  };\n\n  useEffect(() => {\n    if (studentDashboardState.mentorBatches.length > 0) {\n      getStudentsAccordingToBatch(languageState.storedMentorBatch.batch_id);\n    }\n  }, []);\n  // if (true) {\n  //   return (\n  //     <div\n  //       style={{\n  //         height: isMobileView ? \"300px\" : \"700px\",\n  //         width: isMobileView ? \"300px\" : \"700px\",\n  //         margin: \"auto\"\n  //       }}\n  //     >\n  //       <Image\n  //         src=\"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Fno_data.png?alt=media&token=79834bd2-97fa-4f63-897f-fe9498236194\"\n  //         alt=\"tremendo dashboard banner\"\n  //         height={isMobileView ? \"300px\" : \"800px\"}\n  //         width={isMobileView ? \"300px\" : \"700px\"}\n  //         className={styles.banner}\n  //       />\n  //     </div>\n  //   );\n  // }\n\n  const noDataSection = () => {\n    return (\n      <Message>\n        <Message.Header>No Class</Message.Header>\n        <p>No Running Class for this batch</p>\n      </Message>\n    );\n  };\n\n  return (\n    <div className={styles.base}>\n      <div className={styles.chartHeading}>Batch List</div>\n      <div className={styles.batchListWrapper}>\n        <div className={styles.batchListHeader}>\n          <div className={styles.headerOption}>Batch Name</div>\n          <div className={styles.headerOption}>Total students</div>\n          <div className={styles.headerOption}>Total Classes</div>\n        </div>\n        {studentDashboardState.mentorBatches?.map(i => (\n          <div\n            className={styles.batchListBody}\n            key={i}\n            onClick={() => getBatchStudents(i.batch_id)}\n          >\n            <div\n              className={styles.bodyOption}\n            >{`${i.batch_language}-${i.batch_id}`}</div>\n            <div className={styles.bodyOption}>{i.batch_capcity}</div>\n            <div className={styles.bodyOptionWithCheckBox}>\n              <div>{i.batch_total_classes}</div>\n              <div className={styles.completeCheckbox}>\n                <label className={styles.completeContainer}>\n                  <input\n                    type=\"checkbox\"\n                    className={styles.checkbox}\n                    onClick={event => console.log(event.target.checked)}\n                  />\n                  <span className={styles.checkmark}></span>\n                </label>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n      <div className={styles.headingSubmitBtnWrapper}>\n        <div className={styles.chartHeading}>Student Attendence</div>\n        <div className={styles.createFaqgbtn}>\n          <ButtonComponent\n            label={\"Submit Attendence\"}\n            height={25}\n            borderRadius={8}\n            backgroundColor={\"#f98e46\"}\n            textStyle={{\n              color: \"#fff\",\n              fontWeight: \"bold\",\n              fontFamily: \"Open Sans\",\n              fontSize: \"12px\"\n            }}\n            border=\"none\"\n            onClick={() => updateStudentAttendence()}\n          />\n        </div>\n      </div>\n      <div className={styles.tableHeader}>\n        <div className={styles.headerName}>S no.</div>\n        <div className={styles.headerName}>Name.</div>\n        <div className={styles.headerName}>ID</div>\n        <div className={styles.headerName}>Status</div>\n      </div>\n      {studentList.class_data && Object.keys(studentList.class_data).length != 0\n        ? studentList.student_list?.map((i, index) => (\n            <div className={styles.tableBody} key={index}>\n              <div className={styles.bodyName}>{index + 1}.</div>\n              <div className={styles.bodyName}>{i.user_name}</div>\n              <div className={styles.bodyName}>{i.student_batch_id}</div>\n              <div className={styles.bodyName}>\n                <Dropdown\n                  fluid\n                  options={[\n                    { text: \"Present\", value: \"p\" },\n                    { text: \"Absent\", value: \"a\" }\n                  ]}\n                  className={styles.attendenceBody}\n                  onChange={(event, data) => onChangeAttendence(data, i)}\n                  placeholder=\"Attendence\"\n                />\n              </div>\n            </div>\n          ))\n        : noDataSection()}\n    </div>\n  );\n}\n","/home/tthinksys/tremendo_frontend/components/CourseDetailTab/CourseDetailTab.js",["304"],"import styles from \"./CourseDetailTab.module.css\";\nimport moment from \"moment\";\nimport { Image } from \"semantic-ui-react\";\nimport StudentDashboardSkelton from \"../Dashboard/StudentDashboardSkelton\";\nimport { useEffect, useContext } from \"react\";\nimport { DeviceContext } from \"../../pages/_app\";\nimport { GlobalContext } from \"../../Context/Provider\";\nimport { getStudentCourseDetails } from \"../../Context/Actions/Dashboard/DashboardAction\";\n\nexport default function CourseDetailTab() {\n  const { isMobileView } = useContext(DeviceContext);\n  const {\n    studentDashboardState,\n    languageState,\n    studentDashboardDispatch: dispatch\n  } = useContext(GlobalContext);\n\n  const totalDatesInCurrentMonth = Array.from(\n    Array(moment().daysInMonth()).keys()\n  );\n  const currentDate = moment().format(\"D\");\n  const days = [\"Mon\", \"Tue\", \"Wed\", \"Thus\", \"Fri\", \"Sat\", \"Sun\"];\n  const currentDay = moment().day() ? moment().day() : 7;\n\n  useEffect(() => {\n    if (document.getElementById(\"currentDate\")) {\n      document.getElementById(\"currentDate\").scrollIntoView({\n        behavior: \"smooth\",\n        block: \"center\"\n      });\n    }\n    if (languageState.setStudentSelectedLanguage?.batch_id) {\n      getStudentCourseDetails(\n        languageState.setStudentSelectedLanguage.batch_id\n      )(dispatch);\n    }\n  }, []);\n\n  const goToLink = link => {\n    const url = link.includes(\"https\") ? link : `https://${link}`;\n    window.open(url, \"_blank\");\n  };\n\n  if (studentDashboardState.getStudentCourseDetailsLoading) {\n    return <StudentDashboardSkelton />;\n  }\n  const todays_class = studentDashboardState.getStudentCourseDetails?.class_details?.find(\n    i =>\n      moment(i.class_date).format(\"DD/MM/YYYY\") ===\n      moment().format(\"DD/MM/YYYY\")\n  );\n\n  if (\n    studentDashboardState.getStudentCourseDetails?.class_details?.length == 0\n  ) {\n    return (\n      <div\n        style={{\n          height: isMobileView ? \"300px\" : \"700px\",\n          width: isMobileView ? \"300px\" : \"700px\",\n          margin: \"auto\"\n        }}\n      >\n        <Image\n          src=\"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Fno_data.png?alt=media&token=79834bd2-97fa-4f63-897f-fe9498236194\"\n          alt=\"tremendo dashboard banner\"\n          height={isMobileView ? \"300px\" : \"800px\"}\n          width={isMobileView ? \"300px\" : \"700px\"}\n          className={styles.banner}\n        />\n      </div>\n    );\n  }\n  const batch_data = studentDashboardState.getStudentCourseDetails?.batch_data;\n  return (\n    <div className={styles.base}>\n      <div className={styles.courseName}>\n        Course Name : {batch_data?.batch_language}\n      </div>\n      <div className={styles.batchName}>\n        Student Batch No. : {batch_data?.batch_id}\n      </div>\n      <div className={styles.dateMonthHeading}>\n        <div className={styles.courseName}>Date</div>\n        <div className={styles.batchName}>{moment().format(\"MMM\")}</div>\n      </div>\n      <div className={styles.datesWrapper}>\n        {totalDatesInCurrentMonth.map(i => (\n          <div\n            className={styles.date}\n            style={{ backgroundColor: currentDate == i + 1 && \"#fa9116\" }}\n            key={i}\n            id={currentDate == i + 1 ? \"currentDate\" : \"otherDate\"}\n          >\n            {i + 1}\n          </div>\n        ))}\n      </div>\n      <div className={styles.borderLineWrapper}>\n        <div className={styles.emptySection}></div>\n        <div className={styles.detailHeadingWrapper}>\n          <div className={styles.headingName}>Batch</div>\n          <div className={styles.headingName}>Time</div>\n          <div className={styles.mentorHeading}>Mentor</div>\n          <div className={styles.joiningHeading}>Joining link</div>\n        </div>\n      </div>\n      <div className={styles.horizontalBorderLine}></div>\n      {days.map((i, index) => (\n        <div className={styles.courseDetailSection} key={index}>\n          <div className={styles.dayBorderWrapper}>\n            <div className={styles.days}>{i}</div>\n            <div className={styles.border}></div>\n          </div>\n          <div className={styles.detailsWrapper}>\n            <div className={styles.batchCode}>{batch_data?.batch_id}</div>\n            <div className={styles.batchCode}>\n              {todays_class?.class_start_time\n                ? `${todays_class?.class_start_time} - ${todays_class?.class_end_time}`\n                : `${batch_data?.batch_start_time} - ${batch_data?.batch_end_time}`}\n            </div>\n            <div className={styles.mentorProfile}>\n              <div className={styles.profile}>\n                <Image\n                  src={\n                    \"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Fblank_profile.png?alt=media&token=53afec48-03b2-4843-9b9c-8dc9c252ea41\"\n                  }\n                  circular\n                  alt=\"user-image\"\n                  height={\"24px\"}\n                  width={\"24px\"}\n                />\n              </div>\n              <div className={styles.name}>\n                {todays_class?.batch_mentor\n                  ? todays_class.batch_mentor\n                  : batch_data?.batch_mentor}\n              </div>\n            </div>\n            <div\n              className={styles.joiningLink}\n              onClick={() => goToLink(todays_class?.class_link)}\n            >\n              <Image\n                src={\n                  \"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Fgoogle_meet.png?alt=media&token=c0a905f7-90a6-4cc5-9377-2dc76aa1249b\"\n                }\n                alt=\"user-image\"\n              />\n            </div>\n            {(currentDay !== index + 1 ||\n              (todays_class && Object.keys(todays_class)?.length == 0)) && (\n              <div className={styles.overlay}></div>\n            )}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n","/home/tthinksys/tremendo_frontend/components/CourseDetailTab/MentorBatchDetails.js",["305"],"import styles from \"./MentorBatchDetails.module.css\";\nimport { useContext, useState, useEffect } from \"react\";\nimport {\n  Dropdown,\n  Icon,\n  Pagination,\n  Message,\n  Modal,\n  Input,\n  Button,\n  Dimmer,\n  Loader\n} from \"semantic-ui-react\";\nimport ButtonComponent from \"../Button/Button\";\nimport { GlobalContext } from \"../../Context/Provider\";\nimport axiosInstance from \"../../utils/axiosInstance\";\nimport jsCookie from \"js-cookie\";\nimport { COOKIE_TOKEN, LOGIN_MENTOR_TAB } from \"../../utils/constants\";\nimport moment from \"moment\";\nimport { toast } from \"react-toastify\";\n\nconst PENDING = \"Pending\";\nconst APPROVE = \"approve\";\nconst DESAPPROVE = \"deny\";\n\nexport default function MentorBatchDetails({}) {\n  const { homeState } = useContext(GlobalContext);\n  const [mentorList, setMentorList] = useState([]);\n  const [openModal, setOpenModal] = useState(false);\n  const [createBatchData, setCreateBatchData] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [selectedLang, setSelectedLang] = useState(\"\");\n\n  const languageArray = homeState.getLanguage.map(i => {\n    return {\n      text: i.title,\n      value: i.title\n    };\n  });\n  useEffect(() => {\n    getMentorList(homeState.getLanguage[0]?.id);\n  }, []);\n\n  const getMentorList = async code => {\n    setLoading(true);\n    try {\n      const response = await axiosInstance.get(\n        `/getMentorList?access_token=${jsCookie.get(COOKIE_TOKEN)}&lang=${code}`\n      );\n      setMentorList(response.data.data);\n      setLoading(false);\n    } catch (err) {\n      setLoading(false);\n    }\n  };\n  const onHandleChangeBatch = (data, type) => {\n    setCreateBatchData({ ...createBatchData, [type]: data.value });\n  };\n  const onCreateMentor = async () => {\n    setLoading(true);\n    const lang_code = homeState.getLanguage.find(\n      i => i.title == createBatchData.language\n    );\n    const payload = {\n      ...createBatchData,\n      access_type: LOGIN_MENTOR_TAB,\n      dob: \"\",\n      phone_number: \"\",\n      lang_code: lang_code.id\n    };\n    try {\n      const response = await axiosInstance.post(`/signup`, payload);\n      setLoading(false);\n      setOpenModal(false);\n      getMentorList(selectedLang);\n    } catch (err) {\n      toast.error(err.response.data.msg, {\n        theme: \"colored\"\n      });\n      setLoading(false);\n      setOpenModal(false);\n    }\n  };\n  const addNewBatchModal = () => {\n    return (\n      <Modal\n        onClose={() => setOpenModal(false)}\n        open={openModal}\n        closeIcon\n        size={\"tiny\"}\n      >\n        <Modal.Header>Create New Mentor</Modal.Header>\n        <Modal.Content>\n          <Modal.Description>\n            <div style={{ marginBottom: \"20px\" }}>\n              <Input\n                placeholder=\"Name\"\n                onChange={(e, data) => onHandleChangeBatch(data, \"name\")}\n                style={{ width: \"100%\" }}\n              />\n            </div>\n            <div style={{ marginBottom: \"20px\" }}>\n              <Dropdown\n                fluid\n                selection\n                options={languageArray}\n                onChange={(event, data) =>\n                  onHandleChangeBatch(data, \"language\")\n                }\n                placeholder=\"Languages\"\n              />\n            </div>\n            <div style={{ marginBottom: \"20px\" }}>\n              <Input\n                placeholder=\"Email\"\n                onChange={(e, data) => onHandleChangeBatch(data, \"email\")}\n                style={{ width: \"100%\" }}\n              />\n            </div>\n            <div>\n              <Input\n                placeholder=\"Password\"\n                onChange={(e, data) => onHandleChangeBatch(data, \"password\")}\n                style={{ width: \"100%\" }}\n              />\n            </div>\n          </Modal.Description>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button color=\"black\" onClick={() => setOpenModal(false)}>\n            Close\n          </Button>\n          <Button\n            content=\"Create Mentor\"\n            labelPosition=\"right\"\n            icon=\"checkmark\"\n            onClick={() => onCreateMentor()}\n            positive\n            loading={loading}\n          />\n        </Modal.Actions>\n      </Modal>\n    );\n  };\n  const noDataSection = () => {\n    return (\n      <Message>\n        <Message.Header>Oops</Message.Header>\n        <p>Please add some Mentors</p>\n      </Message>\n    );\n  };\n\n  const leaveOptions = [\n    {\n      text: \"Pending\",\n      value: \"pending\"\n    },\n    {\n      text: \"Approved\",\n      value: \"approve\"\n    },\n    {\n      text: \"Reject\",\n      value: \"deny\"\n    }\n  ];\n  const onSelectLeaveOption = async (data, leave_id) => {\n    console.log(data);\n    setLoading(true);\n    try {\n      const payload = {\n        access_token: jsCookie.get(COOKIE_TOKEN),\n        leave_id: leave_id,\n        status: data.value\n      };\n      const response = await axiosInstance.post(`/updateMentorLeave`, payload);\n      getMentorList(selectedLang);\n      setLoading(false);\n    } catch (err) {\n      setLoading(false);\n    }\n  };\n  const onChangeLanguage = data => {\n    const languageCode = homeState.getLanguage.find(i => i.title == data.value);\n    getMentorList(languageCode.id);\n    setSelectedLang(languageCode.id);\n  };\n  const deleteMentor = async id => {\n    setLoading(true);\n    try {\n      const response = await axiosInstance.delete(\n        `/deleteUserAccount?access_token=${jsCookie.get(\n          COOKIE_TOKEN\n        )}&user_id=${id}`\n      );\n      getMentorList(selectedLang);\n      setLoading(false);\n    } catch (err) {\n      setLoading(false);\n    }\n  };\n  return (\n    <div className={styles.base}>\n      {loading && (\n        <Dimmer active>\n          <Loader />\n        </Dimmer>\n      )}\n      <div className={styles.headingDropdownWrapper}>\n        <div className={styles.heading}>Mentor Batch Details </div>\n        <div className={styles.batchSelect}>\n          <Dropdown\n            className={styles.batchedDropdown}\n            fluid\n            selection\n            defaultValue={languageArray[0]?.value}\n            options={languageArray}\n            onChange={(e, data) => onChangeLanguage(data)}\n          />\n        </div>\n      </div>\n      <div className={styles.tableSection}>\n        <div className={styles.tableHeader}>\n          <div className={styles.headerName}>Mentor Name</div>\n          <div className={styles.headerName}>Joining Date</div>\n          <div className={styles.headerName}>Mentor Id</div>\n          <div className={styles.headerName}>Batch no.</div>\n          <div className={styles.headerName}>Leave</div>\n          <div className={styles.headerName}>Delete</div>\n        </div>\n        {mentorList.length > 0\n          ? mentorList.map((i, index) => {\n              let backgroundColor = \"#FFF7EB\",\n                color = \"#f88312\";\n              if (i.leave_status == APPROVE) {\n                (backgroundColor = \"#EAFCFA\"), (color = \"#1d8180\");\n              } else if (i.leave_status == DESAPPROVE) {\n                (backgroundColor = \"#FCEBEB\"), (color = \"#f81712\");\n              }\n              return (\n                <div className={styles.tableBody} key={index}>\n                  <div className={styles.headerName}>{i.name}</div>\n                  <div className={styles.headerName}>\n                    {moment(i.created_at).format(\"DD MMM,YYYY\")}\n                  </div>\n                  <div className={styles.headerName}>{i.user_code}</div>\n                  <div className={styles.headerName}>{i.batch_id}</div>\n                  <div className={styles.headerName}>\n                    {i.leave_status != \"\" ? (\n                      <div className={styles.leaveOptionSelect}>\n                        <Dropdown\n                          className={styles.leaveOptionDropdown}\n                          style={{\n                            backgroundColor: backgroundColor,\n                            color: color,\n                            fontWeight: \"600\"\n                          }}\n                          fluid\n                          selection\n                          value={i.leave_status}\n                          options={leaveOptions}\n                          onChange={(e, data) =>\n                            onSelectLeaveOption(data, i.leave_id)\n                          }\n                        />\n                      </div>\n                    ) : (\n                      <div>Not Applied</div>\n                    )}\n                  </div>\n                  <div\n                    className={styles.headerName}\n                    onClick={() => deleteMentor(i.user_code)}\n                  >\n                    <Icon name=\"trash alternate\" size=\"large\" color=\"red\" />\n                  </div>\n                  <div></div>\n                </div>\n              );\n            })\n          : noDataSection()}\n      </div>\n      <div className={styles.btnPaginationWrapper}>\n        <div className={styles.createBtn}>\n          <ButtonComponent\n            label={\"Create new ID\"}\n            height={45}\n            backgroundColor={\"#f98e46\"}\n            textStyle={{\n              color: \"#fff\",\n              fontWeight: \"bold\",\n              fontFamily: \"Open Sans\",\n              fontSize: \"18px\"\n            }}\n            border=\"none\"\n            onClick={() => setOpenModal(true)}\n          />\n        </div>\n        {/* <div className={styles.pagination}>\n              <Pagination\n                boundaryRange={0}\n                defaultActivePage={2}\n                ellipsisItem={null}\n                firstItem={null}\n                lastItem={null}\n                siblingRange={1}\n                totalPages={10}\n              />\n            </div> */}\n      </div>\n      {addNewBatchModal()}\n    </div>\n  );\n}\n","/home/tthinksys/tremendo_frontend/components/Dashboard/AdminDashboard.js",[],"/home/tthinksys/tremendo_frontend/components/Dashboard/Dashboard.js",["306"],"import { Image } from \"semantic-ui-react\";\nimport Icon from \"../../assets/Icon/Icon\";\nimport { Bar, Pie } from \"react-chartjs-2\";\nimport Chart from \"chart.js/auto\";\nimport ChartDataLabels from \"chartjs-plugin-datalabels\";\nimport styles from \"./Dashboard.module.css\";\nimport StudentDashboardSkelton from \"./StudentDashboardSkelton\";\nimport { useContext, useEffect } from \"react\";\nimport { GlobalContext } from \"../../Context/Provider\";\nimport { getStudentDashboardData } from \"../../Context/Actions/Dashboard/DashboardAction\";\nimport { DeviceContext } from \"../../pages/_app\";\nimport moment from \"moment\";\n\nexport default function Dashboard() {\n  const {\n    studentDashboardState,\n    languageState,\n    studentDashboardDispatch: dispatch\n  } = useContext(GlobalContext);\n  const { isMobileView } = useContext(DeviceContext);\n\n  useEffect(() => {\n    if (languageState.setStudentSelectedLanguage?.batch_id)\n      getStudentDashboardData(\n        languageState.setStudentSelectedLanguage.batch_id\n      )(dispatch);\n  }, []);\n\n  const options = {\n    maintainAspectRatio: false,\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: \"Student\",\n          color: \"#7b7b7b\",\n          font: {\n            family: \"Poppins\",\n            size: 14,\n            weight: \"bold\"\n          }\n        },\n        grid: {\n          display: false\n        }\n      },\n      y: {\n        title: {\n          display: true,\n          text: \"Score\",\n          color: \"#7b7b7b\",\n          font: {\n            family: \"Poppins\",\n            size: 14,\n            weight: \"bold\"\n          }\n        },\n        beginAtZero: true,\n        grid: {\n          display: false\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        display: false\n      }\n    }\n  };\n\n  const pieChartOption = {\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        display: false\n      }\n    }\n  };\n\n  if (studentDashboardState.getStudentDashboardDataLoading) {\n    return <StudentDashboardSkelton />;\n  }\n  if (studentDashboardState.getStudentDashboardData?.classes?.length == 0) {\n    return (\n      <div\n        style={{\n          height: isMobileView ? \"300px\" : \"700px\",\n          width: isMobileView ? \"300px\" : \"700px\",\n          margin: \"auto\"\n        }}\n      >\n        <Image\n          src=\"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Fno_data.png?alt=media&token=79834bd2-97fa-4f63-897f-fe9498236194\"\n          alt=\"tremendo dashboard banner\"\n          height={isMobileView ? \"300px\" : \"800px\"}\n          width={isMobileView ? \"300px\" : \"700px\"}\n          className={styles.banner}\n        />\n      </div>\n    );\n  }\n\n  const studentClasses = studentDashboardState.getStudentDashboardData.classes;\n  const studentProgress =\n    studentDashboardState.getStudentDashboardData.progress;\n  const studentAttendence =\n    studentDashboardState.getStudentDashboardData.attandance;\n  const presentPercentage = (\n    (studentAttendence?.present / studentAttendence?.total_days) *\n    100\n  )?.toFixed(2);\n  const absentPercentage = (\n    (studentAttendence?.absent / studentAttendence?.total_days) *\n    100\n  )?.toFixed(2);\n  console.log(moment(1650944308023).format(\"LL\"));\n  return (\n    <div className={styles.dashboardBase}>\n      <div className={styles.dashboardBanner}>\n        <Image\n          src=\"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Fdashboard_banner.png?alt=media&token=b37ec534-bcbe-4476-8af6-7ddef42ad6b6\"\n          alt=\"tremendo dashboard banner\"\n          className={styles.banner}\n        />\n        <div className={styles.bannerTextWrapper}>\n          <div className={styles.welcomeText}>Welcome</div>\n          <div className={styles.descriptionText}>\n            Lorem Ipsum is simply dummy text of the printing and typesetting\n            industry.\n          </div>\n        </div>\n      </div>\n      <div className={styles.classesWrapper}>\n        <div className={styles.titleWrapper}>\n          <div className={styles.classTitle}>Classes</div>\n          {/* <div className={styles.arrowIcon}>\n            <Icon name=\"rightArrow\" width=\"24\" height=\"24\" />\n          </div> */}\n        </div>\n        <div className={styles.classBoxWrapper}>\n          {studentClasses?.map((i, index) => (\n            <div className={styles.classBox} key={index}>\n              <div className={styles.classDetail}>\n                <div className={styles.subject}>{i.batch_language}</div>\n                <div className={styles.subjectCode}>{i.batch_id}</div>\n              </div>\n              <div className={styles.classTime}>\n                <div className={styles.data}>\n                  {moment(i.class_date).format(\"LL\")}\n                </div>\n                <div className={styles.time}>\n                  {`${i.class_start_time}-${i.class_end_time}`}\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n      <div className={styles.chartWrapper}>\n        <div className={styles.progressChart}>\n          <div className={styles.chartHeading}>Progress</div>\n          <div className={styles.progressChartBox}>\n            <div className={styles.barChart}>\n              <Bar\n                data={{\n                  labels: [\"Highest\", \"Average\", \"My\"],\n                  datasets: [\n                    {\n                      data: [\n                        studentProgress?.total_score,\n                        studentProgress?.average_score,\n                        studentProgress?.my_score\n                      ],\n                      backgroundColor: [\"#055c4d\", \"#e78109\", \"#0289d6\"]\n                    }\n                  ]\n                }}\n                options={options}\n              />\n            </div>\n            <div className={styles.barLabels}>\n              <div className={styles.labelWrap}>\n                <div className={styles.labelIndication}></div>\n                <div className={styles.labelText}>Highest score</div>\n              </div>\n              <div className={styles.labelWrap}>\n                <div className={styles.avgIndication}></div>\n                <div className={styles.labelText}>Average score</div>\n              </div>\n              <div className={styles.labelWrap}>\n                <div className={styles.myScoreIndication}></div>\n                <div className={styles.labelText}>My score</div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className={styles.attendenceChart}>\n          <div className={styles.chartHeading}>Attendance</div>\n          <div className={styles.attendenceChartBox}>\n            <div className={styles.pieChart}>\n              <Pie\n                data={{\n                  labels: [\"Present\", \"Absent\"],\n                  datasets: [\n                    {\n                      data: [presentPercentage, absentPercentage],\n                      backgroundColor: [\"#F1B71B\", \"#ED4F32\"],\n                      datalabels: {\n                        display: true,\n                        color: \"#fff\",\n                        font: {\n                          size: \"14\",\n                          weight: \"bold\",\n                          family: \"Poppins\"\n                        },\n                        formatter: function(value) {\n                          return `${value}%`;\n                        }\n                      }\n                    }\n                  ]\n                }}\n                plugins={[ChartDataLabels]}\n                options={pieChartOption}\n              />\n            </div>\n            <div className={styles.pieChartLabel}>\n              <div className={styles.pielabelWrap}>\n                <div className={styles.piePresentIndication}></div>\n                <div className={styles.pielabelText}>Present</div>\n              </div>\n              <div className={styles.pielabelWrap}>\n                <div className={styles.pieAbsentIndication}></div>\n                <div className={styles.pielabelText}>Absent</div>\n              </div>\n            </div>\n            <div className={styles.totalDays}>\n              Total Days: {studentAttendence?.total_days}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/home/tthinksys/tremendo_frontend/components/Dashboard/MentorDashboard.js",["307"],"import styles from \"./MentorDashboard.module.css\";\nimport { Bar, Line, Pie } from \"react-chartjs-2\";\nimport Chart from \"chart.js/auto\";\nimport StudentDashboardSkelton from \"../Dashboard/StudentDashboardSkelton\";\nimport moment from \"moment\";\nimport ButtonComponent from \"../Button/Button\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { DeviceContext } from \"../../pages/_app\";\nimport { Image, Modal, Input, Button, Dropdown } from \"semantic-ui-react\";\nimport { getMentorDashboardData } from \"../../Context/Actions/Dashboard/DashboardAction\";\nimport { GlobalContext } from \"../../Context/Provider\";\nimport axiosInstance from \"../../utils/axiosInstance\";\nimport jsCookie from \"js-cookie\";\nimport { COOKIE_TOKEN } from \"../../utils/constants\";\n\nexport default function MentorDashboard({}) {\n  const { isMobileView } = useContext(DeviceContext);\n  const [openModal, setOpenModal] = useState(null);\n  const [feilds, setFeilds] = useState({});\n  const [mentorList, setMentorList] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const {\n    studentDashboardState,\n    languageState,\n    studentDashboardDispatch: dispatch\n  } = useContext(GlobalContext);\n  const totalDatesInCurrentMonth = Array.from(\n    Array(moment().daysInMonth()).keys()\n  );\n\n  useEffect(() => {\n    if (document.getElementById(\"currentDate\")) {\n      document.getElementById(\"currentDate\").scrollIntoView({\n        behavior: \"smooth\",\n        block: \"center\"\n      });\n    }\n    getDashboardData();\n  }, []);\n\n  const getDashboardData = async () => {\n    const curr = new Date(); // get current date\n    const first = curr.getDate() - curr.getDay(); // First day is the day of the month - the day of the week\n    const last = first + 6; // last day is the first day + 6\n\n    const firstday = moment(new Date(curr.setDate(first))).format(\"x\");\n    const lastday = moment(new Date(curr.setDate(last))).format(\"x\");\n\n    const id = languageState.storedMentorBatch?.batch_id;\n    await getMentorDashboardData(id, firstday, lastday)(dispatch);\n    createCircle();\n  };\n\n  const createCircle = () => {\n    let can = document.getElementById(\"canvas\"),\n      spanProcent = document.getElementById(\"procent\"),\n      c = can.getContext(\"2d\");\n    const percentage = can.getAttribute(\"data-percent\");\n    let posX = can.width / 2,\n      posY = can.height / 2,\n      fps = 1000 / 200,\n      procent = 0,\n      oneProcent = 360 / 100,\n      result = oneProcent * percentage;\n\n    c.lineCap = \"round\";\n    arcMove();\n\n    function arcMove() {\n      var deegres = 0;\n      var acrInterval = setInterval(function() {\n        deegres += 1;\n        c.clearRect(0, 0, can.width, can.height);\n        procent = deegres / oneProcent;\n\n        spanProcent.innerHTML = procent.toFixed();\n\n        c.beginPath();\n        c.arc(\n          posX,\n          posY,\n          100,\n          (Math.PI / 180) * 270,\n          (Math.PI / 180) * (270 + 360)\n        );\n        c.strokeStyle = \"#f2ddc0\";\n        c.lineWidth = \"20\";\n        c.stroke();\n\n        c.beginPath();\n        c.strokeStyle = \"#F4910A\";\n        c.lineWidth = \"20\";\n        c.arc(\n          posX,\n          posY,\n          100,\n          (Math.PI / 180) * 270,\n          (Math.PI / 180) * (270 + deegres)\n        );\n        c.stroke();\n        if (deegres >= result) clearInterval(acrInterval);\n      }, fps);\n    }\n  };\n\n  const currentDate = moment().format(\"D\");\n  const days = [\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n    \"Sunday\"\n  ];\n  const currentDay = moment().day() ? moment().day() : 7;\n  const options = {\n    maintainAspectRatio: false,\n    scales: {\n      x: {\n        display: false,\n        title: {\n          display: false\n        },\n        grid: {\n          display: false\n        }\n      },\n      y: {\n        title: {\n          display: false\n        },\n        beginAtZero: true,\n        grid: {\n          display: false\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        display: false\n      }\n    }\n  };\n  const onClickStartClass = data => {\n    getMentorList(dashboardData.batch_data.language_code);\n    setOpenModal(dashboardData.batch_data);\n    setFeilds({ ...feilds, ...dashboardData.batch_data });\n  };\n  const onHandleChange = (value, type) => {\n    setFeilds({ ...feilds, [type]: value });\n  };\n  const getMentorList = async lang => {\n    try {\n      const response = await axiosInstance.get(\n        `/getMentorFellowList?access_token=${jsCookie.get(COOKIE_TOKEN)}`\n      );\n      setMentorList(response.data.data);\n    } catch (err) {}\n  };\n\n  const createClassFunction = async () => {\n    const mentorName = mentorList.find(\n      i => i.user_code == feilds?.batch_mentor_id\n    );\n    try {\n      const response = await axiosInstance.post(`/createNewBatchClass`, {\n        access_token: jsCookie.get(COOKIE_TOKEN),\n        batch_id: openModal.batch_id,\n        class_start_time: feilds?.batch_start_time,\n        class_end_time: feilds?.batch_end_time,\n        batch_mentor: mentorName.name,\n        batch_mentor_id: feilds?.batch_mentor_id,\n        class_link: feilds?.class_link\n      });\n      getDashboardData();\n      setLoading(false);\n      onCloseModal();\n    } catch (err) {\n      setLoading(false);\n      onCloseModal();\n    }\n  };\n  const onUpdateClass = async () => {\n    setLoading(true);\n    await createClassFunction();\n  };\n  const onCreateClass = async () => {\n    setLoading(true);\n    await createClassFunction();\n    goToLink(feilds?.class_link);\n  };\n\n  const onCloseModal = () => {\n    setOpenModal(null);\n    setFeilds({});\n  };\n  const goToLink = link => {\n    const url = link.includes(\"https\") ? link : `https://${link}`;\n    window.open(url, \"_blank\");\n  };\n\n  const mentor_list = mentorList.map(i => {\n    return {\n      text: i.name,\n      value: i.user_code\n    };\n  });\n  const startClassModal = () => {\n    return (\n      <Modal\n        onClose={() => onCloseModal()}\n        open={openModal != null ? true : false}\n        closeIcon\n        size={\"tiny\"}\n      >\n        <Modal.Header>Create Classes</Modal.Header>\n        <Modal.Content>\n          <Modal.Description>\n            <div style={{ marginBottom: \"20px\" }}>\n              <Input\n                value={feilds?.batch_start_time}\n                style={{ width: \"100%\" }}\n                onChange={(e, data) =>\n                  onHandleChange(data.value, \"batch_start_time\")\n                }\n              />\n            </div>\n            <div style={{ marginBottom: \"20px\" }}>\n              <Input\n                value={feilds?.batch_end_time}\n                style={{ width: \"100%\" }}\n                onChange={(e, data) =>\n                  onHandleChange(data.value, \"batch_end_time\")\n                }\n              />\n            </div>\n            <div style={{ marginBottom: \"20px\" }}>\n              <Dropdown\n                fluid\n                selection\n                placeholder=\"Change Mentor\"\n                options={mentor_list}\n                value={feilds?.batch_mentor_id}\n                onChange={(e, data) =>\n                  onHandleChange(data.value, \"batch_mentor_id\")\n                }\n              />\n            </div>\n            <div style={{ marginBottom: \"20px\" }}>\n              <Input\n                value={feilds?.class_link}\n                style={{ width: \"100%\" }}\n                onChange={(e, data) => onHandleChange(data.value, \"class_link\")}\n              />\n            </div>\n          </Modal.Description>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button\n            color=\"orange\"\n            loading={loading}\n            onClick={() => onCreateClass()}\n          >\n            Create Class\n          </Button>\n          <Button\n            content=\"Update Class\"\n            labelPosition=\"right\"\n            icon=\"checkmark\"\n            onClick={() => onUpdateClass()}\n            positive\n            loading={loading}\n          />\n        </Modal.Actions>\n      </Modal>\n    );\n  };\n  const dashboardData = studentDashboardState.mentorDashboardData;\n  if (dashboardData.batch_details?.length == 0) {\n    return (\n      <div\n        style={{\n          height: isMobileView ? \"300px\" : \"700px\",\n          width: isMobileView ? \"300px\" : \"700px\",\n          margin: \"auto\"\n        }}\n      >\n        <Image\n          src=\"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Fno_data.png?alt=media&token=79834bd2-97fa-4f63-897f-fe9498236194\"\n          alt=\"tremendo dashboard banner\"\n          height={isMobileView ? \"300px\" : \"800px\"}\n          width={isMobileView ? \"300px\" : \"700px\"}\n          className={styles.banner}\n        />\n      </div>\n    );\n  }\n\n  if (studentDashboardState.mentorDashboardDataLoading) {\n    return <StudentDashboardSkelton />;\n  }\n\n  const attendencePercentage =\n    (dashboardData.attandance_data?.present_count /\n      (dashboardData.attandance_data?.present_count +\n        dashboardData.attandance_data?.absent_count)) *\n    100;\n  const chartLabel = dashboardData.progress_data?.map(i => i.user_name);\n  const marks = dashboardData.progress_data?.map(i => i.student_score);\n\n  let classesArray = [];\n  days.forEach((i, index) =>\n    dashboardData.batch_details?.forEach(j => {\n      if (moment(j.class_date).isoWeekday() == index + 1) {\n        classesArray.push({ day_name: i, data: { ...j } });\n      } else {\n        classesArray.push({ day_name: i, data: null });\n      }\n    })\n  );\n  const batch_days = dashboardData.batch_data?.batch_class_days?.split(\",\");\n  const checkTodaysClassValidate = dashboardData.class_details?.find(\n    i => moment(i.class_date).isoWeekday() == currentDay\n  );\n\n  return (\n    <div className={styles.base}>\n      <div className={styles.chartHeading}>Batch Details</div>\n      <div className={styles.dateMonthHeading}>\n        <div className={styles.courseName}>Date</div>\n        <div className={styles.batchName}>{moment().format(\"MMM\")}</div>\n      </div>\n      <div className={styles.datesWrapper}>\n        {totalDatesInCurrentMonth.map(i => (\n          <div\n            className={styles.date}\n            style={{ backgroundColor: currentDate == i + 1 && \"#fa9116\" }}\n            key={i}\n            id={currentDate == i + 1 ? \"currentDate\" : \"otherDate\"}\n          >\n            {i + 1}\n          </div>\n        ))}\n      </div>\n\n      {days.map((i, index) => (\n        <div className={styles.courseDetailSection} key={index}>\n          <div\n            className={styles.detailsWrapper}\n            style={{\n              backgroundColor:\n                !batch_days?.includes(i) || currentDay > index + 1\n                  ? \"#f2efef\"\n                  : \"#25b1ae\"\n            }}\n          >\n            <div className={styles.batchCode}>\n              {isMobileView ? i.substring(0, 3) : i}\n            </div>\n\n            <div className={styles.batchCode}>\n              {dashboardData.batch_data?.batch_mentor}\n            </div>\n\n            <div className={styles.timeCode}>\n              {`${dashboardData.batch_data?.batch_start_time} - ${dashboardData.batch_data?.batch_end_time}`}\n            </div>\n            <div className={styles.batchCode}>\n              <ButtonComponent\n                label={\n                  !batch_days?.includes(i) || currentDay > index + 1\n                    ? \"Finished\"\n                    : checkTodaysClassValidate\n                    ? \"Go To Link\"\n                    : \"Get Started\"\n                }\n                height={33}\n                borderRadius={16}\n                backgroundColor={\n                  !batch_days?.includes(i) || currentDay > index + 1\n                    ? \"#e6e4e4\"\n                    : \"#51faf6\"\n                }\n                textStyle={{\n                  color: \"#000\",\n                  fontWeight: \"bold\",\n                  fontFamily: \"Open Sans\",\n                  fontSize: isMobileView ? \"10px\" : \"15px\"\n                }}\n                border=\"none\"\n                onClick={\n                  checkTodaysClassValidate\n                    ? () => goToLink(checkTodaysClassValidate.class_link)\n                    : () => onClickStartClass()\n                }\n              />\n            </div>\n            {(!batch_days?.includes(i) || currentDay > index + 1) && (\n              <div className={styles.overlay}></div>\n            )}\n          </div>\n        </div>\n      ))}\n      <div className={styles.chartWrapper}>\n        <div className={styles.progressChart}>\n          <div className={styles.chartHeading}>Progress</div>\n          <div className={styles.progressChartBox}>\n            <div className={styles.barChart}>\n              <Bar\n                data={{\n                  labels: chartLabel,\n                  datasets: [\n                    {\n                      data: marks,\n                      backgroundColor: [\n                        \"#8BDCDB\",\n                        \"#8BDCDB\",\n                        \"#8BDCDB\",\n                        \"#8BDCDB\",\n                        \"#8BDCDB\",\n                        \"#8BDCDB\",\n                        \"#8BDCDB\",\n                        \"#8BDCDB\"\n                      ],\n                      order: 2\n                    },\n                    {\n                      data: marks,\n                      backgroundColor: \"#fff\",\n                      borderColor: \"#fa9116\",\n                      order: 1,\n                      type: \"line\"\n                    }\n                  ]\n                }}\n                options={options}\n              />\n            </div>\n          </div>\n        </div>\n        <div className={styles.attendenceChart}>\n          <div className={styles.chartHeading}>Attendance</div>\n          <div className={styles.canvasWrap}>\n            <canvas\n              id=\"canvas\"\n              width=\"240\"\n              height=\"240\"\n              data-percent={attendencePercentage}\n            ></canvas>\n            <div className={styles.showProgress} id=\"procent\"></div>\n          </div>\n        </div>\n      </div>\n      {startClassModal()}\n    </div>\n  );\n}\n","/home/tthinksys/tremendo_frontend/components/Dashboard/StudentDashboardSkelton.js",[],"/home/tthinksys/tremendo_frontend/components/DeviceCheck/DesktopOnly.js",[],"/home/tthinksys/tremendo_frontend/components/DeviceCheck/MobileOnly.js",[],"/home/tthinksys/tremendo_frontend/components/FacebookLogin/FacebookLogin.js",[],"/home/tthinksys/tremendo_frontend/components/FaqTab/FaqTab.js",[],"/home/tthinksys/tremendo_frontend/components/FaqTab/MentorFaq.js",[],"/home/tthinksys/tremendo_frontend/components/FaqsStrip/FaqsStrip.js",[],"/home/tthinksys/tremendo_frontend/components/FlagWrapper/FlagWrapper.js",[],"/home/tthinksys/tremendo_frontend/components/FlagWrapper/FlagWrapperSkelton.js",[],"/home/tthinksys/tremendo_frontend/components/Footer/Footer.js",[],"/home/tthinksys/tremendo_frontend/components/Icons/Icons.js",[],"/home/tthinksys/tremendo_frontend/components/Image/Image.js",["308"],"import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./Image.module.css\";\nimport VisibilityChild from \"../VisibilityChild/VisibilityChild\";\n\nconst LOADING = \"loading\";\nconst LOADED = \"loaded\";\nconst ERROR = \"error\";\n\nconst colors = [\"#f4fff9\", \"#ffedf3\", \"#fff2df\", \"#e5f1ff\", \"#f0f7f1\"];\nexport default class Image extends React.Component {\n  state = {\n    status: LOADING,\n    colorIndex: Math.floor(Math.random() * 5),\n    showFallbackImage: false\n  };\n  componentDidUpdate(prevProps) {\n    if (prevProps.src !== this.props.src) {\n      this.setState({\n        status: LOADING\n      });\n    }\n  }\n  onLoad = () => {\n    this.setState({ status: LOADED });\n  };\n  onError = () => {\n    if (this.props.fallbackUrl && !this.state.showFallbackImage) {\n      this.setState({ status: LOADING, showFallbackImage: true });\n    } else {\n      this.setState({ status: ERROR });\n    }\n  };\n  style = loading => {\n    return {\n      transition: \"opacity .5s linear\",\n      opacity: `${loading === LOADING ? 0 : 1}`\n    };\n  };\n  render() {\n    let { className, loadedClassName, loadingClassName, ...props } = this.props;\n    className = `${className} ${\n      this.state.status === LOADED ? loadedClassName : loadingClassName\n    }`;\n    return (\n      <VisibilityChild\n        minHeight={this.props.paddingBottom}\n        backgroundColor={colors[this.state.colorIndex]}\n      >\n        <div\n          className={styles.imgContainer}\n          style={{\n            paddingBottom: this.props.paddingBottom,\n            background:\n              this.props.showBackgroundColor && this.state.status !== LOADED\n                ? colors[this.state.colorIndex]\n                : \"none\"\n          }}\n        >\n          {this.state.status === ERROR ? (\n            <div />\n          ) : (\n            <img\n              src={this.props.src}\n              style={this.style(this.state.status)}\n              onClick={this.props.onClick}\n              className={className}\n              onLoad={this.onLoad}\n              onError={this.onError}\n              alt={this.props.alt ? this.props.alt : \"Images\"}\n            />\n          )}\n        </div>\n      </VisibilityChild>\n    );\n  }\n}\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  height: PropTypes.string,\n  verticallyCenter: PropTypes.bool,\n  style: PropTypes.object,\n  paddingBottom: PropTypes.string,\n  showBackgroundColor: PropTypes.bool\n};\nImage.defaultProps = {\n  height: \"auto\",\n  verticallyCenter: false,\n  style: {},\n  className: \"\",\n  loadingClassName: \"img-loading\",\n  loadedClassName: \"img-loaded\",\n  paddingBottom: \"100%\",\n  showBackgroundColor: true\n};\n","/home/tthinksys/tremendo_frontend/components/Input/Input.js",[],"/home/tthinksys/tremendo_frontend/components/LanguageEdit/LanguageEdit.js",["309","310"],"import styles from \"./LanguageEdit.module.css\";\nimport { useContext, useEffect, useState, useRef } from \"react\";\nimport { Dropdown, Image, Icon, Modal, Input, Button } from \"semantic-ui-react\";\nimport ButtonComponent from \"../Button/Button\";\nimport { GlobalContext } from \"../../Context/Provider\";\nimport { getLangaugeDetails } from \"../../Context/Actions/Language/LanguageAction\";\nimport PageLoader from \"../Loader/PageLoader\";\nimport jsCookie from \"js-cookie\";\nimport { COOKIE_TOKEN } from \"../../utils/constants\";\nimport axiosInstance from \"../../utils/axiosInstance\";\nimport { getLanguages } from \"../../Context/Actions/Home/HomeAction\";\nimport { storage } from \"../../utils/firebase-config\";\n\nconst EDIT = \"Edit\";\nconst ADD = \"Add\";\n\nexport default function LanguageEdit({}) {\n  const fileFlagRef = useRef(null);\n  const bannerDestopRef = useRef(null);\n  const bannerMobileRef = useRef(null);\n  const banner1Ref = useRef(null);\n  const banner2Ref = useRef(null);\n  const {\n    homeState,\n    languageState,\n    languageDispatch: dispatch,\n    homeDispatch: homeDispatch\n  } = useContext(GlobalContext);\n  const [feilds, setFeilds] = useState({});\n  const [addLangFeilds, setAddLangFeilds] = useState({});\n  const [openModal, setOpenModal] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [uploadLoader, setUploadLoader] = useState(\"\");\n  const [selectedLangId, setSelectedLangId] = useState(\"\");\n\n  const details = languageState.getLanguageDetails;\n  useEffect(() => {\n    const id = homeState.getLanguage[0]?.languge_id;\n    setSelectedLangId(id);\n    getLangaugeDetails(id)(dispatch);\n  }, []);\n  useEffect(() => {\n    setFieldsIntoState();\n  }, [details]);\n  const onChangeLanguage = data => {\n    setSelectedLangId(data.value);\n    getLangaugeDetails(data.value)(dispatch);\n  };\n  const setFieldsIntoState = () => {\n    setFeilds({\n      ...feilds,\n      title: details.culture?.title,\n      description: details.culture?.description\n    });\n  };\n  const uploadFiles = (image, type) => {\n    setUploadLoader(type);\n    const uploadTask = storage.ref(`images/${image.name}`).put(image);\n    uploadTask.on(\n      \"state_changed\",\n      snapshot => {\n        const progress = Math.round(\n          (snapshot.bytesTransferred / snapshot.totalBytes) * 100\n        );\n      },\n      error => {\n        setUploadLoader(\"\");\n        console.log(error);\n      },\n      () => {\n        storage\n          .ref(\"images\")\n          .child(image.name)\n          .getDownloadURL()\n          .then(url => {\n            console.log(type, \"type\");\n            setUploadLoader(\"\");\n            setAddLangFeilds({ ...addLangFeilds, [type]: url });\n          });\n      }\n    );\n  };\n\n  const onChangeLanguageFeild = (data, type) => {\n    setAddLangFeilds({ ...addLangFeilds, [type]: data.value });\n  };\n  const newLanguages = homeState.getLanguage.map(lang => {\n    return {\n      text: lang.title,\n      value: lang.languge_id\n    };\n  });\n  const onEditLang = () => {\n    setAddLangFeilds({\n      ...details,\n      lang_code: details.code,\n      culture_title: details.culture.title,\n      culture_description: details.culture.description,\n      culture_banner1_title: details.culture.banners[0].title,\n      culture_banner1_description: details.culture.banners[0].description,\n      culture_banner1_image_url: details.culture.banners[0].image_url,\n      culture_banner2_title: details.culture.banners[1].title,\n      culture_banner2_description: details.culture.banners[1].description,\n      culture_banner2_image_url: details.culture.banners[1].image_url\n    });\n    setOpenModal(EDIT);\n  };\n  const onCloseModal = () => {\n    setOpenModal(null);\n    setAddLangFeilds({});\n  };\n\n  const onAddLanguage = async () => {\n    setLoading(true);\n    const updatePayload = {\n      access_token: jsCookie.get(COOKIE_TOKEN),\n      language_id: addLangFeilds.languge_id,\n      lang_code: addLangFeilds.lang_code,\n      title: addLangFeilds.title,\n      description: \"description\",\n      flag_url: addLangFeilds.flag_url,\n      welcome_text: addLangFeilds.welcome_text,\n      banner_large: addLangFeilds.banner_large,\n      banner_small: addLangFeilds.banner_small,\n      culture_title: addLangFeilds.culture_title,\n      culture_description: addLangFeilds.culture_description,\n      culture_banner1_title: addLangFeilds.culture_banner1_title,\n      culture_banner1_description: addLangFeilds.culture_banner1_description,\n      culture_banner1_image_url: addLangFeilds.culture_banner1_image_url,\n      culture_banner2_title: addLangFeilds.culture_banner2_title,\n      culture_banner2_description: addLangFeilds.culture_banner2_description,\n      culture_banner2_image_url: addLangFeilds.culture_banner2_image_url\n    };\n    if (openModal == ADD) {\n      delete updatePayload.language_id;\n      try {\n        const response = await axiosInstance.post(\n          `/addLanguages`,\n          updatePayload\n        );\n        await getLanguages()(homeDispatch);\n        setLoading(false);\n        getLangaugeDetails(selectedLangId)(dispatch);\n        onCloseModal();\n      } catch (err) {\n        setLoading(false);\n        onCloseModal();\n      }\n    } else {\n      try {\n        const response = await axiosInstance.post(\n          `/updateLanguageDetails`,\n          updatePayload\n        );\n        await getLanguages()(homeDispatch);\n        setLoading(false);\n        getLangaugeDetails(selectedLangId)(dispatch);\n        onCloseModal();\n      } catch (err) {\n        setLoading(false);\n        onCloseModal();\n      }\n    }\n  };\n\n  const onDeleteLang = async () => {\n    setLoading(true);\n    const id = homeState.getLanguage[0]?.languge_id;\n    try {\n      const response = await axiosInstance.delete(\n        `/deleteLanguage?access_token=${jsCookie.get(\n          COOKIE_TOKEN\n        )}&languageId=${selectedLangId}`\n      );\n      await getLanguages()(homeDispatch);\n      setLoading(false);\n      getLangaugeDetails(id)(dispatch);\n      setSelectedLangId(id);\n    } catch (err) {\n      setLoading(false);\n    }\n  };\n  const fileChangeFlagUrl = event => {\n    uploadFiles(event.target.files[0], \"flag_url\");\n  };\n  const bannerLargeChange = event => {\n    uploadFiles(event.target.files[0], \"banner_large\");\n  };\n  const bannerSmallChange = event => {\n    uploadFiles(event.target.files[0], \"banner_small\");\n  };\n  const banner1OnChange = event => {\n    uploadFiles(event.target.files[0], \"culture_banner1_image_url\");\n  };\n  const banner2OnChange = event => {\n    uploadFiles(event.target.files[0], \"culture_banner2_image_url\");\n  };\n\n  const openAddLanguageModal = () => {\n    return (\n      <Modal\n        onClose={() => onCloseModal()}\n        open={openModal != null ? true : false}\n        closeIcon\n        size={\"tiny\"}\n      >\n        <Modal.Header>{`${openModal} Language`}</Modal.Header>\n        <Modal.Content>\n          <Modal.Description>\n            <div style={{ marginBottom: \"20px\" }}>\n              <Input\n                placeholder=\"Language Name\"\n                onChange={(e, data) => onChangeLanguageFeild(data, \"title\")}\n                style={{ width: \"100%\" }}\n                value={addLangFeilds.title}\n              />\n            </div>\n            <div style={{ marginBottom: \"20px\" }}>\n              <Input\n                placeholder=\"Language Code\"\n                onChange={(e, data) => onChangeLanguageFeild(data, \"lang_code\")}\n                style={{ width: \"100%\" }}\n                value={addLangFeilds.lang_code}\n              />\n            </div>\n            <div\n              style={{\n                marginBottom: \"20px\",\n                display: \"flex\",\n                justifyContent: \"space-between\"\n              }}\n            >\n              <Input\n                placeholder=\"Flag Url\"\n                onChange={(e, data) => onChangeLanguageFeild(data, \"flag_url\")}\n                style={{ width: \"50%\" }}\n                value={addLangFeilds.flag_url}\n              />\n              <div>\n                <Button\n                  content=\"Choose File\"\n                  labelPosition=\"left\"\n                  icon=\"file\"\n                  disabled={uploadLoader ? true : false}\n                  loading={uploadLoader == \"flag_url\"}\n                  onClick={() => fileFlagRef.current.click()}\n                />\n                <input\n                  ref={fileFlagRef}\n                  type=\"file\"\n                  hidden\n                  accept=\"image/x-png,image/gif,image/jpeg\"\n                  onChange={event => fileChangeFlagUrl(event)}\n                />\n              </div>\n            </div>\n            <div style={{ marginBottom: \"20px\" }}>\n              <Input\n                placeholder=\"Welcome Text\"\n                onChange={(e, data) =>\n                  onChangeLanguageFeild(data, \"welcome_text\")\n                }\n                style={{ width: \"100%\" }}\n                value={addLangFeilds.welcome_text}\n              />\n            </div>\n            <div\n              style={{\n                marginBottom: \"20px\",\n                display: \"flex\",\n                justifyContent: \"space-between\"\n              }}\n            >\n              <Input\n                placeholder=\"Banner Image URL For Desktop\"\n                onChange={(e, data) =>\n                  onChangeLanguageFeild(data, \"banner_large\")\n                }\n                style={{ width: \"50%\" }}\n                value={addLangFeilds.banner_large}\n              />\n              <div>\n                <Button\n                  content=\"Choose File\"\n                  labelPosition=\"left\"\n                  icon=\"file\"\n                  disabled={uploadLoader ? true : false}\n                  loading={uploadLoader == \"banner_large\"}\n                  onClick={() => bannerDestopRef.current.click()}\n                />\n                <input\n                  ref={bannerDestopRef}\n                  type=\"file\"\n                  hidden\n                  accept=\"image/x-png,image/gif,image/jpeg\"\n                  onChange={event => bannerLargeChange(event)}\n                />\n              </div>\n            </div>\n            <div\n              style={{\n                marginBottom: \"20px\",\n                display: \"flex\",\n                justifyContent: \"space-between\"\n              }}\n            >\n              <Input\n                placeholder=\"Banner Image URL For Mobile\"\n                onChange={(e, data) =>\n                  onChangeLanguageFeild(data, \"banner_small\")\n                }\n                style={{ width: \"50%\" }}\n                value={addLangFeilds.banner_small}\n              />\n              <div>\n                <Button\n                  content=\"Choose File\"\n                  labelPosition=\"left\"\n                  icon=\"file\"\n                  disabled={uploadLoader ? true : false}\n                  loading={uploadLoader == \"banner_small\"}\n                  onClick={() => bannerMobileRef.current.click()}\n                />\n                <input\n                  ref={bannerMobileRef}\n                  type=\"file\"\n                  hidden\n                  accept=\"image/x-png,image/gif,image/jpeg\"\n                  onChange={event => bannerSmallChange(event)}\n                />\n              </div>\n            </div>\n            <div style={{ marginBottom: \"20px\" }}>\n              <Input\n                placeholder=\"Title\"\n                onChange={(e, data) =>\n                  onChangeLanguageFeild(data, \"culture_title\")\n                }\n                style={{ width: \"100%\" }}\n                value={addLangFeilds.culture_title}\n              />\n            </div>\n            <div style={{ marginBottom: \"20px\" }}>\n              <Input\n                placeholder=\"Description\"\n                onChange={(e, data) =>\n                  onChangeLanguageFeild(data, \"culture_description\")\n                }\n                style={{ width: \"100%\" }}\n                value={addLangFeilds.culture_description}\n              />\n            </div>\n            <div\n              style={{\n                marginBottom: \"20px\",\n                display: \"flex\",\n                justifyContent: \"space-between\"\n              }}\n            >\n              <Input\n                placeholder=\"Banner 1 image URL\"\n                onChange={(e, data) =>\n                  onChangeLanguageFeild(data, \"culture_banner1_image_url\")\n                }\n                style={{ width: \"50%\" }}\n                value={addLangFeilds.culture_banner1_image_url}\n              />\n              <div>\n                <Button\n                  content=\"Choose File\"\n                  labelPosition=\"left\"\n                  icon=\"file\"\n                  disabled={uploadLoader ? true : false}\n                  loading={uploadLoader == \"culture_banner1_image_url\"}\n                  onClick={() => banner1Ref.current.click()}\n                />\n                <input\n                  ref={banner1Ref}\n                  type=\"file\"\n                  hidden\n                  accept=\"image/x-png,image/gif,image/jpeg\"\n                  onChange={event => banner1OnChange(event)}\n                />\n              </div>\n            </div>\n            <div style={{ marginBottom: \"20px\" }}>\n              <Input\n                placeholder=\"Banner 1 Title\"\n                onChange={(e, data) =>\n                  onChangeLanguageFeild(data, \"culture_banner1_title\")\n                }\n                style={{ width: \"100%\" }}\n                value={addLangFeilds.culture_banner1_title}\n              />\n            </div>\n            <div style={{ marginBottom: \"20px\" }}>\n              <Input\n                placeholder=\"Banner 1 Description\"\n                onChange={(e, data) =>\n                  onChangeLanguageFeild(data, \"culture_banner1_description\")\n                }\n                style={{ width: \"100%\" }}\n                value={addLangFeilds.culture_banner1_description}\n              />\n            </div>\n            <div\n              style={{\n                marginBottom: \"20px\",\n                display: \"flex\",\n                justifyContent: \"space-between\"\n              }}\n            >\n              <Input\n                placeholder=\"Banner 2 image URL\"\n                onChange={(e, data) =>\n                  onChangeLanguageFeild(data, \"culture_banner2_image_url\")\n                }\n                style={{ width: \"50%\" }}\n                value={addLangFeilds.culture_banner2_image_url}\n              />\n              <div>\n                <Button\n                  content=\"Choose File\"\n                  labelPosition=\"left\"\n                  icon=\"file\"\n                  disabled={uploadLoader ? true : false}\n                  loading={uploadLoader == \"culture_banner2_image_url\"}\n                  onClick={() => banner2Ref.current.click()}\n                />\n                <input\n                  ref={banner2Ref}\n                  type=\"file\"\n                  hidden\n                  accept=\"image/x-png,image/gif,image/jpeg\"\n                  onChange={event => banner2OnChange(event)}\n                />\n              </div>\n            </div>\n            <div style={{ marginBottom: \"20px\" }}>\n              <Input\n                placeholder=\"Banner 2 Title\"\n                onChange={(e, data) =>\n                  onChangeLanguageFeild(data, \"culture_banner2_title\")\n                }\n                style={{ width: \"100%\" }}\n                value={addLangFeilds.culture_banner2_title}\n              />\n            </div>\n            <div style={{ marginBottom: \"20px\" }}>\n              <Input\n                placeholder=\"Banner 2 Description\"\n                onChange={(e, data) =>\n                  onChangeLanguageFeild(data, \"culture_banner2_description\")\n                }\n                style={{ width: \"100%\" }}\n                value={addLangFeilds.culture_banner2_description}\n              />\n            </div>\n          </Modal.Description>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button color=\"black\" onClick={() => onCloseModal()}>\n            Close\n          </Button>\n          <Button\n            content={`${openModal} Language`}\n            labelPosition=\"right\"\n            icon=\"checkmark\"\n            onClick={() => onAddLanguage()}\n            positive\n            loading={loading}\n          />\n        </Modal.Actions>\n      </Modal>\n    );\n  };\n  return (\n    <>\n      {languageState.getLangaugeDetailsLoading && <PageLoader />}\n      <div className={styles.base}>\n        <div className={styles.dropdownBtnWrapper}>\n          <div className={styles.batchSelect}>\n            <Dropdown\n              className={styles.batchedDropdown}\n              fluid\n              selection\n              defaultValue={newLanguages[0]?.value}\n              options={newLanguages}\n              onChange={(event, data) => onChangeLanguage(data)}\n            />\n          </div>\n          <div className={styles.addNewbtn}>\n            <ButtonComponent\n              label={\"Add new\"}\n              height={39}\n              backgroundColor={\"#f7e903\"}\n              textStyle={{\n                color: \"#000\",\n                fontWeight: \"bold\",\n                fontFamily: \"Poppins\",\n                fontSize: \"18px\"\n              }}\n              border=\"none\"\n              onClick={() => setOpenModal(ADD)}\n            />\n          </div>\n        </div>\n        <div className={styles.bannerWrapper}>\n          {/* <div className={styles.overlay}>\n            <div className={styles.uploadIcon}>\n              <Icon name=\"cloud upload\" size=\"huge\" color=\"#fff\" />\n            </div>\n          </div> */}\n          <Image src={details.banner_large} alt=\"banner\" />\n        </div>\n        <div className={styles.title}>{details.culture?.title}</div>\n        <div className={styles.description}>{details.culture?.description}</div>\n        <div className={styles.boxWrapper}>\n          {details.culture?.banners.map((i, index) => (\n            <div\n              className={styles.boxBase}\n              style={{ backgroundColor: i.bg_color }}\n              key={index}\n            >\n              <div className={styles.boxImage}>\n                {/* <div\n                  className={styles.overlay}\n                  style={{ borderRadius: \"20px\", opacity: \"0.7\" }}\n                >\n                  <div className={styles.uploadIcon}>\n                    <Icon name=\"cloud upload\" size=\"huge\" />\n                  </div>\n                </div> */}\n                <Image alt=\"\" src={i.image_url} />\n              </div>\n              <div\n                className={styles.boxHeading}\n                style={{ color: i.text_color }}\n              >\n                {i.title}\n              </div>\n              <div\n                className={styles.boxDescription}\n                style={{ color: i.text_color }}\n              >\n                {i.description}\n              </div>\n            </div>\n          ))}\n        </div>\n        <div className={styles.saveAndDeleteBtn}>\n          <div className={styles.saveBtn}>\n            <ButtonComponent\n              label={\"Edit\"}\n              height={39}\n              backgroundColor={\"#f78f1e\"}\n              textStyle={{\n                color: \"#fff\",\n                fontWeight: \"bold\",\n                fontFamily: \"Poppins\",\n                fontSize: \"18px\"\n              }}\n              border=\"none\"\n              onClick={() => onEditLang()}\n            />\n          </div>\n          <div className={styles.deleteBtn}>\n            <ButtonComponent\n              label={\"Delete\"}\n              height={39}\n              backgroundColor={\"#ffebd6\"}\n              textStyle={{\n                color: \"#ff8b0d\",\n                fontWeight: \"bold\",\n                fontFamily: \"Poppins\",\n                fontSize: \"18px\"\n              }}\n              loading={loading}\n              border=\"none\"\n              onClick={() => onDeleteLang()}\n            />\n          </div>\n        </div>\n      </div>\n      {openModal != null && openAddLanguageModal()}\n    </>\n  );\n}\n","/home/tthinksys/tremendo_frontend/components/Loader/PageLoader.js",[],"/home/tthinksys/tremendo_frontend/components/MyResourceTab/MentorMyResource.js",["311"],"import styles from \"./MentorMyResource.module.css\";\nimport { useEffect, useState, useRef } from \"react\";\nimport {\n  Image,\n  Popup,\n  Icon,\n  Modal,\n  Button,\n  Input,\n  Dropdown,\n  Dimmer,\n  Loader,\n  Message\n} from \"semantic-ui-react\";\nimport IconComponent from \"../../assets/Icon/Icon\";\nimport { useContext } from \"react\";\nimport { DeviceContext } from \"../../pages/_app\";\nimport ButtonComponent from \"../Button/Button\";\nimport DatePicker from \"react-datepicker\";\nimport moment from \"moment\";\nimport jsCookie from \"js-cookie\";\nimport { COOKIE_TOKEN } from \"../../utils/constants\";\nimport axiosInstance from \"../../utils/axiosInstance\";\nimport { GlobalContext } from \"../../Context/Provider\";\nimport {\n  deleteAssignment,\n  getMentorAssignmentList,\n  getMentorDashboardData,\n  getSubmittedAssignmentList,\n  updateStudentAssignmentScore\n} from \"../../Context/Actions/Dashboard/DashboardAction\";\nimport StudentDashboardSkelton from \"../Dashboard/StudentDashboardSkelton\";\nimport { storage } from \"../../utils/firebase-config\";\n\nconst IDLE_STATUS = \"idle\";\nconst UPLOAD_STATUS = \"published\";\nexport default function MentorMyResource() {\n  const uploadAssignmentRef = useRef(null);\n  const uploadSyllabusRef = useRef(null);\n  const uploadEbookRef = useRef(null);\n  const { isMobileView } = useContext(DeviceContext);\n  const {\n    studentDashboardState,\n    languageState,\n    studentDashboardDispatch: dispatch\n  } = useContext(GlobalContext);\n  const [openModal, setOpenModal] = useState(false);\n  const [studentAssignmentListModal, setStudentAssignmentListModal] = useState(\n    false\n  );\n  const [loading, setLoading] = useState(false);\n  const [uploadLoading, setUploadLoading] = useState(\"\");\n  const [feilds, setFeilds] = useState({});\n  const [openUploadModal, setOpenUploadModal] = useState(false);\n  const [scoreList, setScoreList] = useState({});\n  // if (true) {\n  //   return (\n  //     <div\n  //       style={{\n  //         height: isMobileView ? \"300px\" : \"700px\",\n  //         width: isMobileView ? \"300px\" : \"700px\",\n  //         margin: \"auto\"\n  //       }}\n  //     >\n  //       <Image\n  //         src=\"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Fno_data.png?alt=media&token=79834bd2-97fa-4f63-897f-fe9498236194\"\n  //         alt=\"tremendo dashboard banner\"\n  //         height={isMobileView ? \"300px\" : \"800px\"}\n  //         width={isMobileView ? \"300px\" : \"700px\"}\n  //         className={styles.banner}\n  //       />\n  //     </div>\n  //   );\n  // }\n  useEffect(() => {\n    getDashboardData();\n    getMentorAssignmentList(languageState.storedMentorBatch.batch_id)(dispatch);\n  }, []);\n\n  const uploadFiles = (image, type) => {\n    setUploadLoading(type);\n    const uploadTask = storage.ref(`docs/${image.name}`).put(image);\n    uploadTask.on(\n      \"state_changed\",\n      snapshot => {\n        const progress = Math.round(\n          (snapshot.bytesTransferred / snapshot.totalBytes) * 100\n        );\n        console.log(\"here\");\n      },\n      error => {\n        setUploadLoading(\"\");\n        console.log(error, \"error\");\n      },\n      () => {\n        storage\n          .ref(\"docs\")\n          .child(image.name)\n          .getDownloadURL()\n          .then(url => {\n            setFeilds({ ...feilds, [type]: url });\n            setUploadLoading(\"\");\n          });\n      }\n    );\n  };\n\n  const onChangeScore = (value, type) => {\n    setScoreList({ ...scoreList, [type]: value });\n  };\n  const updateAssignmentScore = async i => {\n    const payload = {\n      access_token: jsCookie.get(COOKIE_TOKEN),\n      student_assignment_id: i.student_assignment_id,\n      student_user_id: i.user_id,\n      score: scoreList[i.user_id],\n      assignment_id: i.assignment_id\n    };\n    updateStudentAssignmentScore(payload)(dispatch);\n  };\n  console.log(scoreList);\n\n  const getDashboardData = async () => {\n    const curr = new Date(); // get current date\n    const first = curr.getDate() - curr.getDay(); // First day is the day of the month - the day of the week\n    const last = first + 6; // last day is the first day + 6\n\n    const firstday = moment(new Date(curr.setDate(first))).format(\"x\");\n    const lastday = moment(new Date(curr.setDate(last))).format(\"x\");\n\n    const id =\n      studentDashboardState.mentorBatches.length > 0 &&\n      studentDashboardState.mentorBatches[0].batch_id;\n    await getMentorDashboardData(id, firstday, lastday)(dispatch);\n  };\n  const onHandleChange = (data, type) => {\n    setFeilds({ ...feilds, [type]: data });\n  };\n  const addAssignmentBtn = async () => {\n    setLoading(true);\n    const payload = {\n      access_token: jsCookie.get(COOKIE_TOKEN),\n      batch_id: studentDashboardState.mentorDashboardData.batch_data.batch_id,\n      assignment_lang:\n        studentDashboardState.mentorDashboardData.batch_data.batch_language,\n      lang_code:\n        studentDashboardState.mentorDashboardData.batch_data.language_code,\n      ...feilds\n    };\n    try {\n      const response = await axiosInstance.post(\n        `/createCourseAssignment`,\n        payload\n      );\n      await getMentorAssignmentList()(dispatch);\n      setOpenModal(false);\n      setLoading(false);\n      setFeilds({});\n    } catch (err) {\n      setOpenModal(false);\n      setLoading(false);\n    }\n  };\n  const uploadSyllabusEbook = async () => {\n    setLoading(true);\n    const payload = {\n      access_token: jsCookie.get(COOKIE_TOKEN),\n      batch_id: studentDashboardState.mentorDashboardData.batch_data.batch_id,\n      syllabus_url: feilds.syllabus_url,\n      e_book_url: feilds.e_book_url\n    };\n    try {\n      const response = await axiosInstance.post(`/updateBatchEBook`, payload);\n\n      setOpenUploadModal(false);\n      setLoading(false);\n      setFeilds({});\n    } catch (err) {\n      setOpenUploadModal(false);\n      setLoading(false);\n    }\n  };\n  const DateInput = ({ value, onClick, placeholder }) => {\n    return (\n      <button\n        className={styles.dateInput}\n        style={{\n          width: \"100%\",\n          fontSize: \"12px\",\n          color: \"#66666d\",\n          border: \"1px solid #cecedc\",\n          height: \"31px\",\n          paddingLeft: \"8px\",\n          fontFamily: \"Poppins\",\n          backgroundColor: \"#f8f8fa\",\n          textAlign: \"left\"\n        }}\n        onClick={onClick}\n      >\n        {value ? value : placeholder}\n      </button>\n    );\n  };\n  const uploadAssignment = e => {\n    uploadFiles(e.target.files[0], \"doc_urls\");\n  };\n  const uploadSyllabusUrl = e => {\n    uploadFiles(e.target.files[0], \"syllabus_url\");\n  };\n  const uploadEbookUrl = e => {\n    uploadFiles(e.target.files[0], \"e_book_url\");\n  };\n\n  const addAssignment = () => {\n    return (\n      <Modal\n        onClose={() => setOpenModal(false)}\n        open={openModal}\n        closeIcon\n        size={\"tiny\"}\n      >\n        <Modal.Header>Add Assignment</Modal.Header>\n        <Modal.Content>\n          <Modal.Description>\n            <div style={{ marginBottom: \"20px\" }}>\n              <Input\n                value={feilds?.title}\n                style={{ width: \"100%\" }}\n                placeholder=\"Assignment Title\"\n                onChange={(e, data) => onHandleChange(data.value, \"title\")}\n              />\n            </div>\n            <div style={{ marginBottom: \"20px\" }}>\n              <Input\n                value={feilds?.desc}\n                style={{ width: \"100%\" }}\n                placeholder=\"Assignment Description\"\n                onChange={(e, data) => onHandleChange(data.value, \"desc\")}\n              />\n            </div>\n            <div style={{ marginBottom: \"20px\" }}>\n              <DatePicker\n                selected={feilds.start_date ? moment(feilds.start_date)._d : \"\"}\n                onChange={date =>\n                  onHandleChange(moment(date).format(), \"start_date\")\n                }\n                placeholderText=\"Assignment Start Date\"\n                customInput={<DateInput />}\n                dateFormat=\"MMMM d, yyyy\"\n                minDate={Date.now()}\n                dropdownMode=\"select\"\n              />\n            </div>\n            <div style={{ marginBottom: \"20px\" }}>\n              <DatePicker\n                selected={feilds.due_date ? moment(feilds.due_date)._d : \"\"}\n                onChange={date =>\n                  onHandleChange(moment(date).format(), \"due_date\")\n                }\n                placeholderText=\"Assignment Due Date\"\n                customInput={<DateInput />}\n                dateFormat=\"MMMM d, yyyy\"\n                minDate={Date.now()}\n                dropdownMode=\"select\"\n              />\n            </div>\n            <div\n              style={{\n                marginBottom: \"20px\",\n                display: \"flex\",\n                justifyContent: \"space-between\"\n              }}\n            >\n              <Input\n                value={feilds?.doc_urls}\n                style={{ width: \"50%\" }}\n                placeholder=\"Document Url\"\n                onChange={(e, data) => onHandleChange(data.value, \"doc_urls\")}\n              />\n              <div>\n                <Button\n                  content=\"Choose File\"\n                  labelPosition=\"left\"\n                  icon=\"file\"\n                  loading={uploadLoading == \"doc_urls\"}\n                  onClick={() => uploadAssignmentRef.current.click()}\n                />\n                <input\n                  ref={uploadAssignmentRef}\n                  type=\"file\"\n                  hidden\n                  onChange={event => uploadAssignment(event)}\n                />\n              </div>\n            </div>\n            <div style={{ marginBottom: \"20px\" }}>\n              <Dropdown\n                fluid\n                selection\n                style={{ width: \"100%\" }}\n                placeholder=\"Assignment Type\"\n                options={[\n                  { text: \"Unit Test\", value: \"ut\" },\n                  { text: \"Final Test\", value: \"ft\" }\n                ]}\n                value={feilds?.assigment_type}\n                onChange={(e, data) =>\n                  onHandleChange(data.value, \"assigment_type\")\n                }\n              />\n            </div>\n            <div className={styles.inputCreateWrapper}>\n              <div style={{ width: \"30%\" }}>\n                <Input\n                  placeholder=\"Max Score \"\n                  onChange={(e, data) =>\n                    onHandleChange(data.value, \"max_score\")\n                  }\n                  style={{ width: \"80%\" }}\n                />\n              </div>\n              <div style={{ width: \"30%\" }}>\n                <Input\n                  placeholder=\"Pass Score \"\n                  onChange={(e, data) =>\n                    onHandleChange(data.value, \"pass_score\")\n                  }\n                  style={{ width: \"80%\" }}\n                />\n              </div>\n              <div style={{ width: \"30%\" }}>\n                <Input\n                  placeholder=\"Avg Score \"\n                  onChange={(e, data) =>\n                    onHandleChange(data.value, \"avg_score\")\n                  }\n                  style={{ width: \"80%\" }}\n                />\n              </div>\n            </div>\n          </Modal.Description>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button color=\"red\" onClick={() => setOpenModal(false)}>\n            Close\n          </Button>\n          <Button\n            content=\"Add Assignment\"\n            labelPosition=\"right\"\n            icon=\"checkmark\"\n            onClick={() => addAssignmentBtn()}\n            positive\n            loading={loading}\n          />\n        </Modal.Actions>\n      </Modal>\n    );\n  };\n  const noDataSection = () => {\n    return (\n      <Message>\n        <Message.Header>Oops</Message.Header>\n        <p>None Student Submit There Assignment</p>\n      </Message>\n    );\n  };\n  const studentAssigmentModal = () => {\n    const studentList =\n      studentDashboardState.getSubmittedAssignemntList.student_assignment_list;\n\n    return (\n      <Modal\n        onClose={() => setStudentAssignmentListModal(false)}\n        open={studentAssignmentListModal}\n        closeIcon\n      >\n        <Modal.Header>Student Assignment</Modal.Header>\n        <Modal.Content>\n          <Modal.Description>\n            <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n              <div className={styles.heading}>\n                <span style={{ fontWeight: \"600\" }}>Title</span> :{\" \"}\n                <span>\n                  {studentDashboardState.getSubmittedAssignemntList.title}\n                </span>\n              </div>\n              <div className={styles.heading}>\n                <span style={{ fontWeight: \"600\" }}>Max Score</span> :{\" \"}\n                <span>\n                  {studentDashboardState.getSubmittedAssignemntList.max_score}\n                </span>\n              </div>\n              <div className={styles.heading}>\n                <span style={{ fontWeight: \"600\" }}>Passing Score</span> :{\" \"}\n                <span>\n                  {studentDashboardState.getSubmittedAssignemntList.pass_score}\n                </span>\n              </div>\n            </div>\n            <div className={styles.assigmentListTableHeader}>\n              <div className={styles.tableHeaderName}>Student Name</div>\n              <div className={styles.tableHeaderName}>ID</div>\n              <div className={styles.tableHeaderName}>Download</div>\n              <div className={styles.tableHeaderName}>Marks</div>\n              <div className={styles.tableHeaderName}></div>\n            </div>\n            {studentList?.length > 0 ? (\n              studentList?.map((i, index) => (\n                <div className={styles.assigmentListTableBody} key={index}>\n                  <div className={styles.tableBodyOption}>\n                    {index + 1}. {i.user_name}\n                  </div>\n                  <div className={styles.tableBodyOption}>{i.user_id}</div>\n                  <div className={styles.tableBodyOption}>\n                    <a\n                      href={i.doc_urls}\n                      download=\"assignemnt\"\n                      target={\"_blank\"}\n                      rel=\"noreferrer\"\n                      style={{ cursor: \"pointer\" }}\n                    >\n                      <IconComponent\n                        name=\"downloadIcon\"\n                        width=\"32\"\n                        height=\"32\"\n                      />\n                    </a>\n                  </div>\n                  <div className={styles.tableBodyOption}>\n                    <div>\n                      <Input\n                        // value={i.student_score}\n                        placeholder=\"Score\"\n                        onChange={(e, data) =>\n                          onChangeScore(data.value, i.user_id)\n                        }\n                      />\n                    </div>\n                  </div>\n                  <div className={styles.tableBodyOption}>\n                    <div\n                      style={{\n                        width: \"70%\",\n                        display: \"flex\",\n                        justifyContent: \"flex-end\"\n                      }}\n                    >\n                      <ButtonComponent\n                        label={\"Send\"}\n                        height={25}\n                        borderRadius={8}\n                        backgroundColor={\"#f98e46\"}\n                        textStyle={{\n                          color: \"#fff\",\n                          fontWeight: \"bold\",\n                          fontFamily: \"Open Sans\",\n                          fontSize: \"12px\"\n                        }}\n                        loading={studentDashboardState.updateScoreLoading}\n                        border=\"none\"\n                        onClick={() => updateAssignmentScore(i)}\n                      />\n                    </div>\n                  </div>\n                </div>\n              ))\n            ) : (\n              <div>{noDataSection()}</div>\n            )}\n          </Modal.Description>\n        </Modal.Content>\n        {/* <Modal.Actions>\n          <Button\n            color=\"red\"\n            onClick={() => setStudentAssignmentListModal(false)}\n          >\n            Close\n          </Button>\n          <Button\n            content=\"Update Class\"\n            labelPosition=\"right\"\n            icon=\"checkmark\"\n            onClick={() => addAssignmentBtn()}\n            positive\n            loading={loading}\n          />\n        </Modal.Actions> */}\n      </Modal>\n    );\n  };\n  const uploadEbbokModal = () => {\n    return (\n      <Modal\n        onClose={() => setOpenUploadModal(false)}\n        open={openUploadModal}\n        closeIcon\n        size=\"tiny\"\n      >\n        <Modal.Header>Upload Syllabus and E-Books</Modal.Header>\n        <Modal.Content>\n          <Modal.Description>\n            <div\n              style={{\n                marginBottom: \"20px\",\n                display: \"flex\",\n                justifyContent: \"space-between\"\n              }}\n            >\n              <Input\n                value={feilds?.syllabus_url}\n                style={{ width: \"50%\" }}\n                placeholder=\"Syllabus Url\"\n                onChange={(e, data) =>\n                  onHandleChange(data.value, \"syllabus_url\")\n                }\n              />\n              <div>\n                <Button\n                  content=\"Choose File\"\n                  labelPosition=\"left\"\n                  icon=\"file\"\n                  loading={uploadLoading == \"syllabus_url\"}\n                  onClick={() => uploadSyllabusRef.current.click()}\n                />\n                <input\n                  ref={uploadSyllabusRef}\n                  type=\"file\"\n                  hidden\n                  onChange={event => uploadSyllabusUrl(event)}\n                />\n              </div>\n            </div>\n            <div\n              style={{\n                marginBottom: \"20px\",\n                display: \"flex\",\n                justifyContent: \"space-between\"\n              }}\n            >\n              <Input\n                value={feilds?.e_book_url}\n                style={{ width: \"50%\" }}\n                placeholder=\"E-Book Url\"\n                onChange={(e, data) => onHandleChange(data.value, \"e_book_url\")}\n              />\n              <div>\n                <Button\n                  content=\"Choose File\"\n                  labelPosition=\"left\"\n                  icon=\"file\"\n                  loading={uploadLoading == \"e_book_url\"}\n                  onClick={() => uploadEbookRef.current.click()}\n                />\n                <input\n                  ref={uploadEbookRef}\n                  type=\"file\"\n                  hidden\n                  onChange={event => uploadEbookUrl(event)}\n                />\n              </div>\n            </div>\n          </Modal.Description>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button color=\"red\" onClick={() => setOpenUploadModal(false)}>\n            Close\n          </Button>\n          <Button\n            content=\"Upload\"\n            labelPosition=\"right\"\n            icon=\"checkmark\"\n            onClick={() => uploadSyllabusEbook()}\n            positive\n            loading={loading}\n          />\n        </Modal.Actions>\n      </Modal>\n    );\n  };\n  const statusColors = {\n    idle: \"#fabf59\",\n    published: \"#368825\"\n  };\n  const onDeleteAssignment = async id => {\n    setLoading(true);\n    await deleteAssignment(id)(dispatch);\n    await getMentorAssignmentList()(dispatch);\n    setLoading(false);\n  };\n  const onPublishAssignment = async data => {\n    setLoading(true);\n    const payload = {\n      access_token: jsCookie.get(COOKIE_TOKEN),\n      assignment_id: data.assignment_id,\n      status: UPLOAD_STATUS,\n      batch_id: data.batch_id\n    };\n    try {\n      const response = await axiosInstance.post(\n        `/updateAssignmentStatus`,\n        payload\n      );\n      await getMentorAssignmentList()(dispatch);\n      setLoading(false);\n    } catch (err) {\n      setLoading(false);\n    }\n  };\n  const openStudentAssignmentModal = async data => {\n    setLoading(true);\n    await getSubmittedAssignmentList(data.assignment_id)(dispatch);\n    setLoading(false);\n    setStudentAssignmentListModal(true);\n  };\n  if (studentDashboardState.mentorDashboardAssignmentListLoading) {\n    return <StudentDashboardSkelton />;\n  }\n  const batchData = studentDashboardState.mentorDashboardData?.batch_data;\n  return (\n    <div className={styles.base}>\n      {loading && (\n        <Dimmer active>\n          <Loader />\n        </Dimmer>\n      )}\n      <div className={styles.myAssignment}>\n        <div className={styles.statusHeadingWrapper}>\n          <div className={styles.myAssignmentHeading}>My Assignments</div>\n          <div className={styles.statusWrapper}>\n            <div className={styles.statusHeading}>Status</div>\n            <div className={styles.colorTitleWrapper}>\n              <div\n                className={styles.color}\n                style={{ backgroundColor: \"#FABF59\" }}\n              ></div>\n              <div className={styles.title}>Uploaded</div>\n            </div>\n            <div className={styles.colorTitleWrapper}>\n              <div\n                className={styles.color}\n                style={{ backgroundColor: \"#368825\" }}\n              ></div>\n              <div className={styles.title}>Done</div>\n            </div>\n          </div>\n          <div className={styles.createFaqgbtn}>\n            <ButtonComponent\n              label={\"Create Assignement\"}\n              height={25}\n              borderRadius={8}\n              backgroundColor={\"#f98e46\"}\n              textStyle={{\n                color: \"#fff\",\n                fontWeight: \"bold\",\n                fontFamily: \"Open Sans\",\n                fontSize: \"12px\"\n              }}\n              border=\"none\"\n              onClick={() => setOpenModal(true)}\n            />\n          </div>\n        </div>\n        <div className={styles.tableHeader}>\n          <div className={styles.tableNo}>No.</div>\n          <div className={styles.tableAssignmentTitle}>\n            {isMobileView ? \"Assg. Title\" : \"Assignment Title\"}\n          </div>\n          <div className={styles.tableAssignDate}>Assign Date</div>\n          <div className={styles.tableDueDate}>Due Date</div>\n          <div className={styles.tableStatus}>Status</div>\n        </div>\n        {studentDashboardState.mentorDashboardAssignmentList?.map(\n          (i, index) => (\n            <div\n              className={styles.tableBodySection}\n              key={index}\n              onClick={() => openStudentAssignmentModal(i)}\n            >\n              <div className={styles.tableNo}>{`0${index + 1}`}</div>\n              <div className={styles.tableAssignmentTitle}>{i.title}</div>\n              <div className={styles.tableAssignDate}>\n                {moment(i.start_date).format(\"DD-MM-YYYY\")}{\" \"}\n                <span>\n                  <Icon name=\"calendar alternate\" />\n                </span>\n              </div>\n              <div className={styles.tableDueDate}>\n                {moment(i.due_date).format(\"DD-MM-YYYY\")}{\" \"}\n                <span>\n                  <Icon name=\"calendar alternate\" />\n                </span>\n              </div>\n              <div className={`${styles.tableStatus} ${styles.statusOption}`}>\n                <div\n                  className={styles.statusBar}\n                  style={{ backgroundColor: statusColors[i.status] }}\n                ></div>\n                <div>\n                  <Popup\n                    trigger={<Icon name=\"ellipsis vertical\" />}\n                    flowing\n                    hoverable\n                    position=\"bottom right\"\n                    style={{ padding: \"0px\" }}\n                  >\n                    {i.status == IDLE_STATUS && (\n                      <div\n                        className={styles.options}\n                        onClick={() => onPublishAssignment(i)}\n                      >\n                        Upload\n                      </div>\n                    )}\n                    <div className={styles.options}>\n                      <a\n                        href={i.doc_urls}\n                        download=\"assignemnt\"\n                        target={\"_blank\"}\n                        rel=\"noreferrer\"\n                      >\n                        Download\n                      </a>\n                    </div>\n                    <div\n                      className={styles.options}\n                      onClick={() => onDeleteAssignment(i.assignment_id)}\n                    >\n                      Delete\n                    </div>\n                  </Popup>\n                </div>\n              </div>\n            </div>\n          )\n        )}\n      </div>\n      <div className={styles.syllabusEbookWrapper}>\n        <div className={styles.mentorSyllabus}>\n          <div className={styles.syllabus}>Syllabus</div>\n          <div className={styles.pdf}>\n            <Image\n              src={\n                \"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2FpdfImage.png?alt=media&token=dd36f672-6682-41b1-9e5a-8440e84be260\"\n              }\n              alt=\"user-image\"\n            />\n          </div>\n          <Image\n            src=\"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Fmentor_syllabus.png?alt=media&token=ff47ea0e-5a7e-457c-8abd-354cb6374f23\"\n            alt=\"image\"\n            rounded\n            style={{ width: \"100%\" }}\n          />\n          <div className={styles.downloadIcon}>\n            <a\n              href={batchData?.syllabus_url}\n              download=\"assignemnt\"\n              target={\"_blank\"}\n              rel=\"noreferrer\"\n            >\n              <IconComponent name=\"downloadIcon\" width=\"36\" height=\"36\" />\n            </a>\n          </div>\n        </div>\n        <div className={styles.mentorEbooks}>\n          <div className={styles.syllabus}>E-Book</div>\n          <div className={styles.ebookSections}>\n            {[1].map((i, index) => (\n              <a\n                key={index}\n                href={batchData?.e_book_url}\n                download=\"assignemnt\"\n                target={\"_blank\"}\n                rel=\"noreferrer\"\n              >\n                <Image\n                  src={\n                    \"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Fe-bookImage.png?alt=media&token=80ea315b-6ecc-4024-aa90-ab5e6fc97cca\"\n                  }\n                  alt=\"user-image\"\n                  className={styles.eBook}\n                />\n              </a>\n            ))}\n          </div>\n          <Image\n            src=\"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Fmentor_ebook.png?alt=media&token=2a602482-a3a9-4e80-b418-94bb8ab7b28f\"\n            alt=\"image\"\n            rounded\n            style={{ width: \"100%\" }}\n          />\n        </div>\n      </div>\n      <div className={styles.uploadSyllabusBtn}>\n        <ButtonComponent\n          label={\"Upload Syllabus & books\"}\n          height={30}\n          borderRadius={8}\n          backgroundColor={\"#f98e46\"}\n          textStyle={{\n            color: \"#fff\",\n            fontWeight: \"bold\",\n            fontFamily: \"Open Sans\",\n            fontSize: \"12px\"\n          }}\n          border=\"none\"\n          onClick={() => setOpenUploadModal(true)}\n        />\n      </div>\n      {addAssignment()}\n      {studentAssigmentModal()}\n      {uploadEbbokModal()}\n    </div>\n  );\n}\n","/home/tthinksys/tremendo_frontend/components/MyResourceTab/MyResourceTab.js",["312"],"import React, { useRef, useContext, useEffect, useState } from \"react\";\nimport styles from \"./MyResourceTab.module.css\";\nimport { Image } from \"semantic-ui-react\";\nimport Icon from \"../../assets/Icon/Icon\";\nimport { DeviceContext } from \"../../pages/_app\";\nimport { GlobalContext } from \"../../Context/Provider\";\nimport { getStudentAssignmentList } from \"../../Context/Actions/Dashboard/DashboardAction\";\nimport StudentDashboardSkelton from \"../Dashboard/StudentDashboardSkelton\";\nimport Button from \"../Button/Button\";\nimport axiosInstance from \"../../utils/axiosInstance\";\nimport jsCookie from \"js-cookie\";\nimport { COOKIE_TOKEN } from \"../../utils/constants\";\nimport PageLoader from \"../Loader/PageLoader\";\nimport { storage } from \"../../utils/firebase-config\";\nimport moment from \"moment\";\n\nexport default function MyResourceTab({}) {\n  const inputFile = useRef(null);\n  const {\n    studentDashboardState,\n    languageState,\n    studentDashboardDispatch: dispatch\n  } = useContext(GlobalContext);\n  const { isMobileView } = useContext(DeviceContext);\n  const [loading, setLoading] = useState(false);\n  const [assignmentUrls, setAssignmentUrls] = useState({});\n  useEffect(() => {\n    if (languageState.setStudentSelectedLanguage?.batch_id)\n      getStudentAssignmentList(\n        languageState.setStudentSelectedLanguage.batch_id\n      )(dispatch);\n  }, []);\n\n  const onClick = e => {\n    inputFile.current.click();\n  };\n\n  const uploadFiles = (image, id) => {\n    //setUploadLoading(type);\n    const uploadTask = storage.ref(`docs/${image.name}`).put(image);\n    uploadTask.on(\n      \"state_changed\",\n      snapshot => {\n        const progress = Math.round(\n          (snapshot.bytesTransferred / snapshot.totalBytes) * 100\n        );\n        console.log(\"here\");\n      },\n      error => {\n        //setUploadLoading(\"\");\n        console.log(error, \"error\");\n      },\n      () => {\n        storage\n          .ref(\"docs\")\n          .child(image.name)\n          .getDownloadURL()\n          .then(url => {\n            setAssignmentUrls({ ...assignmentUrls, [id]: url });\n            // setUploadLoading(\"\");\n          });\n      }\n    );\n  };\n\n  const submitAssigmentResult = async data => {\n    setLoading(true);\n    const payload = {\n      access_token: jsCookie.get(COOKIE_TOKEN),\n      student_assignment_id: data.student_assignment_id,\n      answer_doc_url: assignmentUrls[data.assignment_id]\n    };\n    try {\n      const response = await axiosInstance.post(\n        `/submitStudentAssignment`,\n        payload\n      );\n      getStudentAssignmentList(\n        languageState.setStudentSelectedLanguage.batch_id\n      )(dispatch);\n      setLoading(false);\n    } catch (err) {\n      setLoading(false);\n    }\n  };\n  const uploadAssigment = (e, data) => {\n    uploadFiles(e.target.files[0], data.assignment_id);\n  };\n\n  if (studentDashboardState.studentAssignmentListLoading) {\n    return <StudentDashboardSkelton />;\n  }\n  // if (true) {\n  //   return (\n  //     <div\n  //       style={{\n  //         height: isMobileView ? \"300px\" : \"700px\",\n  //         width: isMobileView ? \"300px\" : \"700px\",\n  //         margin: \"auto\"\n  //       }}\n  //     >\n  //       <Image\n  //         src=\"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Fno_data.png?alt=media&token=79834bd2-97fa-4f63-897f-fe9498236194\"\n  //         alt=\"tremendo dashboard banner\"\n  //         height={isMobileView ? \"300px\" : \"800px\"}\n  //         width={isMobileView ? \"300px\" : \"700px\"}\n  //         className={styles.banner}\n  //       />\n  //     </div>\n  //   );\n  // }\n\n  const assignmentList = studentDashboardState.studentAssignmentList?.assigment;\n  const finalAssesment =\n    studentDashboardState.studentAssignmentList?.final_assessment;\n\n  const resourse_data = studentDashboardState.studentAssignmentList;\n  return (\n    <div className={styles.base}>\n      {loading && <PageLoader />}\n      <div className={styles.headingWrapper}>\n        <div className={styles.heading}>Assignments</div>\n        <div className={styles.heading}> Total: {assignmentList?.length}</div>\n      </div>\n      <div className={styles.assignmentTable}>\n        <div className={styles.tableHeader}>\n          <div className={styles.noHeader}>No.</div>\n          <div className={styles.titleHeader}>\n            {isMobileView ? \"Assg. Title\" : \"Assignment Title\"}\n          </div>\n          <div className={styles.dateHeader}>Assign Date</div>\n          <div className={styles.dateHeader}>Due Date</div>\n          <div className={styles.statusHeader}>Score</div>\n          <div className={styles.statusHeader}>Status</div>\n        </div>\n        <div className={styles.tableBody}>\n          {assignmentList?.map((i, index) => (\n            <div className={styles.tableData} key={index}>\n              <div className={styles.noHeader}>{index + 1}.</div>\n              <div className={styles.uploadFileSection}>\n                <div className={styles.assignmentName}>\n                  {isMobileView ? `${i.title.substring(0, 4)}...` : i.title}\n                </div>\n                <div className={styles.uploadButtons}>\n                  <input\n                    ref={inputFile}\n                    type=\"file\"\n                    hidden\n                    onChange={event => uploadAssigment(event, i)}\n                  />\n                  <div className={styles.uploadBtn} onClick={onClick}>\n                    Upload\n                  </div>\n                  <div className={styles.EditBtn}>\n                    <a\n                      href={assignmentUrls[i.assignment_id]}\n                      download=\"assignemnt\"\n                      target={\"_blank\"}\n                      rel=\"noreferrer\"\n                    >\n                      View\n                    </a>\n                  </div>\n                </div>\n              </div>\n              <div className={styles.dateHeader}>\n                {moment(i.start_date).format(\"LL\")}\n              </div>\n              <div className={styles.dateHeader}>\n                {moment(i.due_date).format(\"LL\")}\n              </div>\n              {/* <div className={styles.checkboxesWrapper}>\n                <div className={styles.completeCheckbox}>\n                  <label className={styles.completeContainer}>\n                    Complete\n                    <input\n                      type=\"checkbox\"\n                      className={styles.checkbox}\n                      onClick={event => console.log(event.target.checked)}\n                    />\n                    <span className={styles.checkmark}></span>\n                  </label>\n                </div>\n                <div>\n                  <label className={styles.notCompleteContainer}>\n                    Not submit\n                    <input\n                      type=\"checkbox\"\n                      className={styles.checkbox}\n                      onClick={event => console.log(event.target.checked)}\n                    />\n                    <span className={styles.checkmark}></span>\n                  </label>\n                </div>\n              </div> */}\n              <div className={styles.checkboxesWrapper}>\n                {i.student_score}/{i.max_score}\n              </div>\n              <div className={styles.checkboxesWrapper}>\n                <Button\n                  label={\"Submit\"}\n                  height={30}\n                  borderRadius={8}\n                  backgroundColor={\"#f98e46\"}\n                  textStyle={{\n                    color: \"#fff\",\n                    fontWeight: \"bold\",\n                    fontFamily: \"Open Sans\",\n                    fontSize: \"12px\"\n                  }}\n                  border=\"none\"\n                  onClick={() => submitAssigmentResult(i)}\n                />\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n      {/* <div className={styles.finalAssesmentSection}>\n        <div className={styles.finalHeading}>\n          <div className={styles.finalDate}>1.</div>\n          <div className={styles.finalTime}>\n            <div className={styles.finalDate}>{finalAssesment?.title}</div>\n            <div className={styles.uploadFileSize}>\n              <input\n                type=\"file\"\n                id=\"file\"\n                ref={inputFile}\n                style={{ display: \"none\" }}\n              />\n              <div className={styles.uploadFinalAssesmentBtn} onClick={onClick}>\n                Upload\n              </div>\n              {!isMobileView && <div className={styles.fileSize}>25mb</div>}\n            </div>\n          </div>\n        </div>\n        <div className={styles.finalDateAndTime}>\n          <div className={styles.finalDate}>{finalAssesment?.assign_date}</div>\n          <div className={styles.finalTime}> 10:00 PM</div>\n        </div>\n        <div className={styles.mentorName}>\n          <div className={styles.profile}>\n            <Image\n              src={\"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Fblank_profile.png?alt=media&token=53afec48-03b2-4843-9b9c-8dc9c252ea41\"}\n              circular\n              alt=\"user-image\"\n              height={\"24px\"}\n              width={\"24px\"}\n            />\n          </div>\n          <div className={styles.name}>{finalAssesment?.mentor_name}</div>\n        </div>\n        <div className={styles.finalStatus}>\n          <div className={styles.completeCheckbox}>\n            <label className={styles.completeContainer}>\n              Complete\n              <input\n                type=\"checkbox\"\n                className={styles.checkbox}\n                onClick={event => console.log(event.target.checked)}\n              />\n              <span className={styles.checkmark}></span>\n            </label>\n          </div>\n        </div>\n      </div> */}\n      <div className={styles.ebooksSection}>\n        <div className={styles.syllabusWrapper}>\n          <div className={styles.syllabusHeading}>Syllabus</div>\n          <div className={styles.syylabusBox}>\n            <div className={styles.eflyImage}>\n              <Image\n                src={\n                  \"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Fsyllabus.png?alt=media&token=282036ad-0e00-4540-b28d-3d0c7cefb569\"\n                }\n                alt=\"user-image\"\n              />\n            </div>\n            <div className={styles.pdfDownload}>\n              <Image\n                src={\n                  \"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2FpdfImage.png?alt=media&token=dd36f672-6682-41b1-9e5a-8440e84be260\"\n                }\n                alt=\"user-image\"\n                style={{ margin: \"auto\" }}\n              />\n              <div className={styles.pdfUploadTime}>Feb 7 2022, 10:00AM</div>\n              <div className={styles.downloadIcon}>\n                <a\n                  href={resourse_data?.syllabus?.doc_url}\n                  download=\"assignemnt\"\n                  target={\"_blank\"}\n                  rel=\"noreferrer\"\n                >\n                  <Icon name=\"downloadIcon\" width=\"26\" height=\"26\" />\n                </a>\n              </div>\n              <div className={styles.fileSize}>167kb</div>\n            </div>\n          </div>\n        </div>\n        <div className={styles.ebookWrapper}>\n          <div className={styles.syllabusHeading}>E-Book</div>\n          <div className={styles.bookImageWrapper}>\n            <div className={styles.ebookSections}>\n              {[1].map((i, index) => (\n                <a\n                  key={index}\n                  href={resourse_data?.e_book?.doc_url}\n                  download=\"assignemnt\"\n                  target={\"_blank\"}\n                  rel=\"noreferrer\"\n                >\n                  <Image\n                    src={\n                      \"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Fe-bookImage.png?alt=media&token=80ea315b-6ecc-4024-aa90-ab5e6fc97cca\"\n                    }\n                    alt=\"user-image\"\n                    className={styles.eBook}\n                  />\n                </a>\n              ))}\n            </div>\n            <Image\n              src={\n                \"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Fe-book.png?alt=media&token=8bfda71d-d955-40ff-be23-a9b78e423e2c\"\n              }\n              alt=\"user-image\"\n              style={{ margin: \"auto\" }}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/home/tthinksys/tremendo_frontend/components/Navbar/Layout.js",[],"/home/tthinksys/tremendo_frontend/components/Navbar/Navbar.js",["313"],"import { Fragment, useEffect, useState } from \"react\";\nimport React, { useContext } from \"react\";\nimport styles from \"./Navbar.module.css\";\nimport { Dropdown, Icon, Image, Menu, Popup } from \"semantic-ui-react\";\nimport {\n  COOKIE_TOKEN,\n  LOGIN_STUDENT_TAB,\n  LOGIN_MENTOR_TAB,\n  USER_DETAILS,\n  ADMIN_ACCESS_TYPE\n} from \"../../utils/constants\";\nimport { useRouter } from \"next/router\";\nimport DesktopOnly from \"../DeviceCheck/DesktopOnly\";\nimport MobileOnly from \"../DeviceCheck/MobileOnly\";\nimport Button from \"../Button/Button\";\nimport {\n  ABOUTUS_PATH,\n  HOME_PAGE,\n  LANGUAGE_DETAIL,\n  LOGIN_PATH,\n  SIGN_UP_PATH,\n  BLOGS_PATH,\n  CONTACTUS_PATH,\n  FAQS_PATH,\n  REVIEW_PATH,\n  STUDENT_DASHBOARD_PATH,\n  MENTOR_DASHBOARD_PATH,\n  ADMIN_DASHBOARD_PATH\n} from \"../../utils/routes\";\nimport Cookies from \"js-cookie\";\nimport { GlobalContext } from \"../../Context/Provider\";\nimport {\n  getUserProfile,\n  logoutAuth,\n  LOGOUT_ERROR\n} from \"../../Context/Actions/Auth/AuthAction\";\nimport { toast } from \"react-toastify\";\nimport ImageComponent from \"next/image\";\nimport { getLanguages } from \"../../Context/Actions/Home/HomeAction\";\n\nfunction Navbar({}) {\n  const [visible, setVisible] = useState(false);\n  const [selectedLanguage, setSelectedLanguage] = useState(\"LANGUAGES\");\n  const router = useRouter();\n  const {\n    homeState,\n    authDispatch: dispatch,\n    homeDispatch: homeDispatch\n  } = useContext(GlobalContext);\n  const userDetails =\n    typeof window !== \"undefined\" &&\n    localStorage.getItem(USER_DETAILS) &&\n    JSON.parse(localStorage.getItem(USER_DETAILS));\n  useEffect(() => {\n    if (!router.pathname.includes(LANGUAGE_DETAIL)) {\n      setSelectedLanguage(\"LANGUAGES\");\n      // return false;\n    }\n    setLanguageToStore();\n    if (userDetails) profileData();\n  }, [router.pathname]);\n\n  const setLanguageToStore = async () => {\n    const currentLanguagePage = router.query.languageId;\n    const response = await getLanguages()(homeDispatch);\n    const selectedLang = response.data.find(\n      i => i.languge_id == currentLanguagePage\n    );\n    if (selectedLang) {\n      setSelectedLanguage(selectedLang.title);\n    } else {\n      setSelectedLanguage(\"LANGUAGES\");\n    }\n  };\n\n  const profileData = async () => {\n    if (userDetails) {\n      const response = await getUserProfile(userDetails.access_type)(dispatch);\n    }\n  };\n\n  const signUpAndLogout = async () => {\n    if (Cookies.get(COOKIE_TOKEN)) {\n      const response = await logoutAuth(Cookies.get(COOKIE_TOKEN))(dispatch);\n      if (response.type == LOGOUT_ERROR) {\n        toast.error(response.error.msg, {\n          theme: \"colored\"\n        });\n      } else {\n        toast.success(response.data.msg, {\n          theme: \"colored\"\n        });\n        router.push(HOME_PAGE);\n      }\n    } else {\n      router.push(SIGN_UP_PATH);\n    }\n  };\n\n  const goToLanguage = language => {\n    setSelectedLanguage(language.title);\n    router.push(`${LANGUAGE_DETAIL}${language.languge_id}`);\n    setVisible(!visible);\n  };\n\n  const goToDashboard = () => {\n    if (userDetails.access_type == LOGIN_STUDENT_TAB) {\n      router.push(STUDENT_DASHBOARD_PATH);\n    } else if (userDetails.access_type == LOGIN_MENTOR_TAB) {\n      router.push(MENTOR_DASHBOARD_PATH);\n    } else if (userDetails.access_type == ADMIN_ACCESS_TYPE) {\n      router.push(ADMIN_DASHBOARD_PATH);\n    } else {\n      router.push(STUDENT_DASHBOARD_PATH);\n    }\n  };\n  const inviteFriends = () => {\n    window.open(\"https://web.whatsapp.com/send?text=https://tremendo.in/\");\n  };\n  const desktopNavbar = () => {\n    return (\n      <Menu fixed=\"top\" secondary className={styles.menuWrapper}>\n        <Menu.Item onClick={() => router.push(HOME_PAGE)}>\n          <Image\n            src=\"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Ftremendo_logo.png?alt=media&token=2180fdbc-cab2-4f3e-9721-cd61da3348ba\"\n            alt=\"tremendo logo\"\n            width={\"150px\"}\n            height={\"50px\"}\n          />\n        </Menu.Item>\n        {!router.pathname.includes(SIGN_UP_PATH) &&\n          !router.pathname.includes(LOGIN_PATH) && (\n            <Fragment>\n              <Menu.Menu position=\"right\" className={styles.menuStyling}>\n                <Menu.Item\n                  name=\"ABOUT US\"\n                  className={`${styles.itemWrapper} ${router.pathname.includes(\n                    ABOUTUS_PATH\n                  ) && styles.activeItemWrapper}`}\n                  onClick={() => router.push(ABOUTUS_PATH)}\n                />\n                <Dropdown\n                  text={selectedLanguage}\n                  className={`${\n                    styles.dropdownWrapper\n                  } ${router.pathname.includes(LANGUAGE_DETAIL) &&\n                    styles.activeItemWrapper}`}\n                >\n                  <Dropdown.Menu>\n                    {homeState.getLanguage.map((i, index) => (\n                      <Dropdown.Item\n                        key={index}\n                        text={`${i.title}  (${i.welcome_text})`}\n                        onClick={() => goToLanguage(i)}\n                      />\n                    ))}\n                  </Dropdown.Menu>\n                </Dropdown>\n                <Menu.Item\n                  name=\"REVIEW\"\n                  className={`${styles.itemWrapper} ${router.pathname.includes(\n                    REVIEW_PATH\n                  ) && styles.activeItemWrapper}`}\n                  onClick={() => router.push(REVIEW_PATH)}\n                />\n                <Menu.Item\n                  name=\"FAQ'S\"\n                  className={`${styles.itemWrapper} ${router.pathname.includes(\n                    FAQS_PATH\n                  ) && styles.activeItemWrapper}`}\n                  onClick={() => router.push(FAQS_PATH)}\n                />\n                <Menu.Item\n                  name=\"BLOGS\"\n                  className={`${styles.itemWrapper} ${router.pathname.includes(\n                    BLOGS_PATH\n                  ) && styles.activeItemWrapper}`}\n                  onClick={() => router.push(BLOGS_PATH)}\n                />\n                <Menu.Item\n                  name=\"CONTACT US\"\n                  className={`${styles.itemWrapper} ${router.pathname.includes(\n                    CONTACTUS_PATH\n                  ) && styles.activeItemWrapper}`}\n                  onClick={() => router.push(CONTACTUS_PATH)}\n                />\n              </Menu.Menu>\n              {!Cookies.get(COOKIE_TOKEN) ? (\n                <Menu.Item\n                  className={styles.itemWrapper}\n                  onClick={() => router.push(LOGIN_PATH)}\n                >\n                  LOGIN\n                </Menu.Item>\n              ) : (\n                <Menu.Item>\n                  <Popup\n                    trigger={\n                      <Image\n                        src={\n                          userDetails.profileUrl\n                            ? userDetails.profileUrl\n                            : \"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Fblank_profile.png?alt=media&token=53afec48-03b2-4843-9b9c-8dc9c252ea41\"\n                        }\n                        circular\n                        alt=\"profile\"\n                        height={\"35px\"}\n                        width={\"35px\"}\n                      />\n                    }\n                    flowing\n                    hoverable\n                    style={{ padding: \"0px\" }}\n                  >\n                    <div className={styles.profileName}>\n                      {userDetails.name ? userDetails.name : userDetails.email}\n                    </div>\n                    <div\n                      className={styles.profileOptions}\n                      onClick={() => goToDashboard()}\n                    >\n                      Dashboard\n                    </div>\n                    <div\n                      className={styles.profileOptions}\n                      onClick={() => inviteFriends()}\n                    >\n                      Invite friends\n                    </div>\n                    <div\n                      className={styles.profileLogout}\n                      onClick={() => signUpAndLogout()}\n                    >\n                      Log out\n                    </div>\n                  </Popup>\n                </Menu.Item>\n              )}\n              {!Cookies.get(COOKIE_TOKEN) && (\n                <Menu.Item>\n                  <Button\n                    label={\"SIGN UP\"}\n                    height={34}\n                    borderRadius={18}\n                    textStyle={{\n                      color: \"#fff\",\n                      fontWeight: \"bold\",\n                      fontFamily: \"Montserrat\",\n                      fontSize: \"13px\"\n                    }}\n                    border=\"none\"\n                    onClick={() => signUpAndLogout()}\n                  />\n                </Menu.Item>\n              )}\n            </Fragment>\n          )}\n      </Menu>\n    );\n  };\n  const mobileNavbar = () => {\n    return (\n      <Fragment>\n        <div className={styles.mobileBase}>\n          {!router.pathname.includes(SIGN_UP_PATH) &&\n            !router.pathname.includes(LOGIN_PATH) && (\n              <div\n                className={styles.toggleIcon}\n                onClick={() => setVisible(!visible)}\n              >\n                <div className={`${visible && styles.hamburger}`}>\n                  <span className={styles.line}></span>\n                  <span className={styles.line}></span>\n                  <span className={styles.line}></span>\n                </div>\n              </div>\n            )}\n          <div onClick={() => router.push(HOME_PAGE)}>\n            <Image\n              src=\"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Ftremendo_logo.png?alt=media&token=2180fdbc-cab2-4f3e-9721-cd61da3348ba\"\n              alt=\"logo\"\n              size={\"small\"}\n            />\n          </div>\n        </div>\n        {visible && (\n          <div\n            className={styles.overlayBase}\n            onClick={() => setVisible(!visible)}\n          >\n            <div className={styles.contentWrapper}>\n              {!Cookies.get(COOKIE_TOKEN) ? (\n                <div\n                  className={styles.mwebMenus}\n                  onClick={() => router.push(LOGIN_PATH)}\n                >\n                  Login\n                </div>\n              ) : (\n                <div\n                  className={styles.mwebMenus}\n                  onClick={() => goToDashboard()}\n                >\n                  {userDetails.name ? userDetails.name : userDetails.email}\n                </div>\n              )}\n              <div\n                className={styles.mwebMenus}\n                onClick={() => signUpAndLogout()}\n              >\n                {Cookies.get(COOKIE_TOKEN) ? \"Log Out\" : \"Sign Up\"}\n              </div>\n              <div\n                className={styles.mwebMenus}\n                onClick={() => router.push(ABOUTUS_PATH)}\n              >\n                About Us\n              </div>\n              <Dropdown\n                text=\"Languages\"\n                pointing=\"left\"\n                className={styles.mwebLanguage}\n              >\n                <Dropdown.Menu>\n                  {homeState.getLanguage.map((i, index) => (\n                    <Dropdown.Item\n                      key={index}\n                      text={i.title}\n                      onClick={() => goToLanguage(i)}\n                    />\n                  ))}\n                </Dropdown.Menu>\n              </Dropdown>\n              <div\n                className={styles.mwebMenus}\n                onClick={() => router.push(REVIEW_PATH)}\n              >\n                Review\n              </div>\n              <div\n                className={styles.mwebMenus}\n                onClick={() => router.push(FAQS_PATH)}\n              >\n                FAQs\n              </div>\n              <div\n                className={styles.mwebMenus}\n                onClick={() => router.push(BLOGS_PATH)}\n              >\n                Blogs\n              </div>\n              <div\n                className={styles.mwebMenus}\n                onClick={() => router.push(CONTACTUS_PATH)}\n              >\n                Contact Us\n              </div>\n            </div>\n          </div>\n        )}\n      </Fragment>\n    );\n  };\n  return (\n    <Fragment>\n      <MobileOnly>{mobileNavbar()}</MobileOnly>\n      <DesktopOnly>{desktopNavbar()}</DesktopOnly>\n    </Fragment>\n  );\n}\n\nexport default Navbar;\n","/home/tthinksys/tremendo_frontend/components/ProfileTab/MentorProfile.js",["314"],"import React, { useState, useRef, useEffect } from \"react\";\nimport { Image, Icon, Dimmer, Loader } from \"semantic-ui-react\";\nimport styles from \"./MentorProfile.module.css\";\nimport Input from \"../Input/Input\";\nimport DatePicker from \"react-datepicker\";\nimport Button from \"../Button/Button\";\nimport { useContext } from \"react\";\nimport { DeviceContext } from \"../../pages/_app\";\nimport { GlobalContext } from \"../../Context/Provider\";\nimport moment from \"moment\";\nimport { country_list } from \"../../utils/countriesList\";\nimport { phone } from \"phone\";\nimport {\n  COOKIE_TOKEN,\n  EMAIL_REGULAR_EXPRESSION,\n  LOGIN_MENTOR_TAB\n} from \"../../utils/constants\";\nimport {\n  updateMentorProfile,\n  UPDATE_PROFILE_DATA_SUCCESS\n} from \"../../Context/Actions/Dashboard/DashboardAction\";\nimport Cookies from \"js-cookie\";\nimport { toast } from \"react-toastify\";\nimport { getUserProfile } from \"../../Context/Actions/Auth/AuthAction\";\nimport StudentDashboardSkelton from \"../Dashboard/StudentDashboardSkelton\";\nimport { storage } from \"../../utils/firebase-config\";\n\nexport default function MentorProfile() {\n  const inputFile = useRef(null);\n  const { isMobileView } = useContext(DeviceContext);\n  const [fields, setFields] = useState({\n    university: \"\",\n    passout_year: \"\",\n    stream: \"\",\n    degree: \"\",\n    country: \"India\"\n  });\n  const [errors, setErrors] = useState({});\n  const [uploadLoading, setUploadLoading] = useState(false);\n\n  const {\n    authState,\n    studentDashboardState,\n    studentDashboardDispatch: dispatch,\n    authDispatch: dispatchAuth\n  } = useContext(GlobalContext);\n  const customInput = ({\n    placeholder,\n    value,\n    disabled,\n    handleChange,\n    showError,\n    type = \"text\"\n  }) => {\n    return (\n      <Input\n        type={type}\n        placeholder={placeholder}\n        value={value}\n        disabled={disabled}\n        handleChange={text => handleChange(text)}\n        inputStyling={{\n          width: \"100%\",\n          fontSize: \"12px\",\n          color: \"#66666d\",\n          border: showError ? \"2px solid red\" : \"1px solid #cecedc\",\n          height: \"31px\",\n          paddingLeft: \"8px\",\n          fontFamily: \"Poppins\",\n          backgroundColor: \"#f8f8fa\"\n        }}\n      />\n    );\n  };\n  useEffect(() => {\n    updateFieldsValue();\n  }, []);\n  const uploadFiles = (image, type) => {\n    setUploadLoading(true);\n    const uploadTask = storage.ref(`images/${image.name}`).put(image);\n    uploadTask.on(\n      \"state_changed\",\n      snapshot => {\n        const progress = Math.round(\n          (snapshot.bytesTransferred / snapshot.totalBytes) * 100\n        );\n        console.log(\"here\");\n      },\n      error => {\n        setUploadLoading(false);\n        console.log(error);\n      },\n      () => {\n        storage\n          .ref(\"images\")\n          .child(image.name)\n          .getDownloadURL()\n          .then(url => {\n            setFields({ ...fields, avatar: url });\n            setUploadLoading(false);\n            console.log(url);\n          });\n      }\n    );\n  };\n  const updateFieldsValue = async () => {\n    const userUpdatedData = await getUserProfile(LOGIN_MENTOR_TAB)(\n      dispatchAuth\n    );\n    const profileDetails = userUpdatedData.data.user_data;\n\n    setFields({\n      ...fields,\n      ...profileDetails,\n      first_name: profileDetails.profile_name\n    });\n  };\n\n  const onChangeData = (value, type) => {\n    setFields({ ...fields, [type]: value });\n    setErrors({});\n  };\n\n  const onClick = e => {\n    inputFile.current.click();\n  };\n\n  const customSelect = ({\n    placeholder,\n    options,\n    value,\n    handleChange,\n    showError\n  }) => {\n    return (\n      <select\n        className={styles.selectStyling}\n        placeholder={placeholder}\n        value={value}\n        onChange={event => handleChange(event.target.value)}\n        style={{ border: showError ? \"2px solid red\" : \"1px solid #cecedc\" }}\n      >\n        <option value={0}>Select</option>\n        {options.map((i, index) => (\n          <option value={i.name} key={index}>\n            {i.name}\n          </option>\n        ))}\n      </select>\n    );\n  };\n\n  const DateInput = ({ value, onClick }) => {\n    return (\n      <button\n        className={styles.dateInput}\n        style={{\n          width: \"100%\",\n          fontSize: \"12px\",\n          color: \"#66666d\",\n          border: \"1px solid #cecedc\",\n          height: \"31px\",\n          paddingLeft: \"8px\",\n          fontFamily: \"Poppins\",\n          backgroundColor: \"#f8f8fa\",\n          textAlign: \"left\"\n        }}\n        onClick={onClick}\n      >\n        {value ? value : \"DOB\"}\n      </button>\n    );\n  };\n\n  const handleChangeImage = e => {\n    uploadFiles(e.target.files[0], \"avatar\");\n  };\n\n  const handleUpload = async data => {\n    // e.preventDefault();\n    const formData = new FormData();\n    formData.append(\"image\", data);\n    console.log(formData);\n    await fetch(\"YOUR_URL\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      },\n      body: formData\n    });\n  };\n\n  const updateProfile = async () => {\n    const selectedCountry = country_list.find(i => i.name === fields.country);\n    let errors = { ...errors };\n    if (!fields.first_name) {\n      errors[\"first_name\"] = true;\n      setErrors(errors);\n      return false;\n    } else if (!fields.last_name) {\n      errors[\"last_name\"] = true;\n      setErrors(errors);\n      return false;\n    } else if (!fields.dob) {\n      errors[\"dob\"] = true;\n      setErrors(errors);\n      return false;\n    } else if (!fields.gender) {\n      errors[\"gender\"] = true;\n      setErrors(errors);\n      return false;\n    } else if (!fields.country) {\n      errors[\"country\"] = true;\n      setErrors(errors);\n      return false;\n    } else if (!fields.city) {\n      errors[\"city\"] = true;\n      setErrors(errors);\n      return false;\n    } else if (!fields.phone_number) {\n      errors[\"phone_number\"] = true;\n      setErrors(errors);\n      return false;\n    } else if (\n      fields.phone_number &&\n      !phone(fields.phone_number, { country: selectedCountry.country_code })\n        .isValid\n    ) {\n      errors[\"phone_number\"] = true;\n      setErrors(errors);\n      return false;\n    } else if (!fields.email) {\n      errors[\"email\"] = true;\n      setErrors(errors);\n      return false;\n    } else if (fields.email && !EMAIL_REGULAR_EXPRESSION.test(fields.email)) {\n      errors[\"email\"] = true;\n      setErrors(errors);\n      return false;\n    } else if (!fields.father_name) {\n      errors[\"father_name\"] = true;\n      setErrors(errors);\n      return false;\n    } else if (!fields.mother_name) {\n      errors[\"mother_name\"] = true;\n      setErrors(errors);\n      return false;\n    } else {\n      const payload = { ...fields };\n      payload.access_token = Cookies.get(COOKIE_TOKEN);\n      const response = await updateMentorProfile(payload)(dispatch);\n      if (response.type == UPDATE_PROFILE_DATA_SUCCESS) {\n        toast.success(\"Profile Updated Successfully\", {\n          theme: \"colored\"\n        });\n        const userUpdatedData = await getUserProfile(LOGIN_MENTOR_TAB)(\n          dispatchAuth\n        );\n\n        setFields(userUpdatedData.data.user_data);\n      } else {\n        toast.error(\"Something Went Wrong\", {\n          theme: \"colored\"\n        });\n      }\n    }\n  };\n  const profileDetails = authState.profileData.user_data;\n  const selectedCountry = country_list.find(i => i.name === fields.country);\n  const mentorLanguageData = authState.profileData.all_languages;\n  if (authState.profileDataLoading) {\n    return <StudentDashboardSkelton />;\n  }\n  return (\n    <div className={styles.base}>\n      {uploadLoading && (\n        <Dimmer active>\n          <Loader />\n        </Dimmer>\n      )}\n      <div className={styles.profile_topImage}>\n        <Image\n          src={\n            \"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Fprofile_top.png?alt=media&token=7dfe95c5-d496-4b98-b5d9-52c877ccb3ce\"\n          }\n          alt=\"profiletab_rocket\"\n        />\n      </div>\n      <div className={styles.sectionWrapper}>\n        <div className={styles.leftSection}>\n          <div>\n            <label htmlFor=\"upload-button\">\n              <div className={styles.profileImage}>\n                <Image\n                  src={\n                    fields.avatar\n                      ? fields.avatar\n                      : \"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Fblank_profile.png?alt=media&token=53afec48-03b2-4843-9b9c-8dc9c252ea41\"\n                  }\n                  circular\n                  alt=\"profiletab_rocket\"\n                  width={isMobileView ? \"70px\" : \"150px\"}\n                  height={isMobileView ? \"70px\" : \"150px\"}\n                />\n                <div className={styles.cameraIcon}>\n                  <Icon name=\"camera\" />\n                </div>\n              </div>\n            </label>\n            <input\n              type=\"file\"\n              id=\"upload-button\"\n              accept=\"image/x-png,image/gif,image/jpeg\"\n              style={{ display: \"none\" }}\n              onChange={handleChangeImage}\n            />\n            <br />\n          </div>\n          <div className={styles.mentorName}>\n            {profileDetails?.profile_name}\n          </div>\n          <div className={styles.mentorCode}>{profileDetails?.user_code}</div>\n          <div className={styles.languagesHeading}>Languages</div>\n          <div className={styles.languages}>\n            {mentorLanguageData?.map(i => i.name).join(\" | \")}\n          </div>\n          <div className={styles.languagesHeading}>Documents</div>\n          <div className={styles.attachementWrapper}>\n            <div>\n              <input\n                type=\"file\"\n                id=\"file\"\n                ref={inputFile}\n                style={{ display: \"none\" }}\n              />\n\n              <div className={styles.attachement} onClick={onClick}>\n                <Icon name=\"attach\" size=\"large\" />\n              </div>\n            </div>\n            <div>\n              <input\n                type=\"file\"\n                id=\"file\"\n                ref={inputFile}\n                style={{ display: \"none\" }}\n              />\n\n              <div className={styles.attachement} onClick={onClick}>\n                <Icon name=\"attach\" size=\"large\" />\n              </div>\n            </div>\n            <div>\n              <input\n                type=\"file\"\n                id=\"file\"\n                ref={inputFile}\n                style={{ display: \"none\" }}\n              />\n\n              <div className={styles.attachement} onClick={onClick}>\n                <Icon name=\"attach\" size=\"large\" />\n              </div>\n            </div>\n          </div>\n          <div className={styles.languagesHeading}>Profile Details</div>\n          {profileDetails?.profile_completed && (\n            <div className={styles.progress}>\n              <div className={styles.progressStrip}>\n                <div\n                  className={styles.status}\n                  style={{ width: `${profileDetails.profile_completed}%` }}\n                ></div>\n              </div>\n              <div\n                className={styles.progressTitle}\n              >{`Profile updated: ${profileDetails.profile_completed}%`}</div>\n            </div>\n          )}\n        </div>\n        <div className={styles.rightSection}>\n          <div className={styles.languagesHeading}>Personal Information</div>\n          <div className={styles.inputWrapper}>\n            <div className={styles.firstName}>\n              <div className={styles.inputGeneralTitle}>First Name*</div>\n              <div>\n                {customInput({\n                  placeholder: \"First Name*\",\n                  value: fields.first_name,\n                  handleChange: text => onChangeData(text, \"first_name\"),\n                  showError: errors[\"first_name\"]\n                })}\n              </div>\n            </div>\n            <div className={styles.lastName}>\n              <div className={styles.inputGeneralTitle}>Last Name*</div>\n              <div>\n                {customInput({\n                  placeholder: \"Last Name*\",\n                  value: fields.last_name,\n                  handleChange: text => onChangeData(text, \"last_name\"),\n                  showError: errors[\"last_name\"]\n                })}\n              </div>\n            </div>\n          </div>\n          <div className={styles.inputWrapper}>\n            <div className={styles.firstName}>\n              <div className={styles.inputGeneralTitle}>DOB*</div>\n              <div>\n                <DatePicker\n                  selected={fields.dob ? moment(fields.dob)._d : \"\"}\n                  onChange={date => onChangeData(moment(date).format(), \"dob\")}\n                  customInput={<DateInput />}\n                  dateFormat=\"MMMM d, yyyy\"\n                  maxDate={moment().subtract(14, \"years\")._d}\n                  peekNextMonth\n                  showMonthDropdown\n                  showYearDropdown\n                  dropdownMode=\"select\"\n                />\n              </div>\n            </div>\n            <div className={styles.lastName}>\n              <div className={styles.inputGeneralTitle}>Gender*</div>\n              <div>\n                {customSelect({\n                  placeholder: \"Gender*\",\n                  options: [\n                    { name: \"Male\" },\n                    { name: \"Female\" },\n                    { name: \"Others\" }\n                  ],\n                  value: fields.gender,\n                  handleChange: value => onChangeData(value, \"gender\"),\n                  showError: errors[\"gender\"]\n                })}\n              </div>\n            </div>\n          </div>\n          <div className={styles.inputWrapper}>\n            <div className={styles.firstName}>\n              <div className={styles.inputGeneralTitle}>Country*</div>\n              <div>\n                {customSelect({\n                  placeholder: \"Last Name*\",\n                  options: country_list,\n                  value: fields.country,\n                  handleChange: value => onChangeData(value, \"country\"),\n                  showError: errors[\"country\"]\n                })}\n              </div>\n            </div>\n            <div className={styles.lastName}>\n              <div className={styles.inputGeneralTitle}>State*</div>\n              <div>\n                {customInput({\n                  placeholder: \"State\",\n                  value: fields.city,\n                  handleChange: text => onChangeData(text, \"city\"),\n                  showError: errors[\"city\"]\n                })}\n              </div>\n            </div>\n          </div>\n          <div className={styles.inputWrapper}>\n            <div className={styles.firstName}>\n              <div className={styles.inputGeneralTitle}>Mobile No*</div>\n              <div>\n                {customInput({\n                  placeholder: selectedCountry\n                    ? selectedCountry.dial_code\n                    : \"+91\",\n                  value: fields.phone_number,\n                  handleChange: text => onChangeData(text, \"phone_number\"),\n                  showError: errors[\"phone_number\"]\n                })}\n              </div>\n            </div>\n            <div className={styles.lastName}>\n              <div className={styles.inputGeneralTitle}>Email*</div>\n              <div>\n                {customInput({\n                  placeholder: \"@\",\n                  value: fields.email,\n                  handleChange: text => onChangeData(text, \"email\"),\n                  showError: errors[\"email\"],\n                  disabled: true\n                })}\n              </div>\n            </div>\n          </div>\n          <div className={styles.inputWrapper}>\n            <div className={styles.firstName}>\n              <div className={styles.inputGeneralTitle}>Father Name*</div>\n              <div>\n                {customInput({\n                  placeholder: \"\",\n                  value: fields.father_name,\n                  handleChange: text => onChangeData(text, \"father_name\"),\n                  showError: errors[\"father_name\"]\n                })}\n              </div>\n            </div>\n            <div className={styles.lastName}>\n              <div className={styles.inputGeneralTitle}>Mother Name*</div>\n              <div>\n                {customInput({\n                  placeholder: \"\",\n                  value: fields.mother_name,\n                  handleChange: text => onChangeData(text, \"mother_name\"),\n                  showError: errors[\"mother_name\"]\n                })}\n              </div>\n            </div>\n          </div>\n          <div className={styles.languagesHeading}>Qualification</div>\n          <div className={styles.inputWrapper}>\n            <div className={styles.firstName}>\n              <div className={styles.inputGeneralTitle}>University</div>\n              <div>\n                {customInput({\n                  placeholder: \"\",\n                  value: fields.university,\n                  handleChange: text => onChangeData(text, \"university\")\n                })}\n              </div>\n            </div>\n            <div className={styles.lastName}>\n              <div className={styles.inputGeneralTitle}>Degree</div>\n              <div>\n                {customInput({\n                  placeholder: \"\",\n                  value: fields.degree,\n                  handleChange: text => onChangeData(text, \"degree\")\n                })}\n              </div>\n            </div>\n          </div>\n          <div className={styles.inputWrapper}>\n            <div className={styles.firstName}>\n              <div className={styles.inputGeneralTitle}>Stream</div>\n              <div>\n                {customInput({\n                  placeholder: \"\",\n                  value: fields.stream,\n                  handleChange: text => onChangeData(text, \"stream\")\n                })}\n              </div>\n            </div>\n            <div className={styles.lastName}>\n              <div className={styles.inputGeneralTitle}>Year</div>\n              <div>\n                {customInput({\n                  placeholder: \"\",\n                  value: fields.passout_year,\n                  handleChange: text => onChangeData(text, \"passout_year\"),\n                  type: \"number\"\n                })}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className={styles.profile_bottomImage}>\n        <Image\n          src={\n            \"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Fprofile_bottom.png?alt=media&token=c2340b81-26be-419f-b95b-310a07313fa3\"\n          }\n          alt=\"profiletab_rocket\"\n        />\n      </div>\n      <div className={styles.saveBtn}>\n        <Button\n          label={\"Save Profile\"}\n          height={41}\n          borderRadius={20}\n          backgroundColor=\"#1e768d\"\n          textStyle={{\n            color: \"#fff\",\n            fontWeight: \"bold\",\n            fontFamily: \"Montserrat\",\n            fontSize: \"16px\"\n          }}\n          loading={studentDashboardState.profileUpdateLoading}\n          border=\"none\"\n          onClick={() => updateProfile()}\n        />\n      </div>\n    </div>\n  );\n}\n","/home/tthinksys/tremendo_frontend/components/ProfileTab/ProfileTab.js",["315"],"import { useState, useContext, useEffect } from \"react\";\nimport { Image, Icon, Dimmer, Loader } from \"semantic-ui-react\";\nimport {\n  COOKIE_TOKEN,\n  EMAIL_REGULAR_EXPRESSION,\n  LOGIN_STUDENT_TAB,\n  USER_DETAILS\n} from \"../../utils/constants\";\nimport Input from \"../Input/Input\";\nimport styles from \"./ProfileTab.module.css\";\nimport DatePicker from \"react-datepicker\";\nimport DesktopOnly from \"../DeviceCheck/DesktopOnly\";\nimport { country_list } from \"../../utils/countriesList\";\nimport { GlobalContext } from \"../../Context/Provider\";\nimport { DeviceContext } from \"../../pages/_app\";\nimport moment from \"moment\";\nimport Button from \"../Button/Button\";\nimport phone from \"phone\";\nimport Cookies from \"js-cookie\";\nimport { toast } from \"react-toastify\";\nimport { getUserProfile } from \"../../Context/Actions/Auth/AuthAction\";\nimport {\n  updateMentorProfile,\n  UPDATE_PROFILE_DATA_SUCCESS\n} from \"../../Context/Actions/Dashboard/DashboardAction\";\nimport StudentDashboardSkelton from \"../Dashboard/StudentDashboardSkelton\";\nimport { storage } from \"../../utils/firebase-config\";\n\nexport default function ProfileTab({}) {\n  const [fields, setFields] = useState({\n    university: \"\",\n    passout_year: \"\",\n    stream: \"\",\n    degree: \"\",\n    country: \"India\"\n  });\n  const [errors, setErrors] = useState({});\n  const [uploadLoading, setUploadLoading] = useState(false);\n\n  const {\n    authState,\n    studentDashboardState,\n    studentDashboardDispatch: dispatch,\n    authDispatch: dispatchAuth\n  } = useContext(GlobalContext);\n\n  const customInput = ({\n    placeholder,\n    value,\n    disabled,\n    handleChange,\n    showError,\n    type = \"text\"\n  }) => {\n    return (\n      <Input\n        type={type}\n        placeholder={placeholder}\n        value={value}\n        disabled={disabled}\n        handleChange={text => handleChange(text)}\n        inputStyling={{\n          width: \"100%\",\n          fontSize: \"12px\",\n          color: \"#66666d\",\n          border: showError ? \"2px solid red\" : \"1px solid #cecedc\",\n          height: \"31px\",\n          paddingLeft: \"8px\",\n          fontFamily: \"Poppins\",\n          backgroundColor: \"#f8f8fa\"\n        }}\n      />\n    );\n  };\n\n  const customSelect = ({\n    placeholder,\n    options,\n    value,\n    handleChange,\n    showError\n  }) => {\n    return (\n      <select\n        className={styles.selectStyling}\n        placeholder={placeholder}\n        value={value}\n        onChange={event => handleChange(event.target.value)}\n        style={{ border: showError ? \"2px solid red\" : \"1px solid #cecedc\" }}\n      >\n        <option value={0}>Select</option>\n        {options.map((i, index) => (\n          <option value={i.name} key={index}>\n            {i.name}\n          </option>\n        ))}\n      </select>\n    );\n  };\n  const uploadFiles = image => {\n    setUploadLoading(true);\n    const uploadTask = storage.ref(`images/${image.name}`).put(image);\n    uploadTask.on(\n      \"state_changed\",\n      snapshot => {\n        const progress = Math.round(\n          (snapshot.bytesTransferred / snapshot.totalBytes) * 100\n        );\n        console.log(\"here\");\n      },\n      error => {\n        setUploadLoading(false);\n        console.log(error);\n      },\n      () => {\n        storage\n          .ref(\"images\")\n          .child(image.name)\n          .getDownloadURL()\n          .then(url => {\n            setFields({ ...fields, avatar: url });\n            setUploadLoading(false);\n          });\n      }\n    );\n  };\n  useEffect(() => {\n    updateFieldsValue();\n  }, []);\n\n  const updateFieldsValue = async () => {\n    const userUpdatedData = await getUserProfile(LOGIN_STUDENT_TAB)(\n      dispatchAuth\n    );\n    const profileDetails = userUpdatedData.data.user_data;\n\n    setFields({\n      ...fields,\n      ...profileDetails,\n      first_name: profileDetails.profile_name\n    });\n  };\n\n  const onChangeData = (value, type) => {\n    setFields({ ...fields, [type]: value });\n    setErrors({});\n  };\n  const handleChangeImage = e => {\n    uploadFiles(e.target.files[0]);\n  };\n\n  const updateProfile = async () => {\n    const selectedCountry = country_list.find(i => i.name === fields.country);\n    let errors = { ...errors };\n    if (!fields.first_name) {\n      errors[\"first_name\"] = true;\n      setErrors(errors);\n      return false;\n    } else if (!fields.last_name) {\n      errors[\"last_name\"] = true;\n      setErrors(errors);\n      return false;\n    } else if (!fields.dob) {\n      errors[\"dob\"] = true;\n      setErrors(errors);\n      return false;\n    } else if (!fields.gender) {\n      errors[\"gender\"] = true;\n      setErrors(errors);\n      return false;\n    } else if (!fields.country) {\n      errors[\"country\"] = true;\n      setErrors(errors);\n      return false;\n    } else if (!fields.city) {\n      errors[\"city\"] = true;\n      setErrors(errors);\n      return false;\n    } else if (!fields.phone_number) {\n      errors[\"phone_number\"] = true;\n      setErrors(errors);\n      return false;\n    } else if (\n      fields.phone_number &&\n      !phone(fields.phone_number, { country: selectedCountry.country_code })\n        .isValid\n    ) {\n      errors[\"phone_number\"] = true;\n      setErrors(errors);\n      return false;\n    } else if (!fields.email) {\n      errors[\"email\"] = true;\n      setErrors(errors);\n      return false;\n    } else if (fields.email && !EMAIL_REGULAR_EXPRESSION.test(fields.email)) {\n      errors[\"email\"] = true;\n      setErrors(errors);\n      return false;\n    } else if (!fields.father_name) {\n      errors[\"father_name\"] = true;\n      setErrors(errors);\n      return false;\n    } else if (!fields.mother_name) {\n      errors[\"mother_name\"] = true;\n      setErrors(errors);\n      return false;\n    } else {\n      const payload = { ...fields };\n      payload.access_token = Cookies.get(COOKIE_TOKEN);\n      const response = await updateMentorProfile(payload)(dispatch);\n      if (response.type == UPDATE_PROFILE_DATA_SUCCESS) {\n        toast.success(\"Profile Updated Successfully\", {\n          theme: \"colored\"\n        });\n        const userUpdatedData = await getUserProfile(LOGIN_STUDENT_TAB)(\n          dispatchAuth\n        );\n\n        setFields(userUpdatedData.data.user_data);\n      } else {\n        toast.error(\"Something Went Wrong\", {\n          theme: \"colored\"\n        });\n      }\n    }\n  };\n  const DateInput = ({ value, onClick }) => {\n    return (\n      <button\n        className={styles.dateInput}\n        style={{\n          width: \"100%\",\n          fontSize: \"12px\",\n          color: \"#66666d\",\n          border: \"1px solid #cecedc\",\n          height: \"31px\",\n          paddingLeft: \"8px\",\n          fontFamily: \"Poppins\",\n          backgroundColor: \"#f8f8fa\",\n          textAlign: \"left\"\n        }}\n        onClick={onClick}\n      >\n        {value ? value : \"DOB\"}\n      </button>\n    );\n  };\n\n  const profileDetails = authState.profileData.user_data;\n  const selectedCountry = country_list.find(i => i.name == fields.country);\n\n  if (authState.profileDataLoading) {\n    return <StudentDashboardSkelton />;\n  }\n  return (\n    <div className={styles.base}>\n      {uploadLoading && (\n        <Dimmer active>\n          <Loader />\n        </Dimmer>\n      )}\n      <div className={styles.profileBox}>\n        <div className={styles.headingProgressWrapper}>\n          <div className={styles.heading}>Profile Details</div>\n          {profileDetails?.profile_completed && (\n            <div className={styles.progress}>\n              <div className={styles.progressStrip}>\n                <div\n                  className={styles.status}\n                  style={{ width: `${profileDetails.profile_completed}%` }}\n                ></div>\n              </div>\n              <div\n                className={styles.progressTitle}\n              >{`Profile updated: ${profileDetails.profile_completed}%`}</div>\n            </div>\n          )}\n        </div>\n        <div className={styles.upperSection}>\n          <div style={{ width: \"22%\" }}>\n            <label htmlFor=\"upload-button\">\n              <div className={styles.profileImage}>\n                <Image\n                  src={\n                    fields.avatar\n                      ? fields.avatar\n                      : \"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Fblank_profile.png?alt=media&token=53afec48-03b2-4843-9b9c-8dc9c252ea41\"\n                  }\n                  circular\n                  alt=\"profiletab_rocket\"\n                  width={\"80px\"}\n                  height={\"80px\"}\n                />\n                <div className={styles.pictureChange}>Change Picture</div>\n              </div>\n            </label>\n            <input\n              type=\"file\"\n              id=\"upload-button\"\n              accept=\"image/x-png,image/gif,image/jpeg\"\n              style={{ display: \"none\" }}\n              onChange={handleChangeImage}\n            />\n            <br />\n          </div>\n\n          <div className={styles.namesWrapper}>\n            <div className={styles.profileName}>\n              <div className={styles.title}>Profile Name:</div>\n              <div className={styles.nameInput}>\n                {customInput({\n                  placeholder: \"Select\",\n                  value: profileDetails?.profile_name,\n                  disabled: true\n                })}\n              </div>\n            </div>\n            <div className={styles.profileName}>\n              <div className={styles.title}>Student Id</div>\n              <div className={styles.nameInput}>\n                {customInput({\n                  placeholder: \"Select\",\n                  value: profileDetails?.user_code,\n                  disabled: true\n                })}\n              </div>\n            </div>\n            <div className={styles.lastUpdatedBy}>\n              <div className={styles.title}>Last Updated By:</div>\n              <div className={styles.lastUpdateDate}>\n                {moment(profileDetails?.updated_at).format(\"DD.MM.YYYY\")}\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className={styles.middleSection}>\n          <div className={styles.personalInfoHeading}>Personal Information</div>\n          <div className={styles.inputWrapper}>\n            <div className={styles.firstName}>\n              <div className={styles.inputGeneralTitle}>First Name*</div>\n              <div>\n                {customInput({\n                  placeholder: \"First Name*\",\n                  value: fields.first_name,\n                  handleChange: text => onChangeData(text, \"first_name\"),\n                  showError: errors[\"first_name\"]\n                })}\n              </div>\n            </div>\n            <div className={styles.lastName}>\n              <div className={styles.inputGeneralTitle}>Last Name*</div>\n              <div>\n                {customInput({\n                  placeholder: \"Last Name*\",\n                  value: fields.last_name,\n                  handleChange: text => onChangeData(text, \"last_name\"),\n                  showError: errors[\"last_name\"]\n                })}\n              </div>\n            </div>\n          </div>\n          <div className={styles.inputWrapper}>\n            <div className={styles.firstName}>\n              <div className={styles.inputGeneralTitle}>DOB*</div>\n              <div>\n                <DatePicker\n                  selected={fields.dob ? moment(fields.dob)._d : \"\"}\n                  onChange={date => onChangeData(moment(date).format(), \"dob\")}\n                  customInput={<DateInput />}\n                  dateFormat=\"MMMM d, yyyy\"\n                  maxDate={moment().subtract(14, \"years\")._d}\n                  peekNextMonth\n                  showMonthDropdown\n                  showYearDropdown\n                  dropdownMode=\"select\"\n                />\n              </div>\n            </div>\n            <div className={styles.lastName}>\n              <div className={styles.inputGeneralTitle}>Gender*</div>\n              <div>\n                {customSelect({\n                  placeholder: \"Gender*\",\n                  options: [\n                    { name: \"Male\" },\n                    { name: \"Female\" },\n                    { name: \"Others\" }\n                  ],\n                  value: fields.gender,\n                  handleChange: value => onChangeData(value, \"gender\"),\n                  showError: errors[\"gender\"]\n                })}\n              </div>\n            </div>\n          </div>\n          <div className={styles.inputWrapper}>\n            <div className={styles.firstName}>\n              <div className={styles.inputGeneralTitle}>Country*</div>\n              <div>\n                {customSelect({\n                  placeholder: \"Last Name*\",\n                  options: country_list,\n                  value: fields.country,\n                  handleChange: value => onChangeData(value, \"country\"),\n                  showError: errors[\"country\"]\n                })}\n              </div>\n            </div>\n            <div className={styles.lastName}>\n              <div className={styles.inputGeneralTitle}>State*</div>\n              <div>\n                {customInput({\n                  placeholder: \"State\",\n                  value: fields.city,\n                  handleChange: text => onChangeData(text, \"city\"),\n                  showError: errors[\"city\"]\n                })}\n              </div>\n            </div>\n          </div>\n          <div className={styles.inputWrapper}>\n            <div className={styles.firstName}>\n              <div className={styles.inputGeneralTitle}>Mobile No*</div>\n              <div>\n                {customInput({\n                  placeholder: selectedCountry\n                    ? selectedCountry.dial_code\n                    : \"+91\",\n                  value: fields.phone_number,\n                  handleChange: text => onChangeData(text, \"phone_number\"),\n                  showError: errors[\"phone_number\"]\n                })}\n              </div>\n            </div>\n            <div className={styles.lastName}>\n              <div className={styles.inputGeneralTitle}>Email*</div>\n              <div>\n                {customInput({\n                  placeholder: \"@\",\n                  value: fields.email,\n                  handleChange: text => onChangeData(text, \"email\"),\n                  showError: errors[\"email\"],\n                  disabled: true\n                })}\n              </div>\n            </div>\n          </div>\n          <div className={styles.inputWrapper}>\n            <div className={styles.firstName}>\n              <div className={styles.inputGeneralTitle}>Father Name*</div>\n              <div>\n                {customInput({\n                  placeholder: \"\",\n                  value: fields.father_name,\n                  handleChange: text => onChangeData(text, \"father_name\"),\n                  showError: errors[\"father_name\"]\n                })}\n              </div>\n            </div>\n            <div className={styles.lastName}>\n              <div className={styles.inputGeneralTitle}>Mother Name*</div>\n              <div>\n                {customInput({\n                  placeholder: \"\",\n                  value: fields.mother_name,\n                  handleChange: text => onChangeData(text, \"mother_name\"),\n                  showError: errors[\"mother_name\"]\n                })}\n              </div>\n            </div>\n          </div>\n          <div className={styles.personalInfoHeading}>Qualification</div>\n          <div className={styles.inputWrapper}>\n            <div className={styles.firstName}>\n              <div className={styles.inputGeneralTitle}>University</div>\n              <div>\n                {customInput({\n                  placeholder: \"\",\n                  value: fields.university,\n                  handleChange: text => onChangeData(text, \"university\")\n                })}\n              </div>\n            </div>\n            <div className={styles.lastName}>\n              <div className={styles.inputGeneralTitle}>Degree</div>\n              <div>\n                {customInput({\n                  placeholder: \"\",\n                  value: fields.degree,\n                  handleChange: text => onChangeData(text, \"degree\")\n                })}\n              </div>\n            </div>\n          </div>\n          <div className={styles.inputWrapper}>\n            <div className={styles.firstName}>\n              <div className={styles.inputGeneralTitle}>Stream</div>\n              <div>\n                {customInput({\n                  placeholder: \"\",\n                  value: fields.stream,\n                  handleChange: text => onChangeData(text, \"stream\")\n                })}\n              </div>\n            </div>\n            <div className={styles.lastName}>\n              <div className={styles.inputGeneralTitle}>Year</div>\n              <div>\n                {customInput({\n                  placeholder: \"\",\n                  value: fields.passout_year,\n                  handleChange: text => onChangeData(text, \"passout_year\"),\n                  type: \"number\"\n                })}\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className={styles.saveBtn}>\n          <Button\n            label={\"Save Profile\"}\n            height={41}\n            borderRadius={20}\n            backgroundColor=\"#fa9116\"\n            textStyle={{\n              color: \"#fff\",\n              fontWeight: \"bold\",\n              fontFamily: \"Montserrat\",\n              fontSize: \"16px\"\n            }}\n            loading={studentDashboardState.profileUpdateLoading}\n            border=\"none\"\n            onClick={() => updateProfile()}\n          />\n        </div>\n      </div>\n      <DesktopOnly>\n        <div className={styles.imageWrapper}>\n          <Image\n            src={\n              \"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Fprofiletab_rocket.png?alt=media&token=84ff6e0e-4808-4f36-8d82-459b92dba539\"\n            }\n            alt=\"profiletab_rocket\"\n          />\n        </div>\n      </DesktopOnly>\n    </div>\n  );\n}\n","/home/tthinksys/tremendo_frontend/components/ProgressTab/MentorProgresstab.js",["316"],"import { useEffect, useContext, useState } from \"react\";\nimport styles from \"./MentorProgresstab.module.css\";\nimport { Bar, Line, Pie } from \"react-chartjs-2\";\nimport Chart from \"chart.js/auto\";\nimport StudentDashboardSkelton from \"../Dashboard/StudentDashboardSkelton\";\nimport moment from \"moment\";\nimport { Image, Modal, Input, Dropdown, Button } from \"semantic-ui-react\";\nimport { DeviceContext } from \"../../pages/_app\";\nimport axiosInstance from \"../../utils/axiosInstance\";\nimport { COOKIE_TOKEN } from \"../../utils/constants\";\nimport jsCookie from \"js-cookie\";\nimport ButtonComponent from \"../Button/Button\";\nimport DatePicker from \"react-datepicker\";\nimport { GlobalContext } from \"../../Context/Provider\";\n\nexport default function MentorProgresstab() {\n  const { isMobileView } = useContext(DeviceContext);\n  const [progressData, setProgressData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [leaveModal, setLeaveModal] = useState(false);\n  const [leaveFeilds, setLeaveFeilds] = useState({});\n\n  const { languageState } = useContext(GlobalContext);\n\n  useEffect(() => {\n    getProgressData();\n  }, []);\n  useEffect(() => {\n    if (document.getElementById(\"canvas\")) createCircle();\n  }, [progressData]);\n\n  const getProgressData = async () => {\n    setLoading(true);\n    try {\n      const response = await axiosInstance.get(\n        `/getMentorProgress?access_token=${jsCookie.get(\n          COOKIE_TOKEN\n        )}&batch_id=${languageState.storedMentorBatch.batch_id}`\n      );\n      setProgressData(response.data.data);\n\n      setLoading(false);\n    } catch (err) {\n      setLoading(false);\n    }\n  };\n\n  const createCircle = () => {\n    let can = document.getElementById(\"canvas\"),\n      spanProcent = document.getElementById(\"procent\"),\n      c = can?.getContext(\"2d\");\n    const percentage = can?.getAttribute(\"data-percent\");\n    let posX = can.width / 2,\n      posY = can.height / 2,\n      fps = 1000 / 200,\n      procent = 0,\n      oneProcent = 360 / 100,\n      result = oneProcent * percentage;\n\n    c.lineCap = \"round\";\n    arcMove();\n\n    function arcMove() {\n      var deegres = 0;\n      var acrInterval = setInterval(function() {\n        deegres += 1;\n        c.clearRect(0, 0, can.width, can.height);\n        procent = deegres / oneProcent;\n\n        spanProcent.innerHTML = procent.toFixed();\n\n        c.beginPath();\n        c.arc(\n          posX,\n          posY,\n          100,\n          (Math.PI / 180) * 270,\n          (Math.PI / 180) * (270 + 360)\n        );\n        c.strokeStyle = \"#f2ddc0\";\n        c.lineWidth = \"20\";\n        c.stroke();\n\n        c.beginPath();\n        c.strokeStyle = \"#F4910A\";\n        c.lineWidth = \"20\";\n        c.arc(\n          posX,\n          posY,\n          100,\n          (Math.PI / 180) * 270,\n          (Math.PI / 180) * (270 + deegres)\n        );\n        c.stroke();\n        if (deegres >= result) clearInterval(acrInterval);\n      }, fps);\n    }\n  };\n\n  const options = {\n    maintainAspectRatio: false,\n    scales: {\n      x: {\n        display: false,\n        title: {\n          display: false\n        },\n        grid: {\n          display: false\n        }\n      },\n      y: {\n        title: {\n          display: false\n        },\n        beginAtZero: true,\n        grid: {\n          display: false\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        display: false\n      }\n    }\n  };\n  const lineChartOption = {\n    maintainAspectRatio: false,\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: \"Day\",\n          color: \"#7b7b7b\",\n          font: {\n            family: \"Poppins\",\n            size: 14,\n            weight: \"bold\"\n          }\n        },\n        ticks: {\n          callback: function(value) {\n            return value + 1;\n          }\n        },\n        grid: {\n          display: false\n        }\n      },\n      y: {\n        title: {\n          display: true,\n          text: \"Score\",\n          color: \"#7b7b7b\",\n          font: {\n            family: \"Poppins\",\n            size: 14,\n            weight: \"bold\"\n          }\n        },\n        beginAtZero: true,\n        suggestedMax: 100,\n        grid: {\n          display: false\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        display: false\n      },\n      tooltip: {\n        displayColors: false,\n        titleAlign: \"center\",\n        callbacks: {\n          title: function(context) {\n            return `${context[0].formattedValue}%`;\n          },\n          label: function(context) {\n            return \"Total score : 100\";\n          },\n          footer: function(context) {\n            return `Score : ${context[0].formattedValue}`;\n          }\n        }\n      }\n    }\n  };\n  const DateInput = ({ value, onClick, placeholder }) => {\n    return (\n      <button\n        className={styles.dateInput}\n        style={{\n          width: \"100%\",\n          fontSize: \"12px\",\n          color: \"#66666d\",\n          border: \"1px solid #cecedc\",\n          height: \"31px\",\n          paddingLeft: \"8px\",\n          fontFamily: \"Poppins\",\n          backgroundColor: \"#f8f8fa\",\n          textAlign: \"left\"\n        }}\n        onClick={onClick}\n      >\n        {value ? value : placeholder}\n      </button>\n    );\n  };\n  const onHandleChange = (value, type) => {\n    setLeaveFeilds({ ...leaveFeilds, [type]: value });\n  };\n\n  const applyLeave = async () => {\n    setLoading(true);\n    const payload = {\n      access_token: jsCookie.get(COOKIE_TOKEN),\n      lang_code: languageState.storedMentorBatch.code,\n      leave_date: moment(leaveFeilds.leave_date).format(\"DD/MM/YYYY\"),\n      reason: leaveFeilds.reason,\n      leave_type: \"cl\"\n    };\n    try {\n      const response = await axiosInstance.post(`/applyMentorLeave`, payload);\n      setLeaveModal(false);\n      setLoading(false);\n    } catch (err) {\n      setLoading(false);\n      setLeaveModal(false);\n    }\n  };\n  const applyLeaveModal = () => {\n    return (\n      <Modal\n        onClose={() => setLeaveModal(false)}\n        open={leaveModal}\n        closeIcon\n        size={\"tiny\"}\n      >\n        <Modal.Header>Leave Application</Modal.Header>\n        <Modal.Content>\n          <Modal.Description>\n            <div style={{ marginBottom: \"20px\" }}>\n              <DatePicker\n                selected={\n                  leaveFeilds.leave_date\n                    ? moment(leaveFeilds.leave_date)._d\n                    : \"\"\n                }\n                onChange={date =>\n                  onHandleChange(moment(date).format(), \"leave_date\")\n                }\n                placeholderText=\"Leave Date\"\n                customInput={<DateInput />}\n                dateFormat=\"MMMM d, yyyy\"\n                minDate={Date.now()}\n                dropdownMode=\"select\"\n              />\n            </div>\n            <div>\n              <Input\n                placeholder=\"Reason \"\n                onChange={(e, data) => onHandleChange(data.value, \"reason\")}\n                style={{ width: \"100%\" }}\n              />\n            </div>\n          </Modal.Description>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button color=\"red\" onClick={() => setLeaveModal(false)}>\n            Close\n          </Button>\n          <Button\n            content=\"Submit Leave\"\n            labelPosition=\"right\"\n            icon=\"checkmark\"\n            onClick={() => applyLeave()}\n            positive\n            loading={loading}\n          />\n        </Modal.Actions>\n      </Modal>\n    );\n  };\n  const totalDatesInCurrentMonth = Array.from(\n    Array(moment().daysInMonth()).keys()\n  );\n  console.log(progressData);\n  // if (true) {\n  //   return (\n  //     <div\n  //       style={{\n  //         height: isMobileView ? \"300px\" : \"700px\",\n  //         width: isMobileView ? \"300px\" : \"700px\",\n  //         margin: \"auto\"\n  //       }}\n  //     >\n  //       <Image\n  //         src=\"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Fno_data.png?alt=media&token=79834bd2-97fa-4f63-897f-fe9498236194\"\n  //         alt=\"tremendo dashboard banner\"\n  //         height={isMobileView ? \"300px\" : \"800px\"}\n  //         width={isMobileView ? \"300px\" : \"700px\"}\n  //         className={styles.banner}\n  //       />\n  //     </div>\n  //   );\n  // }\n  if (loading) {\n    return <StudentDashboardSkelton />;\n  }\n  const scores = progressData.score_data?.map(i => i.avg_score);\n  const marks = progressData.progress_data?.map(i => i.student_score);\n  const attendence = progressData.attandance_data;\n  const lineIndication = [\n    { name: \"High\", color: \"#00a651\" },\n    { name: \"Average\", color: \"#3bbafb\" },\n    { name: \"Low\", color: \"#ffb922\" }\n  ];\n  const presentPercentage =\n    (attendence?.present_count /\n      (attendence?.present_count + attendence?.absent_count)) *\n    100;\n  console.log(presentPercentage);\n  return (\n    <div className={styles.base}>\n      <div className={styles.scoreChartWrapper}>\n        <div className={styles.chartHeading}>Score</div>\n        <div className={styles.lineChartWrapper}>\n          <div className={styles.lineChart}>\n            <Line\n              data={{\n                labels: totalDatesInCurrentMonth,\n                datasets: [\n                  {\n                    data: scores,\n                    backgroundColor: [\n                      \"#ffb922\",\n                      \"#3bbafb\",\n                      \"#00a651\",\n                      \"#3bbafb\",\n                      \"#ffb922\",\n                      \"#3bbafb\",\n                      \"#00a651\",\n                      \"#3bbafb\",\n                      \"#ffb922\",\n                      \"#3bbafb\",\n                      \"#00a651\",\n                      \"#3bbafb\"\n                    ],\n                    fill: {\n                      target: \"origin\",\n                      above: \"#FFF6E3\", // Area will be red above the origin\n                      below: \"#FFF6E3\" // And blue below the origin\n                    },\n                    borderColor: \"#000\",\n                    borderWidth: 1\n                  }\n                ]\n              }}\n              width={500}\n              height={300}\n              options={lineChartOption}\n            />\n          </div>\n          <div className={styles.indicationPoints}>\n            {lineIndication.map(i => (\n              <div className={styles.namePointWrapper} key={i.name}>\n                <div\n                  className={styles.pointsSteps}\n                  style={{ backgroundColor: i.color }}\n                ></div>\n                <div className={styles.stepsNames}>{i.name}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n      <div className={styles.chartWrapper}>\n        <div className={styles.progressChart}>\n          <div className={styles.chartHeading}>Batch Progress</div>\n          <div className={styles.progressChartBox}>\n            <div className={styles.barChart}>\n              <Bar\n                data={{\n                  labels: [\n                    \"Stu 1\",\n                    \"Stu 2\",\n                    \"Stu 3\",\n                    \"Stu 4\",\n                    \"Stu 5\",\n                    \"Stu 6\",\n                    \"Stu 5\",\n                    \"Stu 6\"\n                  ],\n                  datasets: [\n                    {\n                      data: marks,\n                      backgroundColor: [\n                        \"#8BDCDB\",\n                        \"#8BDCDB\",\n                        \"#8BDCDB\",\n                        \"#8BDCDB\",\n                        \"#8BDCDB\",\n                        \"#8BDCDB\",\n                        \"#8BDCDB\",\n                        \"#8BDCDB\"\n                      ],\n                      order: 2\n                    },\n                    {\n                      data: marks,\n                      backgroundColor: \"#fff\",\n                      borderColor: \"#fa9116\",\n\n                      order: 1,\n                      type: \"line\"\n                    }\n                  ]\n                }}\n                options={options}\n              />\n            </div>\n          </div>\n        </div>\n        <div className={styles.attendenceChart}>\n          <div className={styles.chartHeading}>Attendance</div>\n          <div className={styles.canvasWrap}>\n            <canvas\n              id=\"canvas\"\n              width=\"240\"\n              height=\"240\"\n              data-percent={presentPercentage}\n            ></canvas>\n            <div className={styles.showProgress} id=\"procent\"></div>\n          </div>\n          <div className={styles.applyLeaveBtn}>\n            <ButtonComponent\n              label={\"Apply Leave\"}\n              height={25}\n              borderRadius={8}\n              backgroundColor={\"#f98e46\"}\n              textStyle={{\n                color: \"#fff\",\n                fontWeight: \"bold\",\n                fontFamily: \"Open Sans\",\n                fontSize: \"12px\"\n              }}\n              border=\"none\"\n              onClick={() => setLeaveModal(true)}\n            />\n          </div>\n        </div>\n      </div>\n      {applyLeaveModal()}\n    </div>\n  );\n}\n","/home/tthinksys/tremendo_frontend/components/ProgressTab/ProgressTab.js",["317"],"import styles from \"./ProgressTab.module.css\";\nimport { Bar, Line, Pie } from \"react-chartjs-2\";\nimport Chart from \"chart.js/auto\";\nimport ChartDataLabels from \"chartjs-plugin-datalabels\";\nimport StudentDashboardSkelton from \"../Dashboard/StudentDashboardSkelton\";\nimport moment from \"moment\";\nimport { useContext, useEffect } from \"react\";\nimport { DeviceContext } from \"../../pages/_app\";\nimport { Image } from \"semantic-ui-react\";\nimport { GlobalContext } from \"../../Context/Provider\";\nimport { getStudentProgress } from \"../../Context/Actions/Dashboard/DashboardAction\";\n\nexport default function ProgressTab({}) {\n  const { isMobileView } = useContext(DeviceContext);\n  const {\n    studentDashboardState,\n    languageState,\n    studentDashboardDispatch: dispatch\n  } = useContext(GlobalContext);\n  useEffect(() => {\n    if (languageState.setStudentSelectedLanguage?.batch_id)\n      getStudentProgress(languageState.setStudentSelectedLanguage.batch_id)(\n        dispatch\n      );\n  }, []);\n  const options = {\n    maintainAspectRatio: false,\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: \"Student\",\n          color: \"#7b7b7b\",\n          font: {\n            family: \"Poppins\",\n            size: 14,\n            weight: \"bold\"\n          }\n        },\n        grid: {\n          display: false\n        }\n      },\n      y: {\n        title: {\n          display: true,\n          text: \"Score\",\n          color: \"#7b7b7b\",\n          font: {\n            family: \"Poppins\",\n            size: 14,\n            weight: \"bold\"\n          }\n        },\n        beginAtZero: true,\n        grid: {\n          display: false\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        display: false\n      }\n    }\n  };\n\n  const lineChartOption = {\n    maintainAspectRatio: false,\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: \"Day\",\n          color: \"#7b7b7b\",\n          font: {\n            family: \"Poppins\",\n            size: 14,\n            weight: \"bold\"\n          }\n        },\n        ticks: {\n          callback: function(value) {\n            return value + 1;\n          }\n        },\n        grid: {\n          display: false\n        }\n      },\n      y: {\n        title: {\n          display: true,\n          text: \"Score\",\n          color: \"#7b7b7b\",\n          font: {\n            family: \"Poppins\",\n            size: 14,\n            weight: \"bold\"\n          }\n        },\n        beginAtZero: true,\n        suggestedMax: 100,\n        grid: {\n          display: false\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        display: false\n      },\n      tooltip: {\n        displayColors: false,\n        titleAlign: \"center\",\n        callbacks: {\n          title: function(context) {\n            return `${context[0].formattedValue}%`;\n          },\n          label: function(context) {\n            return \"Total score : 100\";\n          },\n          footer: function(context) {\n            return `Score : ${context[0].formattedValue}`;\n          }\n        }\n      }\n    }\n  };\n\n  const pieChartOption = {\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        display: false\n      }\n    }\n  };\n  const totalDatesInCurrentMonth = Array.from(\n    Array(moment().daysInMonth()).keys()\n  );\n  // if (studentDashboardState.getStudentProgress?.score?.length == 0) {\n  //   return (\n  //     <div\n  //       style={{\n  //         height: isMobileView ? \"300px\" : \"700px\",\n  //         width: isMobileView ? \"300px\" : \"700px\",\n  //         margin: \"auto\"\n  //       }}\n  //     >\n  //       <Image\n  //         src=\"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Fno_data.png?alt=media&token=79834bd2-97fa-4f63-897f-fe9498236194\"\n  //         alt=\"tremendo dashboard banner\"\n  //         height={isMobileView ? \"300px\" : \"800px\"}\n  //         width={isMobileView ? \"300px\" : \"700px\"}\n  //         className={styles.banner}\n  //       />\n  //     </div>\n  //   );\n  // }\n\n  if (studentDashboardState.getStudentProgressLoading) {\n    return <StudentDashboardSkelton />;\n  }\n  const scores = studentDashboardState.getStudentProgress?.score?.map(\n    i => i.my_score\n  );\n  const studentProgress =\n    studentDashboardState.getStudentProgress.batch_progress;\n  const studentAttendence = studentDashboardState.getStudentProgress.attandance;\n  const presentPercentage = (\n    (studentAttendence?.present / studentAttendence?.total_days) *\n    100\n  )?.toFixed(2);\n  const absentPercentage = (\n    (studentAttendence?.absent / studentAttendence?.total_days) *\n    100\n  )?.toFixed(2);\n  const lineIndication = [\n    { name: \"Low\", color: \"#ffb922\", height: \"34px\" },\n    { name: \"Average\", color: \"#3bbafb\", height: \"220px\" },\n    { name: \"High\", color: \"#00a651\", height: \"180px\" }\n  ];\n  return (\n    <div className={styles.base}>\n      <div className={styles.chartHeading}>Score</div>\n      <div className={styles.lineChartWrapper}>\n        <div className={styles.lineChart}>\n          <Line\n            data={{\n              labels: totalDatesInCurrentMonth,\n              datasets: [\n                {\n                  data: scores,\n                  backgroundColor: [\n                    \"#ffb922\",\n                    \"#3bbafb\",\n                    \"#00a651\",\n                    \"#3bbafb\",\n                    \"#ffb922\",\n                    \"#3bbafb\",\n                    \"#00a651\",\n                    \"#3bbafb\",\n                    \"#ffb922\",\n                    \"#3bbafb\",\n                    \"#00a651\",\n                    \"#3bbafb\"\n                  ],\n                  fill: {\n                    target: \"origin\",\n                    above: \"#c1ffdf\", // Area will be red above the origin\n                    below: \"#c1ffdf\" // And blue below the origin\n                  },\n                  tension: 2,\n                  showLine: false,\n                  cubicInterpolationMode: \"monotone\"\n                }\n              ]\n            }}\n            width={500}\n            height={300}\n            options={lineChartOption}\n          />\n        </div>\n        {!isMobileView && (\n          <div className={styles.indicationPoints}>\n            {lineIndication.map(i => (\n              <div className={styles.namePointWrapper} key={i.name}>\n                <div className={styles.stepsNames}>{i.name}</div>\n                <div\n                  className={styles.pointsSteps}\n                  style={{ backgroundColor: i.color, height: i.height }}\n                ></div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n      <div className={styles.chartWrapper}>\n        <div className={styles.progressChart}>\n          <div className={styles.chartHeading}>Progress</div>\n          <div className={styles.progressChartBox}>\n            <div className={styles.barChart}>\n              <Bar\n                data={{\n                  labels: [\"Highest\", \"Average\", \"My\"],\n                  datasets: [\n                    {\n                      data: [\n                        studentProgress?.highiest_score,\n                        studentProgress?.average_score,\n                        studentProgress?.my_score\n                      ],\n                      backgroundColor: [\"#055c4d\", \"#e78109\", \"#0289d6\"]\n                    }\n                  ]\n                }}\n                options={options}\n              />\n            </div>\n            <div className={styles.barLabels}>\n              <div className={styles.labelWrap}>\n                <div className={styles.labelIndication}></div>\n                <div className={styles.labelText}>Highest score</div>\n              </div>\n              <div className={styles.labelWrap}>\n                <div className={styles.avgIndication}></div>\n                <div className={styles.labelText}>Average score</div>\n              </div>\n              <div className={styles.labelWrap}>\n                <div className={styles.myScoreIndication}></div>\n                <div className={styles.labelText}>My score</div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className={styles.attendenceChart}>\n          <div className={styles.chartHeading}>Attendance</div>\n          <div className={styles.attendenceChartBox}>\n            <div className={styles.pieChart}>\n              <Pie\n                data={{\n                  labels: [\"Present\", \"Absent\"],\n                  datasets: [\n                    {\n                      data: [presentPercentage, absentPercentage],\n                      backgroundColor: [\"#F1B71B\", \"#ED4F32\"],\n                      datalabels: {\n                        display: true,\n                        color: \"#fff\",\n                        font: {\n                          size: \"14\",\n                          weight: \"bold\",\n                          family: \"Poppins\"\n                        },\n                        formatter: function(value) {\n                          return `${value}%`;\n                        }\n                      }\n                    }\n                  ]\n                }}\n                plugins={[ChartDataLabels]}\n                options={pieChartOption}\n              />\n            </div>\n            <div className={styles.pieChartLabel}>\n              <div className={styles.pielabelWrap}>\n                <div className={styles.piePresentIndication}></div>\n                <div className={styles.pielabelText}>Present</div>\n              </div>\n              <div className={styles.pielabelWrap}>\n                <div className={styles.pieAbsentIndication}></div>\n                <div className={styles.pielabelText}>Absent</div>\n              </div>\n            </div>\n            <div className={styles.totalDays}>Total Days: 60</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/home/tthinksys/tremendo_frontend/components/PromotionBox/PromotionBox.js",[],"/home/tthinksys/tremendo_frontend/components/ReadMore/ReadMore.js",[],"/home/tthinksys/tremendo_frontend/components/ReviewBox/ReviewBox.js",[],"/home/tthinksys/tremendo_frontend/components/Skelton/LanguageDetailSkelton.js",[],"/home/tthinksys/tremendo_frontend/components/Skelton/Skeleton.js",[],"/home/tthinksys/tremendo_frontend/components/StatusBar/StatusBar.js",[],"/home/tthinksys/tremendo_frontend/components/Tab/AdminTab.js",[],"/home/tthinksys/tremendo_frontend/components/Tab/Tab.js",["318","319"],"import Input from \"../Input/Input\";\nimport styles from \"./Tab.module.css\";\nimport moment from \"moment\";\nimport IconComponent from \"../../assets/Icon/Icon\";\nimport ImageComponent from \"next/image\";\nimport { USER_DETAILS } from \"../../utils/constants\";\nimport CustomImage from \"../Image/Image\";\nimport DesktopOnly from \"../DeviceCheck/DesktopOnly\";\nimport MobileOnly from \"../DeviceCheck/MobileOnly\";\nimport {\n  Icon,\n  Image,\n  Menu,\n  Segment,\n  Sidebar,\n  Dropdown,\n  Label\n} from \"semantic-ui-react\";\nimport { useState, useContext, useEffect } from \"react\";\nimport { GlobalContext } from \"../../Context/Provider\";\nimport {\n  getMentorDashboardData,\n  getMentorStudentList\n} from \"../../Context/Actions/Dashboard/DashboardAction\";\nimport {\n  setStudentSelectedLanguage,\n  storeMentorBatch\n} from \"../../Context/Actions/Language/LanguageAction\";\n\nexport default function Tab({\n  tabsData,\n  selectTab,\n  selectedTab,\n  studentDashboard,\n  sendDataCallback\n}) {\n  const [visible, setVisible] = useState(false);\n  const [startSearch, setStartSearch] = useState(false);\n  const [inputVal, setInputValue] = useState(\"\");\n  const [selectedBatch, setSelectedBatches] = useState(\"\");\n  const {\n    studentDashboardState,\n    authState,\n    languageState,\n    languageDispatch: langDispatch,\n    studentDashboardDispatch: dispatch\n  } = useContext(GlobalContext);\n  const SELECTED_TAB_COLOR = \"#ff9000\";\n  const name =\n    typeof window !== \"undefined\" && localStorage.getItem(USER_DETAILS)\n      ? JSON.parse(localStorage.getItem(USER_DETAILS)).name\n      : \"User\";\n\n  const onChangeSearch = text => {\n    setInputValue(text);\n  };\n  const onFocusHandle = () => {\n    setStartSearch(true);\n  };\n  const optionSelected = data => {\n    setInputValue(data.tab);\n    sendDataCallback(data.id);\n    setStartSearch(false);\n  };\n  useEffect(() => {\n    if (\n      studentDashboardState.mentorBatches &&\n      studentDashboardState.mentorBatches.length > 0\n    ) {\n      const id = studentDashboardState.mentorBatches[0].batch_id;\n      onHandleChangeBatch(id);\n    }\n  }, []);\n  useEffect(() => {\n    if (studentDashboard) {\n      setStudentSelectedLanguage(authState.profileData.current_language)(\n        langDispatch\n      );\n    } else {\n      storeMentorBatch(authState.profileData.current_language)(langDispatch);\n    }\n  }, [authState.profileData]);\n  let searchOptions = tabsData;\n\n  if (inputVal.length > 1) {\n    searchOptions = tabsData.filter(list =>\n      list.tab.toLowerCase().includes(inputVal.trim().toLowerCase())\n    );\n  }\n  const mentorBatches = studentDashboardState.mentorBatches.map(i => {\n    return {\n      text: `${i.batch_language}-${i.batch_id}`,\n      value: i.batch_id\n    };\n  });\n  const onHandleChangeBatch = async id => {\n    const curr = new Date(); // get current date\n    const first = curr.getDate() - curr.getDay(); // First day is the day of the month - the day of the week\n    const last = first + 6; // last day is the first day + 6\n\n    const firstday = moment(new Date(curr.setDate(first))).format(\"x\");\n    const lastday = moment(new Date(curr.setDate(last))).format(\"x\");\n    const selectedBatch = authState.profileData.all_languages.find(\n      i => i.batch_id == id\n    );\n    storeMentorBatch(selectedBatch)(langDispatch);\n    await getMentorStudentList(id)(dispatch);\n    getMentorDashboardData(id, firstday, lastday)(dispatch);\n  };\n  const onChangeStudentBatch = value => {\n    const selectedBatch = authState.profileData.all_languages.find(\n      i => i.batch_id == value\n    );\n    setStudentSelectedLanguage(selectedBatch)(langDispatch);\n  };\n\n  const countryOptions = authState.profileData?.all_languages?.map(i => {\n    return { key: i.code, value: i.batch_id, flag: i.flag, text: i.name };\n  });\n\n  return (\n    <>\n      <DesktopOnly>\n        <div\n          className={styles.base}\n          style={{ backgroundColor: studentDashboard ? \"#ecf8f8\" : \"#ffecd6\" }}\n        >\n          <div className={styles.leftSection}>\n            {studentDashboard ? (\n              <div className={styles.flagSection}>\n                {countryOptions?.length != 0 && (\n                  <Dropdown\n                    fluid\n                    selection\n                    value={languageState.setStudentSelectedLanguage?.batch_id}\n                    options={countryOptions}\n                    onChange={(e, data) => onChangeStudentBatch(data.value)}\n                  />\n                )}\n              </div>\n            ) : (\n              <div className={styles.mentorBatchDetails}>\n                {mentorBatches?.length != 0 && (\n                  <Dropdown\n                    className={styles.batchesDropDown}\n                    fluid\n                    selection\n                    value={languageState.storedMentorBatch?.batch_id}\n                    options={mentorBatches}\n                    onChange={(e, data) => onHandleChangeBatch(data.value)}\n                  />\n                )}\n              </div>\n            )}\n            <div className={styles.tabWrapper}>\n              {tabsData.map((i, index) => (\n                <div\n                  className={styles.tabs}\n                  key={index}\n                  onClick={() => selectTab(i)}\n                  style={{ backgroundColor: selectedTab == i.id && \"#fbeedf\" }}\n                >\n                  <div className={styles.tabIcon}>\n                    <IconComponent\n                      name={i.icon}\n                      color={\n                        selectedTab == i.id ? SELECTED_TAB_COLOR : \"#2a2a2a\"\n                      }\n                      fill={selectedTab == i.id}\n                    />\n                  </div>\n                  <div className={styles.tabName}>{i.tab}</div>\n                </div>\n              ))}\n            </div>\n            {studentDashboard && (\n              <div className={styles.footerBanner}>\n                <div className={styles.footerText}>\n                  Lorem Ipsum is simply dummy text of the printing and\n                  typesetting industry.\n                </div>\n                <div className={styles.footerImg}>\n                  <ImageComponent\n                    src={\n                      \"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2FtabFooterImage.png?alt=media&token=3f94b3bf-78a1-4788-a301-4c74d2777f1b\"\n                    }\n                    alt=\"tremendo footer image dashboard\"\n                    width={\"165px\"}\n                    height={\"128px\"}\n                  />\n                </div>\n              </div>\n            )}\n          </div>\n          <div\n            className={styles.centerSection}\n            style={{\n              backgroundColor: studentDashboard ? \"#fff6eb\" : \"#f8f7f6\"\n            }}\n          >\n            <div className={styles.searchHeader}>\n              <div\n                className={styles.lens}\n                style={{\n                  backgroundColor: studentDashboard ? \"#ecf8f8\" : \"#f8f8f8\"\n                }}\n              >\n                <IconComponent\n                  name={\"lens\"}\n                  color={studentDashboard ? \"#25908d\" : \"#3f4242\"}\n                />\n              </div>\n              <div className={styles.search}>\n                <Input\n                  placeholder={\"What Are you looking for?\"}\n                  inputStyling={{\n                    width: \"100%\",\n                    fontSize: \"13px\",\n                    backgroundColor: studentDashboard ? \"#ecf8f8\" : \"#f8f8f8\",\n                    color: \"#1b1c1c\",\n                    padding: \"8px 15px\"\n                  }}\n                  value={inputVal}\n                  handleChange={text => onChangeSearch(text)}\n                  onHandleFocus={() => onFocusHandle()}\n                />\n              </div>\n              <div className={styles.dateSection}>{`${moment().format(\n                \"dddd\"\n              )}, ${moment().format(\"LL\")}`}</div>\n            </div>\n            {startSearch && (\n              <div className={styles.optionWrapper}>\n                {searchOptions.length > 0 ? (\n                  searchOptions.map((name, index) => (\n                    <div\n                      className={styles.searchOptions}\n                      key={index}\n                      onClick={() => optionSelected(name)}\n                    >\n                      {name.tab}\n                    </div>\n                  ))\n                ) : (\n                  <div className={styles.searchOptions}>No Result</div>\n                )}\n              </div>\n            )}\n            <div className={styles.childrenSection}>\n              {tabsData[selectedTab - 1].component}\n            </div>\n          </div>\n          <div className={styles.rightSection}>\n            <div className={styles.topHeader}>\n              <div className={styles.profileWrapper}>\n                <div className={styles.profileName}>{`Hi, ${\n                  name.split(\" \")[0]\n                }`}</div>\n              </div>\n              <div className={styles.notification}>\n                <IconComponent name=\"notification\" color=\"#ff9000\" />\n              </div>\n            </div>\n            {studentDashboard\n              ? studentDashboardState.studentUpcomingTasks?.length > 0 && (\n                  <div className={styles.upcomingTaskSection}>\n                    <div className={styles.upcomingTaskHeading}>\n                      Upcoming Task\n                    </div>\n                    <div className={styles.upcomingTaskBox}>\n                      {studentDashboardState.studentUpcomingTasks?.map(\n                        (i, index) => (\n                          <div className={styles.taskWrapper} key={index}>\n                            <div className={styles.taskImage}></div>\n                            <div className={styles.taskDetail}>\n                              <div className={styles.taskName}>{i.title}</div>\n                              <div className={styles.taskTime}>\n                                {moment(i.start_date).format(\"LL\")}\n                              </div>\n                            </div>\n                          </div>\n                        )\n                      )}\n                    </div>\n                  </div>\n                )\n              : studentDashboardState.mentorUpcomingTask?.length > 0 && (\n                  <div className={styles.upcomingTaskSection}>\n                    <div className={styles.upcomingTaskHeading}>\n                      Upcoming Task\n                    </div>\n                    <div className={styles.upcomingTaskBox}>\n                      {studentDashboardState.mentorUpcomingTask?.map(\n                        (i, index) => (\n                          <div className={styles.taskWrapper} key={index}>\n                            <div className={styles.taskImage}></div>\n                            <div className={styles.taskDetail}>\n                              <div className={styles.taskName}>{i.title}</div>\n                              <div className={styles.taskTime}>\n                                {moment(i.start_date).format(\"LL\")}\n                              </div>\n                            </div>\n                          </div>\n                        )\n                      )}\n                    </div>\n                  </div>\n                )}\n            <div className={styles.letsTalkSection}>\n              <div className={styles.upcomingTaskHeading}>Let’s Talk</div>\n              <div>\n                <iframe\n                  src=\"https://discord.com/widget?id=960554347324907540&theme=dark\"\n                  width={\"100%\"}\n                  height=\"500\"\n                  allowtransparency=\"true\"\n                  frameBorder={\"0\"}\n                  sandbox=\"allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts\"\n                ></iframe>\n              </div>\n              {/* <div className={styles.upcomingTaskBox}>\n                <div className={styles.chatBoxWrapper}>\n                  <div className={styles.chatNameAndImgWrapper}>\n                    <div className={styles.userImg}>\n                      <Image\n                        src={\"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Fblank_profile.png?alt=media&token=53afec48-03b2-4843-9b9c-8dc9c252ea41\"}\n                        circular\n                        alt=\"user-image\"\n                        height={\"20px\"}\n                        width={\"20px\"}\n                      />\n                    </div>\n                    <div className={styles.userName}>Mirza</div>\n                    <div className={styles.messageTime}>1 min</div>\n                  </div>\n                  <div className={styles.chatMessageBox}>\n                    Lorem Ipsum is simply dummy text of the printing and\n                    typesetting industry.\n                  </div>\n                </div>\n                <div className={styles.chatBoxWrapper}>\n                  <div className={styles.chatNameAndImgWrapper}>\n                    <div className={styles.userImg}>\n                      <Image\n                        src={\"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Fblank_profile.png?alt=media&token=53afec48-03b2-4843-9b9c-8dc9c252ea41\"}\n                        circular\n                        alt=\"user-image\"\n                        height={\"20px\"}\n                        width={\"20px\"}\n                      />\n                    </div>\n                    <div className={styles.userName}>John</div>\n                    <div className={styles.messageTime}>1 min</div>\n                  </div>\n                  <div className={styles.chatMessageBox}>\n                    Lorem Ipsum is simply dummy text of the printing and\n                    typesetting industry.\n                  </div>\n                </div>\n                <div className={styles.chatBoxWrapper}>\n                  <div className={styles.chatNameAndImgWrapper}>\n                    <div className={styles.userImg}>\n                      <Image\n                        src={\"https://firebasestorage.googleapis.com/v0/b/tremendodev.appspot.com/o/static_images%2Fblank_profile.png?alt=media&token=53afec48-03b2-4843-9b9c-8dc9c252ea41\"}\n                        circular\n                        alt=\"user-image\"\n                        height={\"20px\"}\n                        width={\"20px\"}\n                      />\n                    </div>\n                    <div className={styles.userName}>Andrew</div>\n                    <div className={styles.messageTime}>1 min</div>\n                  </div>\n                  <div className={styles.chatMessageBox}>\n                    Lorem Ipsum is simply dummy text of the printing and\n                    typesetting industry.\n                  </div>\n                </div>\n                <div className={styles.chatInputWrapper}>\n                  <div className={styles.chatIcons}>\n                    <IconComponent name={\"chatIcon\"} />\n                  </div>\n                  <div className={styles.search}>\n                    <Input\n                      placeholder={\"Write a message\"}\n                      inputStyling={{\n                        width: \"100%\",\n                        fontSize: \"10px\",\n                        backgroundColor: \"#fafafa\",\n                        color: \"#1b1c1c\",\n                        padding: \"8px 15px\"\n                      }}\n                    />\n                  </div>\n                  <div className={styles.chatIcons}>\n                    <IconComponent name={\"sendIcon\"} />\n                  </div>\n                </div>\n              </div> */}\n            </div>\n            <div className={styles.letsTalkSection}>\n              <div className={styles.upcomingTaskHeading}>\n                {studentDashboard ? \"Batch Mates\" : \"Students\"}\n              </div>\n              <div style={{ marginTop: \"10px\" }}>\n                {studentDashboard\n                  ? studentDashboardState.studentBatchMates?.map(i => (\n                      <Label key={i.name} as=\"a\">\n                        {i.name}\n                      </Label>\n                    ))\n                  : studentDashboardState.mentorStudentList.map(i => (\n                      <Label key={i.student_batch_id} as=\"a\">\n                        {i.user_name}\n                      </Label>\n                    ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      </DesktopOnly>\n      <MobileOnly>\n        <div className={styles.mobileBase}>\n          <div className={styles.navbarMobile}>\n            <div>\n              <Icon\n                name=\"list\"\n                size=\"large\"\n                onClick={() => setVisible(!visible)}\n              />\n            </div>\n            <div className={styles.search}>\n              <Input\n                placeholder={\"What Are you looking for?\"}\n                inputStyling={{\n                  width: \"100%\",\n                  fontSize: \"13px\",\n                  backgroundColor: studentDashboard ? \"#ecf8f8\" : \"#f8f8f8\",\n                  color: \"#1b1c1c\",\n                  padding: \"8px 15px\"\n                }}\n                value={inputVal}\n                handleChange={text => onChangeSearch(text)}\n                onHandleFocus={() => onFocusHandle()}\n              />\n            </div>\n            <div className={styles.profileName}>{`Hi, ${\n              name.split(\" \")[0]\n            }`}</div>\n          </div>\n          {startSearch && (\n            <div className={styles.optionWrapper}>\n              {searchOptions.length > 0 ? (\n                searchOptions.map((name, index) => (\n                  <div\n                    className={styles.searchOptions}\n                    key={index}\n                    onClick={() => optionSelected(name)}\n                  >\n                    {name.tab}\n                  </div>\n                ))\n              ) : (\n                <div className={styles.searchOptions}>No Result</div>\n              )}\n            </div>\n          )}\n          <div>\n            <Sidebar.Pushable as={Segment} className={styles.pusherSection}>\n              <Sidebar\n                as={Menu}\n                animation=\"overlay\"\n                icon=\"labeled\"\n                onHide={() => setVisible(false)}\n                vertical\n                visible={visible}\n                width=\"thin\"\n                style={{\n                  backgroundColor: studentDashboard\n                    ? \"rgb(236, 248, 248)\"\n                    : \"#ffecd6\"\n                }}\n              >\n                {tabsData.map((i, index) => (\n                  <div key={index} onClick={() => selectTab(i)}>\n                    <Menu.Item as=\"a\">\n                      <IconComponent\n                        name={i.icon}\n                        color={\n                          selectedTab == i.id ? SELECTED_TAB_COLOR : \"#2a2a2a\"\n                        }\n                        fill={selectedTab == i.id}\n                      />\n                      <div>{i.tab}</div>\n                    </Menu.Item>\n                  </div>\n                ))}\n              </Sidebar>\n\n              <Sidebar.Pusher dimmed={visible}>\n                <Segment basic className={styles.segmentBasic}>\n                  <div\n                    style={{\n                      backgroundColor: studentDashboard ? \"#fff6eb\" : \"#f8f7f6\"\n                    }}\n                  >\n                    <div className={styles.childrenSection}>\n                      {tabsData[selectedTab - 1].component}\n                    </div>\n                    <div className={styles.upcomingTaskSection}>\n                      <div className={styles.upcomingTaskHeading}>\n                        Upcoming Task\n                      </div>\n                      <div className={styles.upcomingTaskBox}>\n                        {[1, 1, 1, 1].map((i, index) => (\n                          <div className={styles.taskWrapper} key={index}>\n                            <div className={styles.taskImage}></div>\n                            <div className={styles.taskDetail}>\n                              <div className={styles.taskName}>\n                                Lorem Ipsum Lorem\n                              </div>\n                              <div className={styles.taskTime}>Time & Date</div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                </Segment>\n              </Sidebar.Pusher>\n            </Sidebar.Pushable>\n          </div>\n        </div>\n      </MobileOnly>\n      {startSearch && (\n        <div\n          className={styles.overlay}\n          onClick={() => setStartSearch(!startSearch)}\n        ></div>\n      )}\n    </>\n  );\n}\n","/home/tthinksys/tremendo_frontend/components/Trustfactor/Trustfactor.js",[],"/home/tthinksys/tremendo_frontend/components/VisibilityChild/VisibilityChild.js",[],"/home/tthinksys/tremendo_frontend/components/WhyTremendo/WhyTremendo.js",[],"/home/tthinksys/tremendo_frontend/components/WriteFormBox/WriteFormBox.js",[],{"ruleId":"320","severity":1,"message":"321","line":18,"column":6,"nodeType":"322","endLine":18,"endColumn":8,"suggestions":"323"},{"ruleId":"320","severity":1,"message":"324","line":16,"column":6,"nodeType":"322","endLine":16,"endColumn":8,"suggestions":"325"},{"ruleId":"320","severity":1,"message":"326","line":68,"column":6,"nodeType":"322","endLine":68,"endColumn":8,"suggestions":"327"},{"ruleId":"320","severity":1,"message":"328","line":63,"column":6,"nodeType":"322","endLine":63,"endColumn":48,"suggestions":"329"},{"ruleId":"320","severity":1,"message":"324","line":37,"column":6,"nodeType":"322","endLine":37,"endColumn":8,"suggestions":"330"},{"ruleId":"320","severity":1,"message":"331","line":48,"column":6,"nodeType":"322","endLine":48,"endColumn":8,"suggestions":"332"},{"ruleId":"320","severity":1,"message":"324","line":33,"column":6,"nodeType":"322","endLine":33,"endColumn":27,"suggestions":"333"},{"ruleId":"320","severity":1,"message":"334","line":34,"column":6,"nodeType":"322","endLine":34,"endColumn":8,"suggestions":"335"},{"ruleId":"320","severity":1,"message":"324","line":50,"column":6,"nodeType":"322","endLine":50,"endColumn":8,"suggestions":"336"},{"ruleId":"320","severity":1,"message":"337","line":31,"column":6,"nodeType":"322","endLine":31,"endColumn":8,"suggestions":"338"},{"ruleId":"320","severity":1,"message":"337","line":36,"column":6,"nodeType":"322","endLine":36,"endColumn":8,"suggestions":"339"},{"ruleId":"320","severity":1,"message":"340","line":83,"column":6,"nodeType":"322","endLine":83,"endColumn":8,"suggestions":"341"},{"ruleId":"320","severity":1,"message":"342","line":37,"column":6,"nodeType":"322","endLine":37,"endColumn":8,"suggestions":"343"},{"ruleId":"320","severity":1,"message":"344","line":42,"column":6,"nodeType":"322","endLine":42,"endColumn":8,"suggestions":"345"},{"ruleId":"320","severity":1,"message":"342","line":27,"column":6,"nodeType":"322","endLine":27,"endColumn":8,"suggestions":"346"},{"ruleId":"320","severity":1,"message":"347","line":39,"column":6,"nodeType":"322","endLine":39,"endColumn":8,"suggestions":"348"},{"ruleId":"349","severity":1,"message":"350","line":63,"column":13,"nodeType":"351","endLine":71,"endColumn":15},{"ruleId":"320","severity":1,"message":"352","line":41,"column":6,"nodeType":"322","endLine":41,"endColumn":8,"suggestions":"353"},{"ruleId":"320","severity":1,"message":"354","line":44,"column":6,"nodeType":"322","endLine":44,"endColumn":15,"suggestions":"355"},{"ruleId":"320","severity":1,"message":"356","line":78,"column":6,"nodeType":"322","endLine":78,"endColumn":8,"suggestions":"357"},{"ruleId":"320","severity":1,"message":"342","line":32,"column":6,"nodeType":"322","endLine":32,"endColumn":8,"suggestions":"358"},{"ruleId":"320","severity":1,"message":"359","line":61,"column":6,"nodeType":"322","endLine":61,"endColumn":23,"suggestions":"360"},{"ruleId":"320","severity":1,"message":"361","line":77,"column":6,"nodeType":"322","endLine":77,"endColumn":8,"suggestions":"362"},{"ruleId":"320","severity":1,"message":"361","line":129,"column":6,"nodeType":"322","endLine":129,"endColumn":8,"suggestions":"363"},{"ruleId":"320","severity":1,"message":"364","line":27,"column":6,"nodeType":"322","endLine":27,"endColumn":8,"suggestions":"365"},{"ruleId":"320","severity":1,"message":"342","line":25,"column":6,"nodeType":"322","endLine":25,"endColumn":8,"suggestions":"366"},{"ruleId":"320","severity":1,"message":"367","line":73,"column":6,"nodeType":"322","endLine":73,"endColumn":8,"suggestions":"368"},{"ruleId":"320","severity":1,"message":"369","line":82,"column":6,"nodeType":"322","endLine":82,"endColumn":29,"suggestions":"370"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'router.asPath'. Either include it or remove the dependency array.","ArrayExpression",["371"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["372"],"React Hook useEffect has missing dependencies: 'getInitalData' and 'setTabIndex'. Either include them or remove the dependency array.",["373"],"React Hook useEffect has missing dependencies: 'dispatch' and 'setTabIndex'. Either include them or remove the dependency array.",["374"],["375"],"React Hook useEffect has missing dependencies: 'dispatch', 'homeState.getLanguage.length', and 'homeState.pageData.length'. Either include them or remove the dependency array.",["376"],["377"],"React Hook useEffect has a missing dependency: 'getPaymentDetails'. Either include it or remove the dependency array.",["378"],["379"],"React Hook useEffect has a missing dependency: 'getBatchList'. Either include it or remove the dependency array.",["380"],["381"],"React Hook useEffect has missing dependencies: 'languageState.storedMentorBatch.batch_id' and 'studentDashboardState.mentorBatches.length'. Either include them or remove the dependency array.",["382"],"React Hook useEffect has missing dependencies: 'dispatch' and 'languageState.setStudentSelectedLanguage.batch_id'. Either include them or remove the dependency array.",["383"],"React Hook useEffect has a missing dependency: 'homeState.getLanguage'. Either include it or remove the dependency array.",["384"],["385"],"React Hook useEffect has a missing dependency: 'getDashboardData'. Either include it or remove the dependency array.",["386"],"@next/next/no-img-element","Do not use <img>. Use Image from 'next/image' instead. See https://nextjs.org/docs/messages/no-img-element.","JSXOpeningElement","React Hook useEffect has missing dependencies: 'dispatch' and 'homeState.getLanguage'. Either include them or remove the dependency array.",["387"],"React Hook useEffect has a missing dependency: 'setFieldsIntoState'. Either include it or remove the dependency array.",["388"],"React Hook useEffect has missing dependencies: 'dispatch', 'getDashboardData', and 'languageState.storedMentorBatch.batch_id'. Either include them or remove the dependency array.",["389"],["390"],"React Hook useEffect has missing dependencies: 'profileData', 'setLanguageToStore', and 'userDetails'. Either include them or remove the dependency array.",["391"],"React Hook useEffect has a missing dependency: 'updateFieldsValue'. Either include it or remove the dependency array.",["392"],["393"],"React Hook useEffect has a missing dependency: 'getProgressData'. Either include it or remove the dependency array.",["394"],["395"],"React Hook useEffect has missing dependencies: 'onHandleChangeBatch' and 'studentDashboardState.mentorBatches'. Either include them or remove the dependency array.",["396"],"React Hook useEffect has missing dependencies: 'langDispatch' and 'studentDashboard'. Either include them or remove the dependency array.",["397"],{"desc":"398","fix":"399"},{"desc":"400","fix":"401"},{"desc":"402","fix":"403"},{"desc":"404","fix":"405"},{"desc":"400","fix":"406"},{"desc":"407","fix":"408"},{"desc":"409","fix":"410"},{"desc":"411","fix":"412"},{"desc":"400","fix":"413"},{"desc":"414","fix":"415"},{"desc":"414","fix":"416"},{"desc":"417","fix":"418"},{"desc":"419","fix":"420"},{"desc":"421","fix":"422"},{"desc":"419","fix":"423"},{"desc":"424","fix":"425"},{"desc":"426","fix":"427"},{"desc":"428","fix":"429"},{"desc":"430","fix":"431"},{"desc":"419","fix":"432"},{"desc":"433","fix":"434"},{"desc":"435","fix":"436"},{"desc":"435","fix":"437"},{"desc":"438","fix":"439"},{"desc":"419","fix":"440"},{"desc":"441","fix":"442"},{"desc":"443","fix":"444"},"Update the dependencies array to be: [router.asPath]",{"range":"445","text":"446"},"Update the dependencies array to be: [dispatch]",{"range":"447","text":"448"},"Update the dependencies array to be: [getInitalData, setTabIndex]",{"range":"449","text":"450"},"Update the dependencies array to be: [dispatch, languageState.setStudentSelectedLanguage, setTabIndex]",{"range":"451","text":"452"},{"range":"453","text":"448"},"Update the dependencies array to be: [dispatch, homeState.getLanguage.length, homeState.pageData.length]",{"range":"454","text":"455"},"Update the dependencies array to be: [currentLanguagePage, dispatch]",{"range":"456","text":"457"},"Update the dependencies array to be: [getPaymentDetails]",{"range":"458","text":"459"},{"range":"460","text":"448"},"Update the dependencies array to be: [getBatchList]",{"range":"461","text":"462"},{"range":"463","text":"462"},"Update the dependencies array to be: [languageState.storedMentorBatch.batch_id, studentDashboardState.mentorBatches.length]",{"range":"464","text":"465"},"Update the dependencies array to be: [dispatch, languageState.setStudentSelectedLanguage.batch_id]",{"range":"466","text":"467"},"Update the dependencies array to be: [homeState.getLanguage]",{"range":"468","text":"469"},{"range":"470","text":"467"},"Update the dependencies array to be: [getDashboardData]",{"range":"471","text":"472"},"Update the dependencies array to be: [dispatch, homeState.getLanguage]",{"range":"473","text":"474"},"Update the dependencies array to be: [details, setFieldsIntoState]",{"range":"475","text":"476"},"Update the dependencies array to be: [dispatch, getDashboardData, languageState.storedMentorBatch.batch_id]",{"range":"477","text":"478"},{"range":"479","text":"467"},"Update the dependencies array to be: [profileData, router.pathname, setLanguageToStore, userDetails]",{"range":"480","text":"481"},"Update the dependencies array to be: [updateFieldsValue]",{"range":"482","text":"483"},{"range":"484","text":"483"},"Update the dependencies array to be: [getProgressData]",{"range":"485","text":"486"},{"range":"487","text":"467"},"Update the dependencies array to be: [onHandleChangeBatch, studentDashboardState.mentorBatches]",{"range":"488","text":"489"},"Update the dependencies array to be: [authState.profileData, langDispatch, studentDashboard]",{"range":"490","text":"491"},[639,641],"[router.asPath]",[745,747],"[dispatch]",[2141,2143],"[getInitalData, setTabIndex]",[2181,2223],"[dispatch, languageState.setStudentSelectedLanguage, setTabIndex]",[1394,1396],[1904,1906],"[dispatch, homeState.getLanguage.length, homeState.pageData.length]",[1364,1385],"[currentLanguagePage, dispatch]",[1097,1099],"[getPaymentDetails]",[1757,1759],[1033,1035],"[getBatchList]",[1224,1226],[2633,2635],"[languageState.storedMentorBatch.batch_id, studentDashboardState.mentorBatches.length]",[1315,1317],"[dispatch, languageState.setStudentSelectedLanguage.batch_id]",[1229,1231],"[homeState.getLanguage]",[1020,1022],[1509,1511],"[getDashboardData]",[1623,1625],"[dispatch, homeState.getLanguage]",[1679,1688],"[details, setFieldsIntoState]",[2644,2646],"[dispatch, getDashboardData, languageState.storedMentorBatch.batch_id]",[1358,1360],[1781,1798],"[profileData, router.pathname, setLanguageToStore, userDetails]",[2277,2279],"[updateFieldsValue]",[3493,3495],[1135,1137],"[getProgressData]",[989,991],[2058,2060],"[onHandleChangeBatch, studentDashboardState.mentorBatches]",[2317,2340],"[authState.profileData, langDispatch, studentDashboard]"]